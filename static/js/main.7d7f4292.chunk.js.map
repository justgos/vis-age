{"version":3,"sources":["config.tsx","util/proto.tsx","store/expression-dataset/types.tsx","store/expression-dataset/actions.tsx","store/datasets/actions.tsx","store/datasets/types.tsx","components/FilterPanel.tsx","components/SceneController.tsx","store/expression-dataset/reducers.tsx","store/datasets/reducers.tsx","store/pathways/graphHelpers.tsx","store/pathways/reducers.tsx","store/tooltip/reducers.tsx","store/selection/reducers.tsx","store/index.tsx","store/pathways/types.tsx","store/tooltip/types.tsx","store/selection/types.tsx","shaders/GraphEdgeShader.tsx","components/GraphEdges.tsx","components/ObservesSelection.tsx","shaders/PointShader.tsx","components/GraphNodes.tsx","store/selection/actions.tsx","components/Graph.tsx","components/Tooltip.tsx","components/TooltipController.tsx","components/CellEmbedding.tsx","App.tsx","store/pathways/actions.tsx","serviceWorker.js","index.tsx"],"names":["dpi","window","devicePixelRatio","getProto","a","async","axios","get","protoDef","proto","protobuf","parse","data","root","loadProto","protoClass","url","responseType","contentBin","content","decode","Uint8Array","SET_FILTER_VALUE","setExpressionDatasetFilterValue","name","value","type","updateDataset","dataset","meta","id","mapDispatchToProps","setFilterValue","connector","connect","state","filterValues","expressionDataset","filterValueVocabulary","cellMetaMetadata","datasets","dimensionLabels","mode","setMode","useState","goActivity","setGOActivity","className","href","options","label","onChange","evt","target","Classes","INPUT","MINIMAL","placeholder","currentTarget","checked","undefined","selectedValue","values","changeGOActivity","parseInt","goActivities","map","ga","i","key","filter_param","entries","t","SceneController","children","canvasContainerRef","useThree","mouse","size","width","height","camera","invalidate","useMemo","performance","now","fpsCount","lastTime","lastReportTime","sceneRef","useRef","mainLight","THREE","x","y","z","k","vec","spherical","viewTransform","bind","useGesture","onDrag","event","last","down","delta","dx","dy","buttons","touches","preventDefault","onWheel","zoom","position","mx","my","dScale","onPinch","first","da","d","previous","pd","origin","memo","domTarget","passive","useEffect","useFrame","curTime","updateProjectionMatrix","ref","intensity","rotation","castShadow","initialState","raw","filteredGeneExpression","Map","filterDimensionNames","customFilterFunctions","filtered","raw2filtered","updateFilterVocabularies","forEach","dim","filterDimensions","vocab","group","reduceCount","all","slice","sort","b","localeCompare","numeric","set","onDatasetFilterChanged","crossfilter","dimName","filterAll","filterValue","filterFn","filterFunction","filter","allFiltered","clear","r","__id","length","row","gene","constructGraph","nodeData","edgeData","nodes","edges","edgeMap","n","node","location","Math","random","vx","vy","cellularLocation","some","l","includes","push","addNode","e","edge","sourceEdges","source","targetEdges","addEdge","sourcePos","targetPos","adjacentEdges","meanLocation","reduce","simulation","forceSimulation","flatEdges","JSON","stringify","Array","from","entry","force","forceManyBody","strength","forceLink","distance","max","abs","structuringForce","stop","simNodes","cachedPositions","tick","minX","maxX","minY","maxY","rehydrateGraph","dehydrated","graph","relation","cx","cy","strengths","xz","yz","constant","_","alpha","sx","sy","initialize","arguments","geneAnnotations","genes","parsePathways","active","targets","selectedNodes","selectedEdges","allReducers","combineReducers","action","setFilterDimensions","dimensions","dimension","next","addCustomFilterDimension","selector","console","error","dataset_sfd","dataset_acfd","dataset_sfv","pathways","updatePathways","updateGeneAnnotations","tooltip","selection","updateTarget","points","ctx","tooltipConstructor","store","createStore","GraphEdgeShader","vertexShader","fragmentShader","blendSrc","blendDst","blending","transparent","uniforms","GraphEdges","color","positions","uvs","colors","BufferAttribute","Float32Array","posBuf","uvBuf","colorBuf","graphEdgeShader","frustumCulled","material","attach","attributes","uv","observeSelection","Wrapped","stateSelector","props","subscription","_mounted","this","setState","getState","subscribe","handleStoreUpdate","React","Component","PointShader","pointTexture","GraphNodes","sizes","sizeBuf","loader","load","pointShader","updateSelection","Graph","neutralColor","warmColor","coldColor","setFilteredGeneExpression","getNodeColorsAndSizes","emphasized","filteredNodes","refExpressionRows","shouldInclude","refExpressionRow","geneName","entityReference","expressionData","foldChange","fold_change_log2","sqrt","renderTruncatedList","list","itemCallback","limit","trunctationNoticeWrapper","res","truncationNotice","dispatch","firstNeighbours","Set","firstNeighbour","Object","geneAnnotation","style","toFixed","xref","db","go_terms","gt","neighbour","SelectionAwareGraphNodes","SelectionAwareGraphEdges","Tooltip","left","top","display","containerRef","pointTrees","pointTree","RBush","p","targetId","setTargetId","tooltipState","setTooltipState","onMouseMove","theNearestPoint","theNearestDist","Infinity","theNearestScreenPos","theNearestTargetId","mouseX","gl","domElement","offsetLeft","mouseY","offsetTop","nearest","knn","point","pointScreenPos","pointDist","pow","touchState","nTouches","lastTouchPos","touchStartPos","onMove","xy","onTouchStart","pageX","pageY","onTouchMove","onTouchEnd","CellEmbedding","datasetId","metadataDatasetId","goActivityDatasetId","cellEmbeddings","setCellEmbeddings","cellMetadata","setCellsMetadata","metadata","metadataVocabs","ageVocab","age","sexVocab","sex","tissueVocab","tissue","subtissueVocab","subtissue","cellOntologyClassVocab","cellOntologyClass","ages","ageColors","colormap","nshades","format","m","indexOf","updateExpressionDataset","setExpressionDatasetFilterDimensions","addExpressionDatasetCustomFilterDimension","loading","setLoading","Promise","complete","Papa","delimiter","header","download","dynamicTyping","skipEmptyLines","csvData","textColumns","join","toLowerCase","v","uniprot_daphnia","gene_annotations","cellEmbeddingsContainer","embeddingPoints","trunc","cellsMetadata","cellsMetaMetadata","cells","loadData","canvases","displayNodes","setTimeout","fov","near","far","orthographic","pixelRatio","invalidateFrameloop","gl2","onCreated","onCanvasCreated","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7d7f4292.chunk.js","sourcesContent":["export const dpi = window.devicePixelRatio || 1;\r\n","import axios from 'axios';\r\nimport protobuf from 'protobufjs';\r\n\r\nconst getProto = async () => {\r\n  const protoDef = await axios.get('./proto/visage.proto');\r\n  const proto = protobuf.parse(protoDef.data).root as any;\r\n  return proto;\r\n};\r\n\r\nexport const loadProto = async <T extends any>(protoClass : string, url : string) => {\r\n  const proto = await getProto();\r\n  const contentBin = await axios.get(url, { responseType: 'arraybuffer' });\r\n  const content = proto[protoClass].decode(new Uint8Array(contentBin.data)) as T;\r\n  return content;\r\n}\r\n","import crossfilter, { NaturallyOrderedValue } from 'crossfilter2';\r\nimport { ExpressionDataRow } from '../../core/types'\r\n\r\nexport type FilterValueType = string | number | boolean | undefined;\r\n\r\nexport type CustomFilterFn = \r\n  (filterValue : NaturallyOrderedValue) => \r\n    ((v : NaturallyOrderedValue) => boolean);\r\n\r\nexport interface ExpressionDatasetState {\r\n  raw : ExpressionDataRow[];\r\n  filteredGeneExpression : Map<string, ExpressionDataRow>;\r\n  filterValues : Map<string, FilterValueType>;\r\n  filterValueVocabulary : Map<string, Map<string, number>>;\r\n  crossfilter? : crossfilter.Crossfilter<ExpressionDataRow>;\r\n  filterDimensions? : Map<string, crossfilter.Dimension<ExpressionDataRow, NaturallyOrderedValue>>;\r\n  filterDimensionNames : string[];\r\n  customFilterFunctions : Map<string, CustomFilterFn>;\r\n  filtered : ExpressionDataRow[];\r\n  raw2filtered : Map<number, number>;\r\n};\r\n\r\nexport const UPDATE_EXPRESSION_DATASET = 'UPDATE_EXPRESSION_DATASET';\r\nexport const SET_FILTER_DIMENSIONS = 'SET_EXPRESSION_DATASET_FILTER_DIMENSIONS';\r\nexport const ADD_CUSTOM_FILTER_DIMENSION = 'ADD_EXPRESSION_DATASET_CUSTOM_FILTER_DIMENSION';\r\nexport const SET_FILTER_VALUE = 'SET_EXPRESSION_DATASET_FILTER_VALUE';\r\n\r\nexport interface UpdateExpressionDatasetAction {\r\n  type : string;\r\n  dataset : ExpressionDataRow[];\r\n};\r\nexport interface SetExpressionDatasetFilterDimensionsAction {\r\n  type : string;\r\n  dimensions : string[];\r\n};\r\nexport interface AddCustomExpressionDatasetFilterDimensionAction {\r\n  type : string;\r\n  name : string;\r\n  selector : (row : ExpressionDataRow) => NaturallyOrderedValue;\r\n  filterFn? : CustomFilterFn;\r\n};\r\nexport interface SetExpressionDatasetFilterValueAction {\r\n  type : string;\r\n  name : string;\r\n  value : FilterValueType;\r\n};\r\n\r\nexport type ExpressionDatasetActionTypes = \r\n  UpdateExpressionDatasetAction \r\n  | SetExpressionDatasetFilterDimensionsAction\r\n  | AddCustomExpressionDatasetFilterDimensionAction\r\n  | SetExpressionDatasetFilterValueAction;\r\n","import { ExpressionDataRow } from '../../core/types'\r\nimport { \r\n  UpdateExpressionDatasetAction, \r\n  SetExpressionDatasetFilterDimensionsAction,\r\n  SetExpressionDatasetFilterValueAction, \r\n  UPDATE_EXPRESSION_DATASET, \r\n  SET_FILTER_VALUE,\r\n  FilterValueType,\r\n  SET_FILTER_DIMENSIONS,\r\n  AddCustomExpressionDatasetFilterDimensionAction,\r\n  ADD_CUSTOM_FILTER_DIMENSION,\r\n  CustomFilterFn,\r\n} from './types'\r\nimport { NaturallyOrderedValue } from 'crossfilter2';\r\n\r\nexport const updateExpressionDataset = (dataset : ExpressionDataRow[]) : UpdateExpressionDatasetAction => {\r\n  return {\r\n    type: UPDATE_EXPRESSION_DATASET,\r\n    dataset,\r\n  }\r\n};\r\n\r\nexport const setExpressionDatasetFilterDimensions = (\r\n  dimensions : string[]\r\n) : SetExpressionDatasetFilterDimensionsAction => {\r\n  return {\r\n    type: SET_FILTER_DIMENSIONS,\r\n    dimensions,\r\n  }\r\n};\r\n\r\nexport const addExpressionDatasetCustomFilterDimension = (\r\n  name : string,\r\n  selector : (row : ExpressionDataRow) => NaturallyOrderedValue,\r\n  filterFn? : CustomFilterFn\r\n) : AddCustomExpressionDatasetFilterDimensionAction => {\r\n  return {\r\n    type: ADD_CUSTOM_FILTER_DIMENSION,\r\n    name,\r\n    selector,\r\n    filterFn,\r\n  }\r\n};\r\n\r\nexport const setExpressionDatasetFilterValue = (name : string, value : FilterValueType) : SetExpressionDatasetFilterValueAction => {\r\n  return {\r\n    type: SET_FILTER_VALUE,\r\n    name,\r\n    value,\r\n  }\r\n};\r\n","import { \r\n  UpdateDatasetAction, \r\n  SetDatasetFilterDimensionsAction,\r\n  SetDatasetFilterValueAction, \r\n  UPDATE_DATASET, \r\n  SET_FILTER_VALUE,\r\n  FilterValueType,\r\n  SET_FILTER_DIMENSIONS,\r\n  AddCustomDatasetFilterDimensionAction,\r\n  ADD_CUSTOM_FILTER_DIMENSION,\r\n  CustomFilterFn,\r\n} from './types'\r\nimport { NaturallyOrderedValue } from 'crossfilter2';\r\n\r\nexport const updateDataset = <T extends any>(name : string, dataset : T[], meta : any = {}) : UpdateDatasetAction<T> => {\r\n  return {\r\n    type: UPDATE_DATASET,\r\n    id: name,\r\n    dataset,\r\n    meta,\r\n  }\r\n};\r\n\r\nexport const setFilterDimensions = (\r\n  id : string,\r\n  dimensions : string[],\r\n) : SetDatasetFilterDimensionsAction => {\r\n  return {\r\n    type: SET_FILTER_DIMENSIONS,\r\n    id,\r\n    dimensions,\r\n  }\r\n};\r\n\r\nexport const addCustomFilterDimension = <T extends any>(\r\n  id : string,\r\n  name : string,\r\n  selector : (row : T) => NaturallyOrderedValue,\r\n  filterFn? : CustomFilterFn,\r\n) : AddCustomDatasetFilterDimensionAction<T> => {\r\n  return {\r\n    type: ADD_CUSTOM_FILTER_DIMENSION,\r\n    id,\r\n    name,\r\n    selector,\r\n    filterFn,\r\n  }\r\n};\r\n\r\nexport const setFilterValue = (\r\n  id : string,\r\n  name : string, \r\n  value : FilterValueType,\r\n) : SetDatasetFilterValueAction => {\r\n  return {\r\n    type: SET_FILTER_VALUE,\r\n    id,\r\n    name,\r\n    value,\r\n  }\r\n};\r\n","import crossfilter, { NaturallyOrderedValue } from 'crossfilter2';\r\n\r\nexport type FilterValueType = string | number | boolean | undefined;\r\n\r\nexport type CustomFilterFn = \r\n  (filterValue : NaturallyOrderedValue) => \r\n    ((v : NaturallyOrderedValue) => boolean);\r\n\r\nexport interface DatasetState<T> {\r\n  raw : T[];\r\n  meta : any;\r\n  filterValues : Map<string, FilterValueType>;\r\n  filterValueVocabulary : Map<string, Map<string, number>>;\r\n  crossfilter? : crossfilter.Crossfilter<T>;\r\n  filterDimensions? : Map<string, crossfilter.Dimension<T, NaturallyOrderedValue>>;\r\n  filterDimensionNames : string[];\r\n  customFilterFunctions : Map<string, CustomFilterFn>;\r\n  filtered : T[];\r\n  raw2filtered : Map<number, number>;\r\n};\r\n\r\nexport interface DatasetsState {\r\n  [name : string] : DatasetState<any>;\r\n}\r\n\r\nexport const UPDATE_DATASET = 'UPDATE_DATASET';\r\nexport const SET_FILTER_DIMENSIONS = 'SET_FILTER_DIMENSIONS';\r\nexport const ADD_CUSTOM_FILTER_DIMENSION = 'ADD_CUSTOM_FILTER_DIMENSION';\r\nexport const SET_FILTER_VALUE = 'SET_FILTER_VALUE';\r\n\r\nexport interface UpdateDatasetAction<T> {\r\n  type : string;\r\n  id : string;\r\n  dataset : T[];\r\n  meta : any;\r\n};\r\nexport interface SetDatasetFilterDimensionsAction {\r\n  type : string;\r\n  id : string;\r\n  dimensions : string[];\r\n};\r\nexport interface AddCustomDatasetFilterDimensionAction<T> {\r\n  type : string;\r\n  id : string;\r\n  name : string;\r\n  selector : (row : T) => NaturallyOrderedValue;\r\n  filterFn? : CustomFilterFn;\r\n};\r\nexport interface SetDatasetFilterValueAction {\r\n  type : string;\r\n  id : string;\r\n  name : string;\r\n  value : FilterValueType;\r\n};\r\n\r\nexport type DatasetActionTypes<T> = \r\n  UpdateDatasetAction<T>\r\n  | SetDatasetFilterDimensionsAction\r\n  | AddCustomDatasetFilterDimensionAction<T>\r\n  | SetDatasetFilterValueAction;\r\n","import React, { useState } from 'react';\r\nimport { connect, ConnectedProps  } from 'react-redux';\r\nimport axios from 'axios';\r\nimport { Classes, Checkbox, RadioGroup, Radio, HTMLSelect } from \"@blueprintjs/core\";\r\n\r\nimport { setExpressionDatasetFilterValue } from '../store/expression-dataset/actions'\r\nimport { CombinedState } from '../store';\r\nimport './FilterPanel.scss';\r\nimport { CellsMetaMetadata, CellActivity } from '../core/types';\r\nimport { updateDataset } from '../store/datasets/actions';\r\nimport { loadProto } from '../util/proto';\r\nimport { DataMode } from '../App';\r\n\r\nconst mapStateToProps = (\r\n  state : CombinedState\r\n) => {\r\n  return {\r\n    filterValues: state.expressionDataset.filterValues,\r\n    filterValueVocabulary: state.expressionDataset.filterValueVocabulary,\r\n    cellMetaMetadata: state.datasets['cellMetadata']?.meta as CellsMetaMetadata,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  setFilterValue: setExpressionDatasetFilterValue,\r\n  updateDataset: updateDataset,\r\n};\r\n\r\nconst connector = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n);\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>;\r\n\r\ntype Props = PropsFromRedux & {\r\n  mode : DataMode;\r\n  setMode : (mode : DataMode) => void;\r\n};\r\n\r\nconst dimensionLabels : { [dimension : string] : string } = {\r\n  'start_age': 'Start age',\r\n  'end_age': 'End age',\r\n  'sex': 'Sex',\r\n  'tissue': 'Tissue',\r\n  'subtissue': 'Subtissue',\r\n  'cell_ontology_class': 'Cell type',\r\n};\r\n\r\nfunction FilterPanel({\r\n  mode,\r\n  setMode,\r\n  filterValues, \r\n  filterValueVocabulary, \r\n  cellMetaMetadata, \r\n  setFilterValue,\r\n  updateDataset,\r\n} : Props) {\r\n  const [ goActivity, setGOActivity ] = useState(-1);\r\n  const changeGOActivity = async (id : number) => {\r\n    setGOActivity(id);\r\n    if(id >= 0) {\r\n      const goActivity = await loadProto<CellActivity>('Activity', './data/go-activity/' + id + '.bin');\r\n      updateDataset?.('goActivity', goActivity.values);\r\n    } else {\r\n      updateDataset?.('goActivity', []);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"filter-panel\">\r\n      <div className=\"project-description\">\r\n        <h3>Visual exploration of the <a href=\"https://github.com/czbiohub/tabula-muris-senis\">Tabula Muris Senis</a> dataset</h3>\r\n        <p>Detailed project description and the data preparation code can be found <a href=\"https://github.com/justgos/indagatio-muris-senis\">here</a></p>\r\n        <div className=\"mode-label\">View mode</div>\r\n        <HTMLSelect\r\n          value={mode}\r\n          options={[\r\n            { label: 'Pathways', value: 'pathways' },\r\n            { label: 'Embedding', value: 'embeddings' },\r\n          ]}\r\n          onChange={evt => setMode(evt.target.value as DataMode)}\r\n          className=\"bp3-fill mode-select\"\r\n        />\r\n        {mode === 'pathways' &&\r\n        <>\r\n          <p>Fold-changes in expression of various genes overlaid over the reaction network, vertically aligned by the cellular location: nucleus -&gt; extracellular region</p>\r\n        </>\r\n        }\r\n        {mode === 'embeddings' &&\r\n        <>\r\n          <p>UMAP embedding of cells by their gene expression, soft-filterable by the cellular processes which the most-expressed genes are associated with</p>\r\n        </>\r\n        }\r\n      </div>\r\n      {mode === 'pathways' &&\r\n      <>\r\n        <input \r\n          className={`filter-element text-filter ${Classes.INPUT} ${Classes.MINIMAL}`} \r\n          type=\"text\" \r\n          placeholder=\"filter by any text field\" \r\n          value={filterValues.get(\"text\") as string || ''} \r\n          onChange={ evt => setFilterValue(\"text\", evt.currentTarget.value) } \r\n        />\r\n        <Checkbox \r\n          className={`filter-element homolog-filter ${Classes.MINIMAL}`} \r\n          checked={filterValues.get(\"uniprot_daphnia\") != null} \r\n          onChange={ evt => setFilterValue(\"uniprot_daphnia\", evt.currentTarget.checked ? \"~\" : undefined) }\r\n        >\r\n          has Daphnia homolog\r\n        </Checkbox>\r\n      </>\r\n      }\r\n      {mode === 'embeddings' && cellMetaMetadata &&\r\n        <div className=\"filter-element\">\r\n          <div className=\"filter-element-label\">\r\n            GO activities\r\n          </div>\r\n          <RadioGroup \r\n            className={`${Classes.MINIMAL}`}\r\n            selectedValue={goActivity} \r\n            onChange={ evt => changeGOActivity(parseInt(evt.currentTarget.value)) } \r\n          >\r\n          <Radio value={-1}>&lt;none&gt;</Radio>\r\n          {cellMetaMetadata.goActivities.map((ga, i) => \r\n            <Radio key={i} value={i}>\r\n              {ga}\r\n            </Radio>\r\n          )}\r\n          </RadioGroup>\r\n        </div>\r\n      }\r\n      {mode === 'pathways' &&\r\n        [ 'start_age', 'end_age', 'sex', 'tissue', 'subtissue', 'cell_ontology_class' ].map(filter_param => \r\n          <div key={filter_param} className=\"filter-element\">\r\n            <div className=\"filter-element-label\">\r\n              {dimensionLabels[filter_param]}\r\n            </div>\r\n            <RadioGroup \r\n              className={`${Classes.MINIMAL}`}\r\n              selectedValue={filterValues.get(filter_param) as string} \r\n              onChange={ evt => setFilterValue(filter_param, evt.currentTarget.value) } \r\n            >\r\n            {[...(filterValueVocabulary.get(filter_param)?.entries() || [])].map(t => \r\n              <Radio key={t[0]} value={t[0]}>\r\n                {t[0] !== '' ? t[0] : '<none>'}\r\n                <span className=\"count\">{t[1]}</span>\r\n              </Radio>\r\n            )}\r\n            </RadioGroup>\r\n          </div>\r\n        )\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connector(FilterPanel);\r\n","import * as THREE from 'three'\r\nimport React, { useMemo, useRef, useEffect, PropsWithChildren } from 'react'\r\nimport { useFrame, useThree } from 'react-three-fiber'\r\nimport { useGesture } from 'react-use-gesture'\r\n\r\ninterface Props {\r\n  canvasContainerRef : React.RefObject<HTMLDivElement>;\r\n}\r\n\r\nexport default function SceneController({ children, canvasContainerRef } : PropsWithChildren<Props>) {\r\n  const {\r\n    mouse,\r\n    size: { width, height },\r\n    camera,\r\n    invalidate,\r\n  } = useThree();\r\n\r\n  const [ fpsCount, lastTime, lastReportTime]  = useMemo(\r\n    () => {\r\n      return [ { value: 0 }, { value: performance.now() }, { value: performance.now() } ]\r\n    }, []\r\n  );\r\n  const sceneRef = useRef();\r\n  const mainLight = useRef();\r\n  const [ targetTransform, viewTransform ] = useMemo(() => {\r\n    return [\r\n      new THREE.Vector3(),\r\n      {\r\n        x: 0,\r\n        y: 0,  // -80 + height / 2\r\n        z: 0,\r\n        // k: 1.0,\r\n        k: 0.25,\r\n        vec: new THREE.Vector3(),\r\n        spherical: new THREE.Spherical(),\r\n      },\r\n    ];\r\n  }, []);\r\n  \r\n  function mousePos() {\r\n    let mx = (mouse.x * 0.5) * width / camera.zoom + camera.position.x;\r\n    let my = (mouse.y * 0.5) * height / camera.zoom + camera.position.y;\r\n    return [ mx, my ];\r\n  }\r\n  function screen2world(x : number, y : number) {\r\n    return [\r\n      (x - width * 0.5) / camera.zoom + camera.position.x,\r\n      (height - y - height * 0.5) / camera.zoom + camera.position.y,\r\n    ];\r\n  }\r\n\r\n  const bind = useGesture({\r\n    onDrag: ({ event, last, down, delta: [dx, dy], buttons, touches }) => {\r\n      if(down && (buttons === 1 || touches === 1)) {\r\n        // const sensitivity = 0.005;\r\n        // viewTransform.spherical.theta -= dx / viewTransform.k * sensitivity;\r\n        // viewTransform.spherical.phi -= dy / viewTransform.k * sensitivity;\r\n        // viewTransform.spherical.radius = 1000 / viewTransform.k;\r\n        // viewTransform.spherical.makeSafe();\r\n        // viewTransform.vec.setFromSpherical(viewTransform.spherical);\r\n        // targetTransform.x -= Math.cos(dx / viewTransform.k) - Math.sin(dy / viewTransform.k);\r\n        // targetTransform.y += ;\r\n        viewTransform.x -= dx / viewTransform.k;\r\n        viewTransform.y += dy / viewTransform.k;\r\n        invalidate();\r\n      }\r\n      if(!last)\r\n        event?.preventDefault();\r\n\r\n      if(down)\r\n        invalidate();\r\n    },\r\n    onWheel: ({ event, last, delta: [dx, dy] }) => {\r\n      if(dx !== 0 || dy !== 0) {\r\n        const [ mx, my ] = mousePos();\r\n        const dScale = 1.0 - 0.002 * dy;\r\n        viewTransform.x += (mx - viewTransform.x) * -(1.0 - dScale);\r\n        viewTransform.y += (my - viewTransform.y) * -(1.0 - dScale);\r\n        viewTransform.k *= dScale;\r\n        // viewTransform.spherical.radius = 1000 / viewTransform.k;\r\n        // viewTransform.spherical.makeSafe();\r\n        // viewTransform.vec.setFromSpherical(viewTransform.spherical);\r\n        invalidate();\r\n      }\r\n      if(!last)\r\n        event?.preventDefault();\r\n    },\r\n    onPinch: ({ event, first, last, down, da: [d, a], previous: [pd, pa], origin, memo }) => {\r\n      if(down && !first) {\r\n        let dScale = d / pd;\r\n        viewTransform.x += (memo[0] - viewTransform.x) * -(1.0 - dScale);\r\n        viewTransform.y += (memo[1] - viewTransform.y) * -(1.0 - dScale);\r\n        viewTransform.k *= dScale;\r\n        // viewTransform.spherical.radius = 1000 / viewTransform.k;\r\n        // viewTransform.spherical.makeSafe();\r\n        // viewTransform.vec.setFromSpherical(viewTransform.spherical);\r\n        // invalidate();\r\n      }\r\n      if(!last)\r\n        event?.preventDefault();\r\n\r\n      if(first) {\r\n        return screen2world(origin?.[0] || 0, origin?.[1] || 0);\r\n      }\r\n      return memo;\r\n    },\r\n  }, {\r\n    domTarget: canvasContainerRef,\r\n    event: { passive: false },\r\n  });\r\n  useEffect(() => { bind(); }, [bind]);\r\n\r\n  useFrame(() => {\r\n    let curTime = performance.now();\r\n    lastTime.value = curTime;\r\n    fpsCount.value++;\r\n    if(curTime > lastReportTime.value + 1000.0) {\r\n        // console.log('fps', fpsCount.value);\r\n        lastReportTime.value = curTime;\r\n        fpsCount.value = 0;\r\n    }\r\n\r\n    // console.log('viewTransform.vec', viewTransform.vec)\r\n    // camera.position.set(viewTransform.vec.x, viewTransform.vec.y, viewTransform.vec.z);\r\n    // camera.rotation.x = viewTransform.spherical.phi;\r\n    // camera.rotation.y = viewTransform.spherical.theta;\r\n    // camera.lookAt(targetTransform);\r\n    camera.position.x = viewTransform.x;\r\n    camera.position.y = viewTransform.y;\r\n    camera.zoom = viewTransform.k;\r\n    camera.updateProjectionMatrix();\r\n  });\r\n\r\n  return (\r\n      <scene ref={sceneRef}>\r\n        <ambientLight intensity={0.5} />\r\n        <directionalLight intensity={0.6} position={[0, 0, 1000]} rotation={new THREE.Euler(0, 0, 0)} castShadow ref={mainLight} />\r\n        {/* <spotLight intensity={0.7} position={[0, 0, 1000]} rotation={new THREE.Euler(0, 0, 0)} angle={Math.PI / 2} penumbra={1} castShadow ref={mainLight} /> */}\r\n        {children}\r\n      </scene>\r\n  );\r\n}\r\n","import crossfilter, { NaturallyOrderedValue } from 'crossfilter2';\r\nimport { ExpressionDataRow } from '../../core/types'\r\nimport { \r\n  ExpressionDatasetState, \r\n  ExpressionDatasetActionTypes, \r\n  UpdateExpressionDatasetAction,\r\n  SetExpressionDatasetFilterDimensionsAction,\r\n  SetExpressionDatasetFilterValueAction,  \r\n  UPDATE_EXPRESSION_DATASET,\r\n  SET_FILTER_DIMENSIONS,\r\n  SET_FILTER_VALUE,\r\n  FilterValueType,\r\n  AddCustomExpressionDatasetFilterDimensionAction,\r\n  ADD_CUSTOM_FILTER_DIMENSION,\r\n  CustomFilterFn,\r\n} from './types'\r\n\r\nconst initialState : ExpressionDatasetState = {\r\n  raw: [],\r\n  filteredGeneExpression: new Map<string, ExpressionDataRow>(),\r\n  filterValues: new Map<string, FilterValueType>(),\r\n  filterValueVocabulary: new Map<string, Map<string, number>>(),\r\n  filterDimensionNames: [],\r\n  customFilterFunctions: new Map<string, CustomFilterFn>(),\r\n  filtered: [],\r\n  raw2filtered : new Map<number, number>(),\r\n}\r\n\r\nconst updateFilterVocabularies = (state : ExpressionDatasetState) : ExpressionDatasetState => {\r\n  state.filterDimensionNames.forEach(filter_param => {\r\n    const dim = state.filterDimensions?.get(filter_param);\r\n    if(!dim)\r\n      return;\r\n    // Get all the unique terms and sort 'em alphanumerically\r\n    const vocab = dim\r\n      .group()\r\n      .reduceCount()\r\n      .all()\r\n      .slice()\r\n      .sort((a, b) => (a.key as string).localeCompare(b.key as string, 'en', { numeric: true }));\r\n    state.filterValueVocabulary.set(\r\n      filter_param, \r\n      new Map<string, number>(vocab.map(t => [ t.key as string, t.value as number ]))\r\n    );\r\n  });\r\n  return state;\r\n}\r\n\r\nconst onDatasetFilterChanged = (state : ExpressionDatasetState) : ExpressionDatasetState => {\r\n  if(!state.crossfilter || !state.filterDimensions)\r\n    return state;\r\n  for(let [ dimName, dim ] of state.filterDimensions.entries()) {\r\n    // TODO: re-apply filter only when the `filterValue` changes\r\n    // Clear the applied filters\r\n    dim.filterAll()\r\n    let filterValue = state.filterValues.get(dimName);\r\n    if(filterValue == null)\r\n      continue;\r\n\r\n    const filterFn = state.customFilterFunctions.get(dimName);\r\n    // Apply either a custom filter function, or a default one - strict equality\r\n    if(filterFn) {\r\n      dim.filterFunction(filterFn(filterValue));\r\n    } else {\r\n      dim.filter(filterValue);\r\n    }\r\n  }\r\n  state.filtered = state.crossfilter.allFiltered();\r\n  state.raw2filtered.clear();\r\n  state.filtered.forEach((r, i) => state.raw2filtered.set(r.__id || -1, i));\r\n\r\n  state.filteredGeneExpression = new Map<string, ExpressionDataRow>();\r\n  for(let i=0; i < state.filtered.length; i++) {\r\n    const row = state.filtered[i];\r\n    if(row.gene) {\r\n      state.filteredGeneExpression.set(row.gene, row);\r\n    }\r\n  }\r\n\r\n  state = updateFilterVocabularies(state);\r\n\r\n  return state;\r\n}\r\n\r\nexport const expressionDatasetReducer = (\r\n  state = initialState, \r\n  action : ExpressionDatasetActionTypes\r\n) : ExpressionDatasetState => {\r\n  switch(action.type) {\r\n    case UPDATE_EXPRESSION_DATASET:\r\n      state.raw = (action as UpdateExpressionDatasetAction).dataset;\r\n      for(let i=0; i < state.raw.length; i++) {\r\n        const row = state.raw[i];\r\n        row.__id = i;\r\n      }\r\n      return {...state};\r\n\r\n    case SET_FILTER_DIMENSIONS:\r\n      let setFilterDimensions = (action as SetExpressionDatasetFilterDimensionsAction);\r\n      \r\n      state.crossfilter = crossfilter(state.raw);\r\n      state.filterDimensions = new Map<string, crossfilter.Dimension<ExpressionDataRow, NaturallyOrderedValue>>();\r\n\r\n      // Save dimension names\r\n      state.filterDimensionNames = setFilterDimensions.dimensions;\r\n      // Construct requested dimensions\r\n      state.filterDimensionNames.forEach(filter_param => {\r\n        if(state.crossfilter && state.filterDimensions)\r\n          state.filterDimensions.set(filter_param, state.crossfilter.dimension(r => (r as any)[filter_param] as string || ''));\r\n      });\r\n      // Reset the filter values\r\n      state.filterValues = new Map<string, FilterValueType>();\r\n      state = updateFilterVocabularies(state);\r\n      // Set the initial filter values <strike>where there's none</strike>\r\n      state.filterDimensionNames.forEach(filter_param => {\r\n        // if(!state.filterValues.has(filter_param)) {\r\n          state.filterValues.set(\r\n            filter_param, \r\n            state.filterValueVocabulary.get(filter_param)?.entries().next().value[0] || ''\r\n          );\r\n        // }\r\n      });\r\n\r\n      state = onDatasetFilterChanged(state);\r\n      return {...state};\r\n\r\n    case ADD_CUSTOM_FILTER_DIMENSION:\r\n      let addCustomFilterDimension = (action as AddCustomExpressionDatasetFilterDimensionAction);\r\n      if(!state.filterDimensions || !state.crossfilter) {\r\n        console.error('Trying to add a custom filter dimension before SET_FILTER_DIMENSIONS was called');\r\n        return state;\r\n      }\r\n      state.filterDimensions.set(\r\n        addCustomFilterDimension.name, \r\n        state.crossfilter.dimension(addCustomFilterDimension.selector)\r\n      );\r\n      if(addCustomFilterDimension.filterFn)\r\n        state.customFilterFunctions.set(addCustomFilterDimension.name, addCustomFilterDimension.filterFn);\r\n      // state.filterValues.set(addCustomFilterDimension.name, addCustomFilterDimension.defaultValue);\r\n      state = onDatasetFilterChanged(state);\r\n      return {...state};\r\n\r\n    case SET_FILTER_VALUE:\r\n      let setFilterValue = (action as SetExpressionDatasetFilterValueAction);\r\n      state.filterValues.set(setFilterValue.name, setFilterValue.value);\r\n      state.filterValues = new Map(state.filterValues);\r\n      state = onDatasetFilterChanged(state);\r\n      return {...state};\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import crossfilter, { NaturallyOrderedValue } from 'crossfilter2';\r\nimport { \r\n  DatasetsState,\r\n  DatasetState, \r\n  DatasetActionTypes, \r\n  UpdateDatasetAction,\r\n  SetDatasetFilterDimensionsAction,\r\n  SetDatasetFilterValueAction,  \r\n  UPDATE_DATASET,\r\n  SET_FILTER_DIMENSIONS,\r\n  SET_FILTER_VALUE,\r\n  FilterValueType,\r\n  AddCustomDatasetFilterDimensionAction,\r\n  ADD_CUSTOM_FILTER_DIMENSION,\r\n  CustomFilterFn,\r\n} from './types'\r\n\r\nconst initialState : DatasetsState = {\r\n  //\r\n}\r\n\r\nconst updateFilterVocabularies = (dataset : DatasetState<any>) : DatasetState<any> => {\r\n  dataset.filterDimensionNames.forEach(filter_param => {\r\n    const dim = dataset.filterDimensions?.get(filter_param);\r\n    if(!dim)\r\n      return;\r\n    // Get all the unique terms and sort 'em alphanumerically\r\n    const vocab = dim\r\n      .group()\r\n      .reduceCount()\r\n      .all()\r\n      .slice()\r\n      .sort((a, b) => (a.key as string).localeCompare(b.key as string, 'en', { numeric: true }));\r\n    dataset.filterValueVocabulary.set(\r\n      filter_param, \r\n      new Map<string, number>(vocab.map(t => [ t.key as string, t.value as number ]))\r\n    );\r\n  });\r\n  return dataset;\r\n}\r\n\r\nconst onDatasetFilterChanged = (dataset : DatasetState<any>) : DatasetState<any> => {\r\n  if(!dataset.crossfilter || !dataset.filterDimensions)\r\n    return dataset;\r\n  for(let [ dimName, dim ] of dataset.filterDimensions.entries()) {\r\n    // TODO: re-apply filter only when the `filterValue` changes\r\n    // Clear the applied filters\r\n    dim.filterAll()\r\n    let filterValue = dataset.filterValues.get(dimName);\r\n    if(filterValue == null)\r\n      continue;\r\n\r\n    const filterFn = dataset.customFilterFunctions.get(dimName);\r\n    // Apply either a custom filter function, or a default one - strict equality\r\n    if(filterFn) {\r\n      dim.filterFunction(filterFn(filterValue));\r\n    } else {\r\n      dim.filter(filterValue);\r\n    }\r\n  }\r\n  dataset.filtered = dataset.crossfilter.allFiltered();\r\n  dataset.raw2filtered.clear();\r\n  dataset.filtered.forEach((r, i) => dataset.raw2filtered.set(r.__id || -1, i));\r\n\r\n  // dataset.filteredGeneExpression = new Map<string, any>();\r\n  // for(let i=0; i < dataset.filtered.length; i++) {\r\n  //   const row = dataset.filtered[i];\r\n  //   if(row.gene) {\r\n  //     dataset.filteredGeneExpression.set(row.gene, row);\r\n  //   }\r\n  // }\r\n\r\n  // state = updateFilterVocabularies(state);\r\n\r\n  return dataset;\r\n}\r\n\r\nexport const datasetsReducer = (\r\n  state = initialState, \r\n  action : DatasetActionTypes<any>\r\n) : DatasetsState => {\r\n  switch(action.type) {\r\n    case UPDATE_DATASET:\r\n      const updateDataset = (action as UpdateDatasetAction<any>);\r\n      state[updateDataset.id] = {\r\n        raw: updateDataset.dataset,\r\n        meta: updateDataset.meta,\r\n        filterValues: new Map<string, FilterValueType>(),\r\n        filterValueVocabulary: new Map<string, Map<string, number>>(),\r\n        filterDimensionNames: [],\r\n        customFilterFunctions: new Map<string, CustomFilterFn>(),\r\n        filtered: [],\r\n        raw2filtered : new Map<number, number>(),\r\n      };\r\n      // for(let i=0; i < state.raw.length; i++) {\r\n      //   const row = state.raw[i];\r\n      //   row.__id = i;\r\n      // }\r\n      return {...state};\r\n\r\n    case SET_FILTER_DIMENSIONS:\r\n      let setFilterDimensions = (action as SetDatasetFilterDimensionsAction);\r\n\r\n      let dataset_sfd = state[setFilterDimensions.id];\r\n      \r\n      dataset_sfd.crossfilter = crossfilter(dataset_sfd.raw);\r\n      dataset_sfd.filterDimensions = new Map<string, crossfilter.Dimension<any, NaturallyOrderedValue>>();\r\n\r\n      // Save dimension names\r\n      dataset_sfd.filterDimensionNames = setFilterDimensions.dimensions;\r\n      // Construct requested dimensions\r\n      dataset_sfd.filterDimensionNames.forEach(filter_param => {\r\n        if(dataset_sfd.crossfilter && dataset_sfd.filterDimensions)\r\n          dataset_sfd.filterDimensions.set(filter_param, dataset_sfd.crossfilter.dimension(r => (r as any)[filter_param] as string || ''));\r\n      });\r\n      // Reset the filter values\r\n      dataset_sfd.filterValues = new Map<string, FilterValueType>();\r\n      dataset_sfd.filterValueVocabulary = new Map<string, Map<string, number>>();\r\n      dataset_sfd = updateFilterVocabularies(dataset_sfd);\r\n      // // Set the initial filter values <strike>where there's none</strike>\r\n      // dataset_sfd.filterDimensionNames.forEach(filter_param => {\r\n      //   // if(!dataset_sfd.filterValues.has(filter_param)) {\r\n      //     dataset_sfd.filterValues.set(\r\n      //       filter_param, \r\n      //       dataset_sfd.filterValueVocabulary.get(filter_param)?.entries().next().value[0] || ''\r\n      //     );\r\n      //   // }\r\n      // });\r\n\r\n      dataset_sfd = onDatasetFilterChanged(dataset_sfd);\r\n      state[setFilterDimensions.id] = dataset_sfd;\r\n      return {...state};\r\n\r\n    case ADD_CUSTOM_FILTER_DIMENSION:\r\n      let addCustomFilterDimension = (action as AddCustomDatasetFilterDimensionAction<any>);\r\n      let dataset_acfd = state[addCustomFilterDimension.id];\r\n      if(!dataset_acfd.filterDimensions || !dataset_acfd.crossfilter) {\r\n        console.error('Trying to add a custom filter dimension before SET_FILTER_DIMENSIONS was called');\r\n        return state;\r\n      }\r\n      dataset_acfd.filterDimensions.set(\r\n        addCustomFilterDimension.name, \r\n        dataset_acfd.crossfilter.dimension(addCustomFilterDimension.selector)\r\n      );\r\n      if(addCustomFilterDimension.filterFn)\r\n        dataset_acfd.customFilterFunctions.set(addCustomFilterDimension.name, addCustomFilterDimension.filterFn);\r\n      // dataset_acfd.filterValues.set(addCustomFilterDimension.name, addCustomFilterDimension.defaultValue);\r\n      dataset_acfd = onDatasetFilterChanged(dataset_acfd);\r\n      state[addCustomFilterDimension.id] = dataset_acfd;\r\n      return {...state};\r\n\r\n    case SET_FILTER_VALUE:\r\n      let setFilterValue = (action as SetDatasetFilterValueAction);\r\n      let dataset_sfv = state[setFilterValue.id];\r\n      dataset_sfv.filterValues.set(setFilterValue.name, setFilterValue.value);\r\n      dataset_sfv.filterValues = new Map(dataset_sfv.filterValues);\r\n      dataset_sfv = onDatasetFilterChanged(dataset_sfv);\r\n      state[setFilterValue.id] = dataset_sfv;\r\n      return {...state};\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { forceSimulation, forceManyBody, forceLink } from 'd3-force';\r\n\r\nimport { PathwayNode, PathwayEdge } from '../../core/types';\r\nimport { GraphNode, GraphEdge, PathwayGraph, DehydratedPathwayGraph } from './types'\r\n\r\nconst locationDistance = 250;\r\n\r\nexport const constructGraph = (nodeData : PathwayNode[], edgeData : PathwayEdge[]) : PathwayGraph => {\r\n  const nodes : GraphNode[] = [];\r\n  const edges : GraphEdge[] = [];\r\n  const edgeMap = new Map<number, GraphEdge[]>();\r\n\r\n  const addNode = (data : PathwayNode) => {\r\n    let node : GraphNode = {\r\n      ...data,\r\n      location: 0,\r\n      x: (Math.random() - 0.5) * 1000,\r\n      y: (Math.random() - 0.5) * 1000,\r\n      vx: 0,\r\n      vy: 0,\r\n    };\r\n    if(data.type === 'molecule' && data.cellularLocation) {\r\n      const cellularLocation = data.cellularLocation;\r\n      if([\r\n        'extracellular region',\r\n        'external side of plasma membrane',\r\n        'cell junction',\r\n      ].some(l => cellularLocation?.includes(l))) {\r\n        node.location = 5;\r\n      } else if([ \r\n        'cell outer membrane',\r\n        'cell wall',\r\n        'cell membrane',\r\n        'cytoplasmic side of plasma membrane',\r\n        'plasma membrane',\r\n      ].some(l => cellularLocation?.includes(l))) {\r\n        node.location = 4;\r\n      } else if([ \r\n        'mitochondrial',\r\n      ].some(l => cellularLocation?.includes(l))) {\r\n        node.location = 3;\r\n      } else if([ \r\n        'cytosol',\r\n        'host cell cytosol',\r\n      ].some(l => cellularLocation?.includes(l))) {\r\n        node.location = 0;\r\n      } else if([ \r\n        'golgi',\r\n      ].some(l => cellularLocation?.includes(l))) {\r\n        node.location = -3;\r\n      } else if([ \r\n        'endoplasmic reticulum',\r\n      ].some(l => cellularLocation?.includes(l))) {\r\n        node.location = -4;\r\n      } else if([ \r\n        'nuclear envelope',\r\n        'nucleoplasm',\r\n        'nucleus',\r\n        'nucleolus',\r\n        'nuclear',\r\n        'chromosome',\r\n        'chromosome, centromeric region',\r\n      ].some(l => cellularLocation?.includes(l))) {\r\n        node.location = -5;\r\n      }\r\n    }\r\n    nodes.push(node);\r\n  };\r\n\r\n  const addEdge = (data : GraphEdge) => {\r\n    const edge = {\r\n      ...data,\r\n    }\r\n    let sourceEdges = edgeMap.get(data.source);\r\n    if(!sourceEdges) {\r\n      sourceEdges = [];\r\n      edgeMap.set(data.source, sourceEdges);\r\n    }\r\n    sourceEdges.push(edge);\r\n    let targetEdges = edgeMap.get(data.target);\r\n    if(!targetEdges) {\r\n      targetEdges = [];\r\n      edgeMap.set(data.target, targetEdges);\r\n    }\r\n    targetEdges.push(edge);\r\n    \r\n    edges.push(edge);\r\n  }\r\n\r\n  nodeData.forEach(n => addNode(n));\r\n  edgeData.forEach(e => addEdge({\r\n    ...e,\r\n    sourcePos: [ 0, 0 ],\r\n    targetPos: [ 0, 0 ],\r\n  }));\r\n\r\n  for(let i = 0; i < nodes.length; i++) {\r\n    const node = nodes[i];\r\n    if(node.type === 'reaction' \r\n      || node.type === 'control'\r\n      || node.type === 'template_reaction'\r\n    ) {\r\n      const adjacentEdges = edgeMap.get(node.__id);\r\n      if(adjacentEdges && adjacentEdges.length > 0) {\r\n        let meanLocation = adjacentEdges.map(e => \r\n          nodes[e.source === node.__id ? e.target : e.source].location\r\n        ).reduce((a, b) => a + b, 0) / adjacentEdges.length;\r\n        node.location = meanLocation;\r\n      }\r\n    }\r\n  }\r\n\r\n  const simulation = forceSimulation(nodes);\r\n  \r\n  let flatEdges = JSON.parse(JSON.stringify(\r\n    Array.from(edgeMap).map(entry => entry[1])\r\n  )) as GraphEdge[][];\r\n  simulation\r\n    .force('charge', forceManyBody().strength(-30))\r\n    .force('link', forceLink(\r\n      flatEdges.reduce((a, b) => [...a, ...b], [])\r\n    ).distance(l => \r\n      Math.max(\r\n        Math.abs(\r\n          ((l as any).target as GraphNode).location - ((l as any).source as GraphNode).location\r\n        ) * locationDistance,\r\n        10\r\n      )\r\n    ))\r\n    // .force('center', forceCenter());\r\n    .force('center', structuringForce(0, 0, \r\n      (d) => {\r\n        return undefined;\r\n      }, \r\n      (d) => {\r\n        return d.location != null ? d.location * locationDistance : undefined;\r\n      })\r\n    );\r\n  simulation.stop();\r\n\r\n  const simNodes = simulation.nodes();\r\n  let cachedPositions : any[] = []; //JSON.parse(window.localStorage.getItem('graph/cachedPositions') || '[]');\r\n  // console.log('cachedPositions', cachedPositions)\r\n  if(cachedPositions.length === simNodes.length) {\r\n    // console.log('loading from cache')\r\n    simulation.nodes().forEach((n, i) => {\r\n      n.x = cachedPositions[i].x;\r\n      n.y = cachedPositions[i].y;\r\n    })\r\n  } else {\r\n    simulation.tick(50);\r\n    cachedPositions = simNodes.map(n => { return { x: n.x, y: n.y }; })\r\n    // window.localStorage.setItem('graph/cachedPositions', JSON.stringify(cachedPositions));\r\n  }\r\n\r\n  simulation.nodes().forEach((n, i) => {\r\n    nodes[i].x = n.x;\r\n    nodes[i].y = n.y;\r\n    nodes[i].minX = n.x;\r\n    nodes[i].maxX = n.x;\r\n    nodes[i].minY = n.y;\r\n    nodes[i].maxY = n.y;\r\n  });\r\n\r\n  edges.forEach(e => {\r\n    e.sourcePos = [ nodes[e.source].x, nodes[e.source].y ];\r\n    e.targetPos = [ nodes[e.target].x, nodes[e.target].y ];\r\n  });\r\n\r\n  return {\r\n    nodes,\r\n    edges,\r\n    edgeMap,\r\n  }\r\n}\r\n\r\nexport const dehydrateGraph = (graph : PathwayGraph) : DehydratedPathwayGraph => {\r\n  const dehydrated : DehydratedPathwayGraph = {\r\n    nodes: JSON.parse(JSON.stringify(graph.nodes)),\r\n    edges: [],\r\n    dehydrated: true,\r\n  };\r\n  dehydrated.nodes.forEach(n => {\r\n    n.x = Math.round(n.x);\r\n    n.y = Math.round(n.y);\r\n    n.location = Math.round(n.location * 100) / 100;\r\n    n.vx = undefined;\r\n    n.vy = undefined;\r\n    n.minX = undefined\r\n    n.maxX = undefined;\r\n    n.minY = undefined;\r\n    n.maxY = undefined;\r\n    (n as any).index = undefined;\r\n  })\r\n  graph.edges.forEach(edge => {\r\n    dehydrated.edges.push([ edge.source, edge.target, edge.relation ]);\r\n  })\r\n  return dehydrated;\r\n}\r\n\r\nexport const rehydrateGraph = (dehydrated : DehydratedPathwayGraph) : PathwayGraph => {\r\n  const graph : PathwayGraph = {\r\n    nodes: JSON.parse(JSON.stringify(dehydrated.nodes)),\r\n    edges: [],\r\n    edgeMap: new Map<number, GraphEdge[]>(),\r\n  }\r\n  graph.nodes.forEach(n => {\r\n    n.vx = 0;\r\n    n.vy = 0;\r\n    n.minX = n.x\r\n    n.maxX = n.x;\r\n    n.minY = n.y;\r\n    n.maxY = n.y;\r\n  })\r\n  dehydrated.edges.forEach(data => {\r\n    const edge : GraphEdge = {\r\n      source: data[0],\r\n      target: data[1],\r\n      relation: data[2],\r\n      sourcePos: [0, 0],\r\n      targetPos: [0, 0],\r\n    };\r\n    edge.sourcePos = [ graph.nodes[edge.source].x, graph.nodes[edge.source].y ];\r\n    edge.targetPos = [ graph.nodes[edge.target].x, graph.nodes[edge.target].y ];\r\n\r\n    let sourceEdges = graph.edgeMap.get(edge.source);\r\n    if(!sourceEdges) {\r\n      sourceEdges = [];\r\n      graph.edgeMap.set(edge.source, sourceEdges);\r\n    }\r\n    sourceEdges.push(edge);\r\n    let targetEdges = graph.edgeMap.get(edge.target);\r\n    if(!targetEdges) {\r\n      targetEdges = [];\r\n      graph.edgeMap.set(edge.target, targetEdges);\r\n    }\r\n    targetEdges.push(edge);\r\n  })\r\n  return graph;\r\n}\r\n\r\n/*\r\n * Centers the graph and aligns nodes by their intended localities\r\n */\r\nconst structuringForce = (\r\n  cx : number, \r\n  cy : number, \r\n  x : ((node : GraphNode, i? : number, nodes? : GraphNode[]) => number | undefined), \r\n  y : ((node : GraphNode, i? : number, nodes? : GraphNode[]) => number | undefined),\r\n) => {\r\n  let constant = (_ : number) => {return () => (_)}\r\n  // var strength = constant(2.0),\r\n  var strength : ((d : GraphNode) => number) = (d : GraphNode) => d.location === 0 ? 0.2 : 5.0,\r\n      nodes : GraphNode[],\r\n      strengths : number[],\r\n      xz : (number | undefined)[],\r\n      yz : (number | undefined)[];\r\n\r\n  // if (x == null) x = 0;\r\n  // if (y == null) y = 0;\r\n\r\n  function force(alpha : number) {\r\n    var i,\r\n        n = nodes.length,\r\n        node : GraphNode,\r\n        sx = 0,\r\n        sy = 0;\r\n\r\n    for (i = 0; i < n; ++i) {\r\n      node = nodes[i];\r\n      sx += node.x;\r\n      sy += node.y;\r\n    }\r\n    for (sx = sx / n - cx, sy = sy / n - cy, i = 0; i < n; ++i) {\r\n      node = nodes[i]\r\n      //node.x -= sx, node.y -= sy;\r\n      // node.vx += (-sx) * strengths[i] * alpha\r\n      // node.vy += (-sy) * strengths[i] * alpha\r\n    }\r\n    for (let i = 0, n = nodes.length; i < n; ++i) {\r\n      node = nodes[i]\r\n      if(xz[i] != null && node.vx)\r\n        node.vx += ((xz[i] as number) - node.x) * strengths[i] * alpha;\r\n      if(yz[i] != null && node.vy)\r\n        node.vy += ((yz[i] as number) - node.y) * strengths[i] * alpha;\r\n    }\r\n  }\r\n\r\n  function initialize() {\r\n    if (!nodes) return;\r\n    var i, n = nodes.length;\r\n    strengths = new Array(n);\r\n    xz = new Array(n);\r\n    yz = new Array(n);\r\n    for (i = 0; i < n; ++i) {\r\n      xz[i] = x(nodes[i], i, nodes);\r\n      yz[i] = y(nodes[i], i, nodes);\r\n      // strengths[i] = +strength(nodes[i], i, nodes)\r\n      strengths[i] = +strength(nodes[i]);\r\n    }\r\n  }\r\n\r\n  force.initialize = function(_ : GraphNode[]) {\r\n    nodes = _\r\n    initialize()\r\n  }\r\n\r\n  force.strength = function(_ : ((d : GraphNode) => number)) {\r\n    return arguments.length ? (strength = (typeof _ === \"function\") ? _ : constant(+_), initialize(), force) : strength\r\n  }\r\n\r\n  force.x = function(_ : number) {\r\n    return arguments.length ? (x = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : x\r\n  }\r\n\r\n  force.y = function(_ : number) {\r\n    return arguments.length ? (y = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : y\r\n  }\r\n\r\n  return force;\r\n}\r\n","// import crossfilter from 'crossfilter2';\r\nimport { \r\n  PathwaysState, \r\n  PathwaysActionTypes, \r\n  UpdatePathwaysAction,\r\n  // UpdatePathwaysFilterAction,  \r\n  UPDATE_PATHWAYS,\r\n  UPDATE_FILTER,\r\n  GraphEdge,\r\n  // FilterValueType,\r\n  DehydratedPathwayGraph,\r\n  GeneAnnotation,\r\n  UPDATE_GENE_ANNOTATIONS,\r\n  UpdateGeneAnnotationsAction,\r\n} from './types'\r\nimport { PathwayGraphData } from '../../core/types'\r\nimport { constructGraph, rehydrateGraph } from './graphHelpers';\r\n\r\nconst initialState : PathwaysState = {\r\n  raw: { nodes: [], edges: [] },\r\n  graph: { nodes: [], edges: [], edgeMap: new Map<number, GraphEdge[]>() },\r\n  geneAnnotations: { genes: new Map<string, GeneAnnotation>() },\r\n  // filterValues: new Map<string, FilterValueType>(),\r\n  // filtered: [],\r\n}\r\n\r\nconst parsePathways = (state : PathwaysState) : PathwaysState => {\r\n  state.graph = constructGraph(\r\n    state.raw.nodes.map(n => n),\r\n    state.raw.edges.map(e => { return { source: e[0], target: e[1], relation: e[2] } })\r\n  );\r\n\r\n  return state;\r\n}\r\n\r\nexport const pathwaysReducer = (\r\n  state = initialState, \r\n  action : PathwaysActionTypes\r\n) : PathwaysState => {\r\n  switch(action.type) {\r\n    case UPDATE_PATHWAYS:\r\n      const updatePathways = action as UpdatePathwaysAction;\r\n      if((updatePathways.pathways as DehydratedPathwayGraph).dehydrated) {\r\n        state.graph = rehydrateGraph(updatePathways.pathways as DehydratedPathwayGraph);\r\n      } else {\r\n        state.raw = updatePathways.pathways as PathwayGraphData;\r\n        state = parsePathways(state);\r\n      }\r\n      return {...state};\r\n    case UPDATE_GENE_ANNOTATIONS:\r\n      const updateGeneAnnotations = action as UpdateGeneAnnotationsAction;\r\n      state.geneAnnotations = { genes: new Map<string, GeneAnnotation>() };\r\n      updateGeneAnnotations.geneAnnotations.forEach(ga =>\r\n        state.geneAnnotations.genes.set(ga.name, ga));\r\n      return {...state};\r\n    case UPDATE_FILTER:\r\n      //\r\n      return {...state};\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from 'react';\r\nimport { \r\n  TooltipState,\r\n  UpdateTooltipAction, \r\n  UPDATE_TOOLTIP, \r\n  HIDE_TOOLTIP,\r\n  TooltipActionTypes,\r\n} from './types'\r\n\r\nconst initialState : TooltipState = {\r\n  active: false,\r\n  x: 0,\r\n  y: 0,\r\n  content: <></>,\r\n}\r\n\r\nexport const tooltipReducer = (\r\n  state = initialState, \r\n  action : TooltipActionTypes\r\n) : TooltipState => {\r\n  switch(action.type) {\r\n    case UPDATE_TOOLTIP:\r\n      state.x = (action as UpdateTooltipAction).x;\r\n      state.y = (action as UpdateTooltipAction).y;\r\n      state.content = (action as UpdateTooltipAction).content;\r\n      state.active = true;\r\n      return {...state};\r\n    case HIDE_TOOLTIP:\r\n      state.active = false;\r\n      return {...state};\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { \r\n  UpdateSelectionAction,\r\n  UPDATE_SELECTION,\r\n  SelectionActionTypes,\r\n  SelectionState,\r\n  UPDATE_TARGET,\r\n  UpdateTargetAction,\r\n  SelectionTarget,\r\n} from './types'\r\n\r\nconst initialState : SelectionState = {\r\n  targets: new Map<string, SelectionTarget>(),\r\n  selectedNodes: [],\r\n  selectedEdges: [],\r\n}\r\n\r\nexport const selectionReducer = (\r\n  state = initialState, \r\n  action : SelectionActionTypes\r\n) : SelectionState => {\r\n  switch(action.type) {\r\n    case UPDATE_TARGET:\r\n      const updateTarget = (action as UpdateTargetAction);\r\n      state.targets.set(updateTarget.id, {\r\n        points: updateTarget.points,\r\n        ctx: updateTarget.ctx,\r\n        tooltipConstructor: updateTarget.tooltipConstructor,\r\n      });\r\n      state.targets = new Map(state.targets);\r\n      return {...state};\r\n    case UPDATE_SELECTION:\r\n      state.selectedNodes = (action as UpdateSelectionAction).selectedNodes;\r\n      state.selectedEdges = (action as UpdateSelectionAction).selectedEdges;\r\n      return {...state};\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers, createStore } from 'redux';\r\n\r\nimport { expressionDatasetReducer } from './expression-dataset/reducers'\r\nimport { datasetsReducer } from './datasets/reducers'\r\nimport { pathwaysReducer } from './pathways/reducers'\r\nimport { tooltipReducer } from './tooltip/reducers'\r\nimport { selectionReducer } from './selection/reducers'\r\nimport { TooltipState } from './tooltip/types';\r\nimport { ExpressionDatasetState } from './expression-dataset/types';\r\nimport { PathwaysState } from './pathways/types';\r\nimport { SelectionState } from './selection/types';\r\nimport { DatasetsState } from './datasets/types';\r\n\r\nexport interface CombinedState {\r\n    expressionDataset : ExpressionDatasetState;\r\n    datasets : DatasetsState;\r\n    pathways : PathwaysState;\r\n    tooltip : TooltipState;\r\n    selection : SelectionState;\r\n};\r\n\r\nexport const allReducers = combineReducers({\r\n    expressionDataset: expressionDatasetReducer,\r\n    datasets: datasetsReducer,\r\n    pathways: pathwaysReducer,\r\n    tooltip: tooltipReducer,\r\n    selection: selectionReducer,\r\n});\r\n\r\nexport const store = createStore(\r\n    allReducers\r\n);\r\n","// import crossfilter from 'crossfilter2';\r\nimport { Point, PathwayNode, PathwayEdge, PathwayGraphData } from '../../core/types'\r\n\r\nexport type FilterValueType = string | number | boolean | undefined;\r\n\r\nexport interface PathwaysState {\r\n  raw : PathwayGraphData;\r\n  graph : PathwayGraph;\r\n  geneAnnotations : GeneAnnotations;\r\n  // filterValues : Map<string, FilterValueType>;\r\n  // crossfilter? : crossfilter.Crossfilter<ExpressionDataRow>;\r\n  // filterDimensions? : Map<string, crossfilter.Dimension<ExpressionDataRow, string>>;\r\n  // filtered : ExpressionDataRow[];\r\n};\r\n\r\nexport const UPDATE_PATHWAYS = 'UPDATE_PATHWAYS';\r\nexport const UPDATE_GENE_ANNOTATIONS = 'UPDATE_GENE_ANNOTATIONS';\r\nexport const UPDATE_FILTER = 'UPDATE_FILTER';\r\n\r\nexport interface UpdatePathwaysAction {\r\n  type : string;\r\n  pathways : PathwayGraphData | DehydratedPathwayGraph;\r\n};\r\nexport interface UpdateGeneAnnotationsAction {\r\n  type : string;\r\n  geneAnnotations : GeneAnnotation[];\r\n};\r\nexport interface UpdatePathwaysFilterAction {\r\n  type : string;\r\n  name : string;\r\n  value : FilterValueType;\r\n};\r\n\r\nexport type PathwaysActionTypes = \r\n  UpdatePathwaysAction \r\n  | UpdateGeneAnnotationsAction\r\n  | UpdatePathwaysFilterAction;\r\n\r\n\r\nexport interface GraphNode extends PathwayNode, Point {\r\n  location : number;\r\n  vx? : number;\r\n  vy? : number;\r\n  minX? : number;\r\n  maxX? : number;\r\n  minY? : number;\r\n  maxY? : number;\r\n}\r\n\r\nexport interface GraphEdge extends PathwayEdge {\r\n  sourcePos : [number, number];\r\n  targetPos : [number, number];\r\n}\r\n\r\nexport interface PathwayGraph {\r\n  nodes : GraphNode[];\r\n  edges : GraphEdge[];\r\n  edgeMap : Map<number, GraphEdge[]>;\r\n}\r\n\r\nexport interface PathwayGraph {\r\n  nodes : GraphNode[];\r\n  edges : GraphEdge[];\r\n  edgeMap : Map<number, GraphEdge[]>;\r\n}\r\n\r\nexport interface DehydratedPathwayGraph {\r\n  nodes : GraphNode[];\r\n  edges : [ number, number, string ][];\r\n  dehydrated : boolean;\r\n}\r\n\r\nexport interface GeneAnnotation {\r\n  name : string;\r\n  uniprot_id : string;\r\n  go_terms : string[];\r\n}\r\n\r\nexport interface GeneAnnotations {\r\n  genes : Map<string, GeneAnnotation>;\r\n}\r\n","import { ReactNode } from 'react';\r\n\r\nexport interface TooltipState {\r\n  active : boolean;\r\n  x : number;\r\n  y : number;\r\n  content : ReactNode;\r\n};\r\n\r\nexport const UPDATE_TOOLTIP = 'UPDATE_TOOLTIP';\r\nexport const HIDE_TOOLTIP = 'HIDE_TOOLTIP';\r\n\r\nexport interface UpdateTooltipAction {\r\n  type : string;\r\n  x : number;\r\n  y : number;\r\n  content : ReactNode;\r\n};\r\nexport interface HideTooltipAction {\r\n  type : string;\r\n};\r\n\r\nexport type TooltipActionTypes = \r\n  UpdateTooltipAction \r\n  | HideTooltipAction;\r\n","import { GraphEdge, GraphNode } from '../pathways/types';\r\nimport { Point } from '../../core/types';\r\nimport { SharedCanvasContext } from 'react-three-fiber';\r\n\r\nexport interface SelectionTarget {\r\n  points : Point[];\r\n  ctx : SharedCanvasContext;\r\n  tooltipConstructor : (id : number) => JSX.Element;\r\n};\r\n\r\nexport interface SelectionState {\r\n  targets : Map<string, SelectionTarget>;\r\n  selectedNodes : GraphNode[];\r\n  selectedEdges : GraphEdge[];\r\n};\r\n\r\nexport const UPDATE_TARGET = 'UPDATE_TARGET';\r\nexport const UPDATE_SELECTION = 'UPDATE_SELECTION';\r\n\r\nexport interface UpdateTargetAction {\r\n  type : string;\r\n  id : string;\r\n  points : Point[];\r\n  ctx : SharedCanvasContext;\r\n  tooltipConstructor : (id : number) => JSX.Element;\r\n};\r\n\r\nexport interface UpdateSelectionAction {\r\n  type : string;\r\n  selectedNodes : GraphNode[];\r\n  selectedEdges : GraphEdge[];\r\n};\r\n\r\nexport type SelectionActionTypes = \r\n  UpdateTargetAction\r\n  | UpdateSelectionAction;\r\n","import * as THREE from 'three'\r\n\r\nexport class GraphEdgeShader extends THREE.ShaderMaterial {\r\n  constructor() {\r\n    super({\r\n      vertexShader: `\r\n        // attribute vec2 uv;\r\n        varying vec2 texcoord;\r\n        attribute vec4 color;\r\n        varying vec4 vColor;\r\n\r\n        void main() {\r\n            vec4 mvPosition = modelViewMatrix * vec4( position.xyz, 1.0 );\r\n            gl_Position = projectionMatrix * mvPosition;\r\n            texcoord = uv;\r\n            vColor = color;\r\n        }\r\n      `,\r\n      fragmentShader: `\r\n        varying vec2 texcoord;\r\n        varying vec4 vColor;\r\n        void main() {\r\n          gl_FragColor = vColor;\r\n          gl_FragColor.w *= (1.0 - pow(texcoord.x, 4.0));\r\n          // gl_FragColor.w *= 0.2;\r\n        }\r\n      `,\r\n      blendSrc: THREE.SrcAlphaFactor,\r\n      blendDst: THREE.OneMinusSrcAlphaFactor,\r\n      blending: THREE.CustomBlending,\r\n      // blendEquation: THREE.AddEquation,\r\n      // blending: THREE.AdditiveBlending,\r\n      // blending: THREE.NormalBlending,\r\n      // depthTest: false,\r\n      transparent: true,\r\n      // vertexColors: true,\r\n    });\r\n\r\n    this.uniforms = {\r\n      map: { value: null },  // Required by three.js for uv parameter setup\r\n      // pointTexture: { value: options.pointTexture },\r\n    }\r\n  }\r\n}\r\n","import React, { useMemo } from 'react';\r\n\r\nimport { GraphEdgeShader } from '../shaders/GraphEdgeShader';\r\nimport { BufferAttribute } from 'three';\r\nimport { GraphEdge } from '../store/pathways/types';\r\n\r\nexport interface GraphEdgesProps {\r\n  edges : GraphEdge[];\r\n  color : number[];\r\n}\r\n\r\nfunction GraphEdges({ edges, color } : GraphEdgesProps) {\r\n  const [ posBuf, uvBuf, colorBuf ] = useMemo(\r\n    () => {\r\n      // console.log('edges.length', edges.length);\r\n      \r\n      const positions : number[] = [];\r\n      const uvs : number[] = [];\r\n      const colors : number[] = [];\r\n\r\n      const addEdge = (edge : GraphEdge) => {\r\n        positions.push(\r\n          edge.sourcePos[0],\r\n          edge.sourcePos[1],\r\n          0,\r\n          edge.targetPos[0],\r\n          edge.targetPos[1],\r\n          0,\r\n        );\r\n        uvs.push(0.0, 0.0, 1.0, 1.0);\r\n        colors.push(...color);\r\n        colors.push(...color);\r\n      }\r\n\r\n      edges.forEach(e => addEdge(e));\r\n\r\n      return [ \r\n        new BufferAttribute(new Float32Array(positions), 3),\r\n        new BufferAttribute(new Float32Array(uvs), 2),\r\n        new BufferAttribute(new Float32Array(colors), 4),\r\n      ];\r\n    },\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [edges]\r\n  );\r\n\r\n  const [ graphEdgeShader ] = useMemo(() => {\r\n    const graphEdgeShader = new GraphEdgeShader();\r\n    return [ graphEdgeShader ];\r\n  }, []);\r\n\r\n  return (\r\n    <lineSegments\r\n      frustumCulled={false}\r\n      material={graphEdgeShader}>\r\n      <bufferGeometry attach=\"geometry\"\r\n        attributes={{\r\n          position: posBuf,\r\n          uv: uvBuf,\r\n          color: colorBuf,\r\n        }}\r\n      />\r\n      {/* <lineBasicMaterial attach=\"material\" color={new THREE.Color(0,0,0)}/> */}\r\n    </lineSegments>\r\n  );\r\n}\r\nexport default GraphEdges;\r\n","import React from 'react';\r\n\r\nimport { store } from '../store';\r\nimport { SelectionState, SelectionTarget } from '../store/selection/types';\r\nimport { Unsubscribe } from 'redux';\r\n\r\ninterface State {\r\n  selection : SelectionState;\r\n};\r\n\r\nexport const observeSelection = <P extends object>(\r\n  Wrapped : React.ComponentType<P>,\r\n  stateSelector : (state : SelectionState, props : P) => P,\r\n) => {\r\n  class Wrapper extends React.Component<P, State> {\r\n    private subscription : Unsubscribe = () => {};\r\n    private _mounted : boolean = false;\r\n\r\n    constructor(props : P) {\r\n      super(props);\r\n\r\n      this.state = {\r\n        selection: {\r\n          targets: new Map<string, SelectionTarget>(),\r\n          selectedNodes: [], \r\n          selectedEdges: [],\r\n        },\r\n      };\r\n    }\r\n    handleStoreUpdate() {\r\n      if(!this._mounted)\r\n        return\r\n      this.setState({\r\n        selection: {...store.getState().selection},\r\n      })\r\n    }\r\n    componentDidMount() {\r\n      this._mounted = true;\r\n      this.subscription = store.subscribe(this.handleStoreUpdate.bind(this));\r\n      this.handleStoreUpdate();\r\n    }\r\n    componentWillUnmount() {\r\n      this._mounted = false;\r\n      // Unsubscribe from the store\r\n      this.subscription();\r\n    }\r\n    render() {\r\n      const props = stateSelector(this.state.selection, this.props);\r\n      return <Wrapped {...props} />;\r\n    }\r\n  };\r\n  return Wrapper\r\n}\r\n\r\nexport default observeSelection;\r\n","import * as THREE from 'three'\r\n\r\ninterface Props extends THREE.ShaderMaterialParameters {\r\n  pointTexture : THREE.Texture;\r\n}\r\n\r\nexport class PointShader extends THREE.ShaderMaterial {\r\n  constructor(options : Props) {\r\n    super({\r\n      vertexShader: `\r\n        attribute float size;\r\n        attribute vec4 color;\r\n        varying vec4 vColor;\r\n\r\n        void main() {\r\n            vec4 mvPosition = modelViewMatrix * vec4( position.xyz, 1.0 );\r\n            float projectionSize = abs((projectionMatrix[0][0] + projectionMatrix[1][1]) / 2.0 * 300.0);\r\n            gl_PointSize = 1.0 * size * pow(projectionSize, 0.3);\r\n            // gl_PointSize = 1.0 * size;\r\n            gl_Position = projectionMatrix * mvPosition;\r\n            vColor = color;\r\n            // if(size == 0.0)\r\n            //   color.w = 0.0;\r\n        }\r\n      `,\r\n      fragmentShader: `\r\n        uniform sampler2D pointTexture;\r\n        varying vec4 vColor;\r\n        void main() {\r\n          gl_FragColor = vColor * texture2D(pointTexture, gl_PointCoord);\r\n          // gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\r\n          // gl_FragColor.w *= 0.4;\r\n        }\r\n      `,\r\n      // blendSrc: THREE.SrcAlphaFactor,\r\n      // blendDst: THREE.OneMinusSrcAlphaFactor,\r\n      // blending: THREE.CustomBlending,\r\n      // blendEquation: THREE.AddEquation,\r\n      // blending: THREE.AdditiveBlending,\r\n      // blending: THREE.NoBlending,\r\n      blending: THREE.NormalBlending,\r\n      // depthTest: false,\r\n      transparent: true,\r\n      // vertexColors: true,\r\n    });\r\n\r\n    this.uniforms = {\r\n      pointTexture: { value: options.pointTexture },\r\n    }\r\n  }\r\n}\r\n","import React, { useMemo } from 'react';\r\nimport * as THREE from 'three';\r\n\r\nimport { PointShader } from '../shaders/PointShader';\r\nimport { BufferAttribute } from 'three';\r\nimport { Point } from '../core/types';\r\n\r\nexport interface GraphNodesProps {\r\n  nodes : Point[];\r\n  sizes : number[];\r\n  colors : number[];\r\n}\r\n\r\nfunction GraphNodes({ nodes, sizes, colors } : GraphNodesProps) {\r\n  const [ posBuf ] = useMemo(\r\n    () => {\r\n      // console.log('nodes.length', nodes.length);\r\n\r\n      const positions : number[] = [];\r\n      const addNode = (node : Point) => {\r\n        positions.push(\r\n          node.x,\r\n          node.y,\r\n          node.z || 0,\r\n        );\r\n      };\r\n\r\n      nodes.forEach(n => addNode(n));\r\n\r\n      return [ \r\n        new BufferAttribute(new Float32Array(positions), 3),\r\n      ];\r\n    },\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [nodes]\r\n  );\r\n\r\n  const [ sizeBuf, colorBuf ] = useMemo(\r\n    () => {\r\n      return [ \r\n        new BufferAttribute(new Float32Array(sizes), 1),\r\n        new BufferAttribute(new Float32Array(colors), 4),\r\n      ];\r\n    },\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [sizes, colors]\r\n  );\r\n\r\n  const [ pointShader ] = useMemo(() => {\r\n    const loader = new THREE.TextureLoader();\r\n    const pointShader = new PointShader({\r\n      pointTexture: loader.load('./textures/circle.png'),\r\n    });\r\n    return [ pointShader ];\r\n  }, []);\r\n\r\n  if(nodes.length < 1) {\r\n    return (\r\n      <>\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <points\r\n      frustumCulled={false}\r\n      material={pointShader}>\r\n      <bufferGeometry attach=\"geometry\"\r\n        attributes={{\r\n          position: posBuf,\r\n          size: sizeBuf,\r\n          color: colorBuf,\r\n        }}\r\n      />\r\n      {/* <lineBasicMaterial attach=\"material\" color={new THREE.Color(0,0,0)}/> */}\r\n    </points>\r\n  );\r\n};\r\n\r\nexport default GraphNodes;\r\n","import { \r\n  UpdateTargetAction,\r\n  UpdateSelectionAction,\r\n  UPDATE_SELECTION,\r\n  UPDATE_TARGET\r\n} from './types'\r\nimport { GraphEdge, GraphNode } from '../pathways/types';\r\nimport { Point } from '../../core/types';\r\nimport { SharedCanvasContext } from 'react-three-fiber';\r\n\r\nexport const updateTarget = (\r\n  id : string,\r\n  points : Point[],\r\n  ctx : SharedCanvasContext,\r\n  tooltipConstructor : (id : number) => JSX.Element,\r\n) : UpdateTargetAction => {\r\n  return {\r\n    type: UPDATE_TARGET,\r\n    id,\r\n    points,\r\n    ctx,\r\n    tooltipConstructor,\r\n  }\r\n};\r\n\r\nexport const updateSelection = (\r\n  selectedNodes : GraphNode[], \r\n  selectedEdges : GraphEdge[]\r\n) : UpdateSelectionAction => {\r\n  return {\r\n    type: UPDATE_SELECTION,\r\n    selectedNodes,\r\n    selectedEdges,\r\n  }\r\n};\r\n","import React, { useMemo, useState, useEffect } from 'react';\r\n\r\nimport { store } from '../store';\r\nimport { GraphNode, GraphEdge, GeneAnnotation } from '../store/pathways/types';\r\nimport GraphEdges, { GraphEdgesProps } from './GraphEdges';\r\nimport { observeSelection } from './ObservesSelection';\r\nimport { SelectionState } from '../store/selection/types';\r\nimport GraphNodes, { GraphNodesProps } from './GraphNodes';\r\nimport { updateSelection, updateTarget } from '../store/selection/actions';\r\nimport { useThree } from 'react-three-fiber';\r\n\r\ninterface Props {\r\n  nodes : GraphNode[];\r\n  edges : GraphEdge[];\r\n}\r\n\r\nconst Graph = ({ nodes, edges } : Props) => {\r\n  const ctx = useThree();\r\n  \r\n  const neutralColor = [0, 0, 0, 0.1];\r\n  const warmColor = [251.0 / 255, 101.0 / 255, 66.0 / 255, 0.4];\r\n  const coldColor = [55.0 / 255, 94.0 / 255, 151.0 / 255, 0.4];\r\n\r\n  const [ filteredGeneExpression, setFilteredGeneExpression ] = useState(\r\n    store.getState().expressionDataset.filteredGeneExpression\r\n  );\r\n  const handleStoreUpdate = () => {\r\n    setFilteredGeneExpression(store.getState().expressionDataset.filteredGeneExpression);\r\n  };\r\n  useEffect(() => {\r\n    const subscription = store.subscribe(() => {\r\n      handleStoreUpdate();\r\n    });\r\n    handleStoreUpdate();\r\n    return subscription;\r\n  }, []);\r\n\r\n  function getNodeColorsAndSizes(nodes : GraphNode[], emphasized : boolean = false) {\r\n    const colors : number[] = [];\r\n    const sizes : number[] = [];\r\n    const filteredNodes : GraphNode[] = [];\r\n    const refExpressionRows = new Map<number, number>();\r\n\r\n    for(let i = 0; i < nodes.length; i++) {\r\n      const node = nodes[i];\r\n      let shouldInclude = false;\r\n      let refExpressionRow = -1;\r\n      let color = neutralColor;\r\n      let size = 10.0;\r\n      if(node.type === 'molecule') {\r\n        const geneName = node.entityReference?.gene?.name;\r\n        // console.log('geneName', geneName);\r\n        if(geneName) {\r\n          const expressionData = filteredGeneExpression.get(geneName);\r\n          if(expressionData != null) {\r\n            shouldInclude = true;\r\n            refExpressionRow = expressionData.__id || -1;\r\n            let foldChange = expressionData.fold_change_log2 || 0;\r\n            size = Math.sqrt(Math.abs(foldChange)) * 2.0 * 13.0;\r\n            if(foldChange > 0)\r\n              color = warmColor;\r\n            else\r\n              color = coldColor;\r\n          }\r\n        }\r\n      }\r\n      if(emphasized) {\r\n        color = color.slice();\r\n        color[3] = 5.0;\r\n      }\r\n      if(shouldInclude)\r\n        filteredNodes.push(nodes[i] as GraphNode);\r\n      refExpressionRows.set(node.__id, refExpressionRow);\r\n      colors.push(...color);\r\n      sizes.push(size);\r\n    }\r\n\r\n    return {\r\n      colors,\r\n      sizes,\r\n      filteredNodes,\r\n      refExpressionRows,\r\n    };\r\n  }\r\n\r\n  const { colors, sizes, filteredNodes, refExpressionRows } = useMemo(\r\n    () => {\r\n      return getNodeColorsAndSizes(nodes);\r\n    },\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [nodes, filteredGeneExpression]\r\n  );\r\n\r\n  const renderTruncatedList = <T extends any>(\r\n    list : T[] | undefined, \r\n    itemCallback : (item : T, i : number) => JSX.Element,\r\n    limit : number,\r\n    trunctationNoticeWrapper? : (truncationNotice : JSX.Element, i : number) => JSX.Element,\r\n  ) => {\r\n    let i = 0;\r\n    const res = [];\r\n    if(list == null) {\r\n      res.push(<div key={0}>—</div>);\r\n      return res\r\n    }\r\n    while(i < list.length && i < limit) {\r\n      res.push(itemCallback(list[i], i));\r\n      i++;\r\n    }\r\n    if(i < list.length) {\r\n      let truncationNotice = (\r\n        <div className=\"list-truncation-notice\" key={i+1}>\r\n          {list.length - i} more..\r\n        </div>\r\n      );\r\n      if(trunctationNoticeWrapper)\r\n        truncationNotice = trunctationNoticeWrapper(truncationNotice, i+1);\r\n      res.push(truncationNotice);\r\n    }\r\n    return res;\r\n  };\r\n\r\n  useEffect(() => {\r\n    store.dispatch(updateTarget(\r\n      'primary', \r\n      // cellEmbeddings.raw.filter((p, i) => cellMetadata ? (cellMetadata.raw as CellMetadata[])[i].age === '3m' : true), \r\n      filteredNodes,\r\n      ctx,\r\n      (id) => {\r\n        const graph = store.getState().pathways.graph;\r\n        const node = graph.nodes[id];\r\n        const refExpressionRow = refExpressionRows.get(node.__id);\r\n        const row = (refExpressionRow && refExpressionRow >= 0) ? store.getState().expressionDataset.raw[refExpressionRow] : undefined;\r\n\r\n        // Get depth-2 adjacent nodes\r\n        const firstNeighbours = Array.from(new Set(\r\n          (graph.edgeMap.get(node.__id) || [])\r\n            .map(e => {\r\n              return {\r\n                node: graph.nodes[e.source === node.__id ? e.target : e.source],\r\n                relation: e.relation,\r\n              };\r\n            })\r\n          ));\r\n        const selectedEdges = firstNeighbours\r\n          .map(firstNeighbour => graph.edgeMap.get(firstNeighbour.node.__id) || [])\r\n          .reduce((a, b) => [ ...a, ...b ], []);\r\n        const selectedNodes : { [key : number] : GraphNode } = {};\r\n        selectedEdges.forEach(e => {\r\n          selectedNodes[e.source] = graph.nodes[e.source];\r\n          selectedNodes[e.target] = graph.nodes[e.target];\r\n        });\r\n        store.dispatch(updateSelection(Object.values(selectedNodes), selectedEdges));\r\n\r\n        const geneName = node.entityReference?.gene?.name;\r\n        let geneAnnotation : GeneAnnotation | undefined = undefined;\r\n        if(geneName)\r\n          geneAnnotation = store.getState().pathways.geneAnnotations.genes.get(geneName);\r\n        return (\r\n          <>\r\n            <div className=\"prop\">\r\n              <div className=\"name\">Name</div>\r\n              <div className=\"value\">{geneName || node.name}</div>\r\n            </div>\r\n            <div className=\"prop\">\r\n              <div className=\"name\">Location</div>\r\n              <div className=\"value\">{node.cellularLocation}</div>\r\n            </div>\r\n            <div className=\"prop\">\r\n              <div className=\"name\">log<sub>2</sub>(Fold-change)</div>\r\n              <div className=\"value\" style={{ color: (row?.fold_change_log2 || 0) > 0 ? \"#fb6542\" : \"#375e97\" }}>\r\n                {row?.fold_change_log2?.toFixed(2)}\r\n              </div>\r\n            </div>\r\n            <div className=\"prop\">\r\n              <div className=\"name\">xref</div>\r\n              <div className=\"value\">{node.entityReference?.xref?.db}:{node.entityReference?.xref?.id}</div>\r\n            </div>\r\n            <div className=\"prop\">\r\n              <div className=\"name\">GO terms</div>\r\n              <div className=\"value\">\r\n                {renderTruncatedList(geneAnnotation?.go_terms, (gt, i) => \r\n                  <div className=\"go-term\" key={i}>{gt}</div>\r\n                , 2)}\r\n              </div>\r\n            </div>\r\n            {renderTruncatedList(firstNeighbours, (neighbour, i) => \r\n              <div className=\"prop\" key={i}>\r\n                <div className=\"name\">\r\n                  <span className=\"accent\">{neighbour.relation}</span> in\r\n                </div>\r\n                <div className=\"value\">{neighbour.node.name}</div>\r\n              </div>\r\n            , 2, (truncationNotice, i) =>\r\n              <div className=\"prop\" key={i}>\r\n                <div className=\"name\"></div>\r\n                <div className=\"value\">{truncationNotice}</div>\r\n              </div>\r\n            )}\r\n          </>\r\n        );\r\n      }\r\n    ));\r\n  }, [filteredNodes]);\r\n\r\n  const SelectionAwareGraphNodes = observeSelection(\r\n    GraphNodes,\r\n    (state : SelectionState, props : GraphNodesProps) => {\r\n      const { colors, sizes } = getNodeColorsAndSizes(state.selectedNodes, true);\r\n      return {\r\n        ...props,\r\n        nodes: state.selectedNodes,\r\n        colors,\r\n        sizes,\r\n      };\r\n    }\r\n  );\r\n\r\n  const SelectionAwareGraphEdges = observeSelection(\r\n    GraphEdges,\r\n    (state : SelectionState, props : GraphEdgesProps) => {\r\n      return {\r\n        ...props,\r\n        edges: state.selectedEdges,\r\n      };\r\n    }\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <GraphEdges edges={edges} color={[0, 0, 0, 0.2]} />\r\n      <SelectionAwareGraphEdges edges={[]} color={[130 / 255, 179 / 255, 54 / 255, 1.0]} />\r\n      <GraphNodes nodes={nodes} sizes={sizes} colors={colors} />\r\n      <SelectionAwareGraphNodes nodes={[]} sizes={[]} colors={[]} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Graph;\r\n","import React from 'react';\r\n\r\nimport './Tooltip.scss';\r\n\r\ntype Props = {\r\n  active : boolean;\r\n  x : number;\r\n  y : number;\r\n  content : JSX.Element;\r\n};\r\n\r\nfunction Tooltip({ active, x, y, content } : Props) {\r\n  return (\r\n    <div className=\"tooltip\" style={{ left: x, top: y, display: active ? 'block' : 'none' }}>\r\n      {content}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tooltip;\r\n","import React, { useEffect, useState, useMemo } from 'react';\r\nimport { connect, ConnectedProps  } from 'react-redux';\r\nimport { useGesture } from 'react-use-gesture'\r\nimport { CanvasContext } from 'react-three-fiber';\r\n\r\nimport { CombinedState } from '../store';\r\nimport Tooltip from \"./Tooltip\";\r\nimport RBush from 'rbush';\r\nimport knn from 'rbush-knn';\r\nimport { GraphNode, GeneAnnotation } from '../store/pathways/types';\r\nimport { updateSelection } from '../store/selection/actions';\r\nimport { Point } from '../core/types';\r\nimport { SelectionTarget } from '../store/selection/types';\r\n\r\nconst mapStateToProps = (\r\n  state : CombinedState\r\n) => {\r\n  return {\r\n    // // pathwayGraph: state.pathways.graph,\r\n    // expressionDataset: state.expressionDataset,\r\n    // filteredGeneExpression: state.expressionDataset.filteredGeneExpression,\r\n    // graph: state.pathways.graph,\r\n    // geneAnnotations: state.pathways.geneAnnotations,\r\n    // // filterExpressionData: state.expressionDataset.filtered,\r\n    targets: state.selection.targets,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  updateSelection,\r\n};\r\n\r\nconst connector = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n);\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>;\r\n\r\ntype Props = PropsFromRedux & {\r\n  // canvases : Map<string, CanvasReference>;\r\n  containerRef : React.RefObject<HTMLDivElement>;\r\n};\r\n\r\nfunction TooltipController({\r\n  containerRef,\r\n  targets,\r\n  updateSelection,\r\n} : Props) {\r\n  // const [ refExpressionRows, pointTree ] = useMemo(\r\n  //   () => {\r\n  //     const refExpressionRows = new Map<number, number>();\r\n  //     const pointTree = new RBush();\r\n      \r\n  //     const filteredNodes : GraphNode[] = [];\r\n\r\n  //     for(let i = 0; i < nodes.length; i++) {\r\n  //       const node = nodes[i];\r\n  //       let shouldInclude = false;\r\n  //       let refExpressionRow = -1;\r\n  //       if(node.type === 'molecule') {\r\n  //         const geneName = node.entityReference?.gene?.name;\r\n  //         if(geneName) {\r\n  //           const expressionData = filteredGeneExpression.get(geneName);\r\n  //           if(expressionData != null) {\r\n  //             shouldInclude = true;\r\n  //             refExpressionRow = expressionData.__id || -1;\r\n  //             // let foldChange = expressionData.fold_change_log2 || 0;\r\n  //           }\r\n  //         }\r\n  //       }\r\n  //       if(shouldInclude)\r\n  //         filteredNodes.push(nodes[i] as GraphNode);\r\n  //       refExpressionRows.set(node.__id, refExpressionRow);\r\n  //     }\r\n\r\n  //     // pointTree.clear();\r\n  //     pointTree.load(filteredNodes);\r\n\r\n  //     return [\r\n  //       refExpressionRows,\r\n  //       pointTree,\r\n  //     ];\r\n  //   },\r\n  //   // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  //   [filteredGeneExpression, nodes]\r\n  // );\r\n\r\n  const pointTrees = useMemo(\r\n    () => {\r\n      const pointTrees = new Map<string, RBush<Point>>();\r\n      for(let [ id, target ] of targets.entries()) {\r\n        const pointTree = new RBush<Point>();\r\n        pointTree.load(target.points.map(p => {\r\n          return {\r\n            ...p,\r\n            minX: p.x,\r\n            maxX: p.x,\r\n            minY: p.y,\r\n            maxY: p.y,\r\n          };\r\n        }));\r\n        pointTrees.set(id, pointTree);\r\n      }\r\n      return pointTrees;\r\n    },\r\n    [targets]\r\n  )\r\n\r\n  const [ targetId, setTargetId ] = useState(['', -1]);\r\n  const [ tooltipState, setTooltipState ] = useState({\r\n    active: false,\r\n    x: 0,\r\n    y: 0,\r\n    content: <></>,\r\n  });\r\n\r\n  function onMouseMove(x : number, y : number) {\r\n    // if(!canvasCtx) {\r\n    //   console.warn('canvasCtx not set, ignoring tooltip events');\r\n    //   return;\r\n    // }\r\n    let theNearestPoint : Point | null = null;\r\n    let theNearestDist = Infinity;\r\n    let theNearestScreenPos = [0, 0];\r\n    let theNearestTargetId = '';\r\n    for(let [ id, target ] of targets.entries()) {\r\n      const pointTree = pointTrees.get(id);\r\n      if(!pointTree)\r\n        return;\r\n\r\n      const mouseX = x - target.ctx.gl.domElement.offsetLeft;\r\n      const mouseY = y - target.ctx.gl.domElement.offsetTop;\r\n      \r\n      const { width, height } = target.ctx.size;\r\n      const camera = target.ctx.camera;\r\n\r\n      let mx = (mouseX - width / 2) / camera.zoom + camera.position.x;\r\n      let my = (height - mouseY - height / 2) / camera.zoom + camera.position.y;\r\n\r\n      // Tooltip targeting\r\n      let nearest = knn(\r\n        pointTree, \r\n        mx, \r\n        my, \r\n        1\r\n      );\r\n      if(nearest.length > 0) {\r\n        const point = nearest[0] as Point;\r\n        const pointScreenPos = [\r\n          ((point.x || 0) - camera.position.x) * camera.zoom + width / 2 + target.ctx.gl.domElement.offsetLeft,\r\n          height / 2 - ((point.y || 0) - camera.position.y) * camera.zoom + target.ctx.gl.domElement.offsetTop,\r\n        ];\r\n        const pointDist = Math.pow(pointScreenPos[0] - x, 2) + Math.pow(pointScreenPos[1] - y, 2);\r\n        if(!theNearestPoint \r\n          || pointDist < theNearestDist) {\r\n            theNearestPoint = point;\r\n            theNearestDist = pointDist;\r\n            theNearestScreenPos = pointScreenPos;\r\n            theNearestTargetId = id;\r\n        }\r\n        \r\n          // const refExpressionRow = refExpressionRows.get(node.__id);\r\n          // const row = (refExpressionRow && refExpressionRow >= 0) ? expressionDataset.raw[refExpressionRow] : undefined;\r\n          // // console.log('updateTooltip', row)\r\n\r\n          // // Get depth-2 adjacent nodes\r\n          // const firstNeighbours = Array.from(new Set(\r\n          //   (graph.edgeMap.get(node.__id) || [])\r\n          //     .map(e => {\r\n          //       return {\r\n          //         node: graph.nodes[e.source === node.__id ? e.target : e.source],\r\n          //         relation: e.relation,\r\n          //       };\r\n          //     })\r\n          //   ));\r\n          // const selectedEdges = firstNeighbours\r\n          //   .map(firstNeighbour => graph.edgeMap.get(firstNeighbour.node.__id) || [])\r\n          //   .reduce((a, b) => [ ...a, ...b ], []);\r\n          // const selectedNodes : { [key : number] : GraphNode } = {};\r\n          // selectedEdges.forEach(e => {\r\n          //   selectedNodes[e.source] = graph.nodes[e.source];\r\n          //   selectedNodes[e.target] = graph.nodes[e.target];\r\n          // });\r\n\r\n          // const geneName = node.entityReference?.gene?.name;\r\n          // let geneAnnotation : GeneAnnotation | undefined = undefined;\r\n          // if(geneName)\r\n          //   geneAnnotation = geneAnnotations.genes.get(geneName);\r\n          \r\n          // updateSelection(Object.values(selectedNodes), selectedEdges);\r\n\r\n          // const renderTruncatedList = <T extends any>(\r\n          //   list : T[] | undefined, \r\n          //   itemCallback : (item : T, i : number) => JSX.Element,\r\n          //   limit : number,\r\n          //   trunctationNoticeWrapper? : (truncationNotice : JSX.Element, i : number) => JSX.Element,\r\n          // ) => {\r\n          //   let i = 0;\r\n          //   const res = [];\r\n          //   if(list == null) {\r\n          //     res.push(<div key={0}>—</div>);\r\n          //     return res\r\n          //   }\r\n          //   while(i < list.length && i < limit) {\r\n          //     res.push(itemCallback(list[i], i));\r\n          //     i++;\r\n          //   }\r\n          //   if(i < list.length) {\r\n          //     let truncationNotice = (\r\n          //       <div className=\"list-truncation-notice\" key={i+1}>\r\n          //         {list.length - i} more..\r\n          //       </div>\r\n          //     );\r\n          //     if(trunctationNoticeWrapper)\r\n          //       truncationNotice = trunctationNoticeWrapper(truncationNotice, i+1);\r\n          //     res.push(truncationNotice);\r\n          //   }\r\n          //   return res;\r\n          // };\r\n\r\n          // // const dashForNan = (val : string) => (val && val !== '' && val !== 'nan') ? val : '—';\r\n          // setTooltipState({\r\n          //   active: true,\r\n          //   x: ((node.x || 0) - camera.position.x) * camera.zoom + width / 2,\r\n          //   y: height / 2 - ((node.y || 0) - camera.position.y) * camera.zoom,\r\n          //   content: <>\r\n          //     <div className=\"prop\">\r\n          //       <div className=\"name\">Name</div>\r\n          //       <div className=\"value\">{geneName || node.name}</div>\r\n          //     </div>\r\n          //     <div className=\"prop\">\r\n          //       <div className=\"name\">Location</div>\r\n          //       <div className=\"value\">{node.cellularLocation}</div>\r\n          //     </div>\r\n          //     <div className=\"prop\">\r\n          //       <div className=\"name\">log<sub>2</sub>(Fold-change)</div>\r\n          //       <div className=\"value\" style={{ color: (row?.fold_change_log2 || 0) > 0 ? \"#fb6542\" : \"#375e97\" }}>\r\n          //         {row?.fold_change_log2?.toFixed(2)}\r\n          //       </div>\r\n          //     </div>\r\n          //     <div className=\"prop\">\r\n          //       <div className=\"name\">xref</div>\r\n          //       <div className=\"value\">{node.entityReference?.xref?.db}:{node.entityReference?.xref?.id}</div>\r\n          //     </div>\r\n          //     <div className=\"prop\">\r\n          //       <div className=\"name\">GO terms</div>\r\n          //       <div className=\"value\">\r\n          //         {renderTruncatedList(geneAnnotation?.go_terms, (gt, i) => \r\n          //           <div className=\"go-term\" key={i}>{gt}</div>\r\n          //         , 2)}\r\n          //       </div>\r\n          //     </div>\r\n          //     {renderTruncatedList(firstNeighbours, (neighbour, i) => \r\n          //       <div className=\"prop\" key={i}>\r\n          //         <div className=\"name\">\r\n          //           <span className=\"accent\">{neighbour.relation}</span> in\r\n          //         </div>\r\n          //         <div className=\"value\">{neighbour.node.name}</div>\r\n          //       </div>\r\n          //     , 2, (truncationNotice, i) =>\r\n          //       <div className=\"prop\" key={i}>\r\n          //         <div className=\"name\"></div>\r\n          //         <div className=\"value\">{truncationNotice}</div>\r\n          //       </div>\r\n          //     )}\r\n          //   </>\r\n          // });\r\n      }\r\n    }\r\n\r\n    if(theNearestPoint) {\r\n      if(theNearestTargetId !== targetId[0] || theNearestPoint.__id !== targetId[1]) {\r\n        setTargetId([ theNearestTargetId, theNearestPoint.__id ])\r\n        setTooltipState({\r\n          active: true,\r\n          x: theNearestScreenPos[0],\r\n          y: theNearestScreenPos[1],\r\n          content: targets.get(theNearestTargetId)?.tooltipConstructor(theNearestPoint.__id) || <></>,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  const touchState = useMemo(() => ({\r\n    nTouches: 0,\r\n    lastTouchPos: [0, 0],\r\n    touchStartPos: [0, 0],\r\n  }), []);\r\n\r\n  const bind = useGesture({\r\n    onMove: ({ xy: [x, y] }) => {\r\n      onMouseMove(x, y);\r\n    },\r\n    onTouchStart: ({ touches }) => {\r\n      if(touchState.nTouches === 0)\r\n        touchState.touchStartPos = [ touches[0].pageX, touches[0].pageY ]\r\n      touchState.nTouches = Math.max(touchState.nTouches, touches.length);\r\n      touchState.lastTouchPos = [ touches[0].pageX, touches[0].pageY ];\r\n    },\r\n    onTouchMove: ({ touches }) => {\r\n      touchState.lastTouchPos = [ touches[0].pageX, touches[0].pageY ];\r\n    },\r\n    onTouchEnd: ({ touches }) => {\r\n      const maxMoveDist = 5;\r\n      if(touchState.nTouches === 1\r\n        && Math.abs(touchState.touchStartPos[0] - touchState.lastTouchPos[0]) <= maxMoveDist\r\n        && Math.abs(touchState.touchStartPos[1] - touchState.lastTouchPos[1]) <= maxMoveDist\r\n      )\r\n        onMouseMove(touchState.lastTouchPos[0], touchState.lastTouchPos[1]);\r\n      if(touches.length < 1)\r\n        touchState.nTouches = 0;\r\n    },\r\n    // onClick: ({ clientX: x, clientY: y }) => {\r\n    //   onMouseMove(x, y);\r\n    // },\r\n  }, {\r\n    domTarget: containerRef,\r\n    event: { passive: false },\r\n  });\r\n  useEffect(() => { bind(); }, [bind, containerRef, pointTrees]);\r\n\r\n  return (\r\n    <Tooltip {...tooltipState} />\r\n  );\r\n}\r\n\r\nexport default connector(TooltipController);\r\n","import React, { useMemo, useState, useEffect } from 'react';\r\nimport colormap from 'colormap';\r\n\r\nimport { store } from '../store';\r\nimport { observeSelection } from './ObservesSelection';\r\nimport { updateTarget } from '../store/selection/actions';\r\nimport { SelectionState } from '../store/selection/types';\r\nimport GraphNodes, { GraphNodesProps } from './GraphNodes';\r\nimport { Point, CellMetadata, CellsMetadataVocabs } from '../core/types';\r\nimport { useThree } from 'react-three-fiber';\r\n\r\ninterface Props {\r\n  id : string;\r\n  datasetId : string;\r\n  metadataDatasetId : string;\r\n  goActivityDatasetId : string;\r\n}\r\n\r\nexport const CellEmbedding = ({ id, datasetId, metadataDatasetId, goActivityDatasetId } : Props) => {\r\n  const ctx = useThree();\r\n\r\n  const [ cellEmbeddings, setCellEmbeddings ] = useState(\r\n    store.getState().datasets[datasetId]\r\n  );\r\n  const [ cellMetadata, setCellsMetadata ] = useState(\r\n    store.getState().datasets[metadataDatasetId]\r\n  );\r\n  const [ goActivity, setGOActivity ] = useState(\r\n    store.getState().datasets[goActivityDatasetId]\r\n  );\r\n  const handleStoreUpdate = () => {\r\n    setCellEmbeddings(store.getState().datasets[datasetId]);\r\n    setCellsMetadata(store.getState().datasets[metadataDatasetId]);\r\n    setGOActivity(store.getState().datasets[goActivityDatasetId]);\r\n  };\r\n  useEffect(() => {\r\n    const subscription = store.subscribe(() => {\r\n      handleStoreUpdate();\r\n    });\r\n    handleStoreUpdate();\r\n    return subscription;\r\n  }, []);\r\n\r\n  useEffect(\r\n    () => {\r\n      if(cellEmbeddings) {\r\n        store.dispatch(updateTarget(\r\n          'primary', \r\n          // cellEmbeddings.raw.filter((p, i) => cellMetadata ? (cellMetadata.raw as CellMetadata[])[i].age === '3m' : true), \r\n          cellEmbeddings.raw,\r\n          ctx,\r\n          (id) => {\r\n            const metadata : CellMetadata = cellMetadata.raw[id];\r\n            const metadataVocabs : CellsMetadataVocabs = cellMetadata.meta;\r\n            return (\r\n              <>\r\n                <div className=\"prop\">\r\n                  <div className=\"name\">ID</div>\r\n                  <div className=\"value\">{id}</div>\r\n                </div>\r\n                <div className=\"prop\">\r\n                  <div className=\"name\">Age</div>\r\n                  <div className=\"value\">{metadataVocabs.ageVocab[metadata.age]}</div>\r\n                </div>\r\n                <div className=\"prop\">\r\n                  <div className=\"name\">Sex</div>\r\n                  <div className=\"value\">{metadataVocabs.sexVocab[metadata.sex]}</div>\r\n                </div>\r\n                <div className=\"prop\">\r\n                  <div className=\"name\">Tissue</div>\r\n                  <div className=\"value\">{metadataVocabs.tissueVocab[metadata.tissue]}</div>\r\n                </div>\r\n                <div className=\"prop\">\r\n                  <div className=\"name\">Subtissue</div>\r\n                  <div className=\"value\">{metadataVocabs.subtissueVocab[metadata.subtissue]}</div>\r\n                </div>\r\n                <div className=\"prop\">\r\n                  <div className=\"name\">Cell type</div>\r\n                  <div className=\"value\">\r\n                    {metadataVocabs.cellOntologyClassVocab[metadata.cellOntologyClass]}\r\n                  </div>\r\n                </div>\r\n              </>\r\n            );\r\n          }\r\n        ));\r\n      }\r\n    },\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [cellEmbeddings, cellMetadata]\r\n  );\r\n\r\n  const neutralColor = [0, 0, 0, 0.2];\r\n  const warmColor = [251.0 / 255, 101.0 / 255, 66.0 / 255, 0.4];\r\n  const coldColor = [55.0 / 255, 94.0 / 255, 151.0 / 255, 0.4];\r\n\r\n  const [ colors, sizes ] = useMemo(\r\n    () => {\r\n      const colors : number[] = [];\r\n      const sizes : number[] = [];\r\n\r\n      if(!cellMetadata) {\r\n        return [ colors, sizes ];\r\n      }\r\n\r\n      const metadataVocabs : CellsMetadataVocabs = cellMetadata.meta;\r\n      const ages = metadataVocabs.ageVocab;\r\n      const ageColors = colormap({\r\n        colormap: 'portland',\r\n        nshades: ages.length,\r\n        format: 'float',\r\n        alpha: 0.4,\r\n      });\r\n      \r\n      (cellMetadata.raw as CellMetadata[]).forEach((m, i) => {\r\n        let color = neutralColor;\r\n        let size = 4.0;\r\n\r\n        color = ageColors[ages.indexOf(metadataVocabs.ageVocab[m.age])].slice();\r\n\r\n        if(goActivity && goActivity.raw.length > 0)\r\n          color[3] *= Math.pow(goActivity.raw[i] / 127.0, 2.0);\r\n\r\n        // if(m.age === '3m') {\r\n        //   color = warmColor;\r\n        //   size = 5.0;\r\n        // } else if(m.age === '30m') {\r\n        //   color = coldColor;\r\n        //   size = 5.0;\r\n        // }\r\n\r\n        colors.push(...color);\r\n        sizes.push(size);\r\n      });\r\n\r\n      return [ colors, sizes ];\r\n    },\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [cellEmbeddings, cellMetadata, goActivity]\r\n  );\r\n\r\n  if(!cellEmbeddings) {\r\n    return (\r\n      <></>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <GraphNodes {...{\r\n      nodes: cellEmbeddings.raw as Point[], \r\n      colors, \r\n      sizes,\r\n    }} />\r\n  );\r\n};\r\n","import React, { useEffect, useState, useMemo, useRef } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport axios from 'axios';\nimport * as THREE from 'three';\nimport * as Papa from 'papaparse';\nimport { Canvas, SharedCanvasContext } from 'react-three-fiber';\n\nimport { dpi } from './config'\nimport { CsvParseResult, ExpressionDataRow, Point, CanvasReference, CellMetadata, CellsMetadata, CellsMetadataVocabs, CellEmbeddings, CellsMetaMetadata } from './core/types'\nimport { loadProto } from './util/proto'\nimport {\n  updateExpressionDataset, \n  setExpressionDatasetFilterDimensions, \n  addExpressionDatasetCustomFilterDimension,\n  setExpressionDatasetFilterValue,\n} from './store/expression-dataset/actions'\nimport {\n  setFilterDimensions,\n} from './store/datasets/actions'\nimport { updateDataset } from './store/datasets/actions'\nimport { updatePathways, updateGeneAnnotations } from './store/pathways/actions'\nimport FilterPanel from './components/FilterPanel'\nimport SceneController from './components/SceneController'\n// import Volcano from './components/Volcano'\nimport './App.scss';\nimport Graph from './components/Graph';\nimport TooltipController from './components/TooltipController';\nimport { CombinedState } from './store';\nimport { GraphEdge, GraphNode, DehydratedPathwayGraph, GeneAnnotation } from './store/pathways/types';\nimport GraphNodes from './components/GraphNodes';\nimport { CellEmbedding } from './components/CellEmbedding';\n\nconst mapStateToProps = (\n  state : CombinedState\n) => {\n  return {\n    nodes: state.pathways.graph.nodes,\n    edges: state.pathways.graph.edges,\n  };\n};\n\nconst mapDispatchToProps = {\n  updateDataset,\n  setFilterDimensions,\n  updateExpressionDataset,\n  setExpressionDatasetFilterDimensions,\n  addExpressionDatasetCustomFilterDimension,\n  setExpressionDatasetFilterValue,\n  updatePathways,\n  updateGeneAnnotations,\n};\n\nconst connector = connect(\n  mapStateToProps,\n  mapDispatchToProps\n);\n\nexport type DataMode = 'pathways' | 'embeddings';\n\nfunction App({\n  updateDataset,\n  setFilterDimensions,\n  updateExpressionDataset, \n  setExpressionDatasetFilterDimensions, \n  addExpressionDatasetCustomFilterDimension,\n  setExpressionDatasetFilterValue,\n  updatePathways,\n  updateGeneAnnotations,\n  nodes,\n  edges,\n} : Partial<ConnectedProps<typeof connector>>) {\n  const [ loading, setLoading ] = useState(true);\n\n  const [ mode, setMode ] = useState<DataMode>('pathways');\n\n  useEffect(\n    () => {\n      const loadData = async () => {\n        // Load the expression data\n        const csvData : CsvParseResult = await new Promise(\n          function(complete, error) {\n            Papa.parse(\n              // './data/facs-18m-24m-cell_ontology_class.csv', \n              './data/merged_augmented.csv', \n              {\n                delimiter: ',',\n                header: true,\n                download: true,\n                dynamicTyping: true,\n                skipEmptyLines: true,\n                complete, \n                error\n              }\n            );\n        });\n        updateExpressionDataset?.(csvData.data as ExpressionDataRow[]);\n        setExpressionDatasetFilterDimensions?.(\n          [ 'start_age', 'end_age', 'sex', 'tissue', 'subtissue', 'cell_ontology_class' ]\n        );\n        setExpressionDatasetFilterValue?.('sex', 'male');\n        [ 'tissue', 'subtissue', 'cell_ontology_class' ].map(d => setExpressionDatasetFilterValue?.(d, ''));\n        // Text column filter\n        const textColumns = [\n          'tissue', 'subtissue', 'cell_ontology_class', 'gene', 'uniprot_mouse', 'uniprot_daphnia'\n        ];\n        addExpressionDatasetCustomFilterDimension?.(\n          'text',\n          (row : ExpressionDataRow) => \n            textColumns.map(d => (row as any)[d]).join('|').toLowerCase(),\n          (filterValue) => {\n            return v => (v as string).includes((filterValue as string).toLowerCase());\n          }\n        );\n        // Daphnia homolog presence filter\n        addExpressionDatasetCustomFilterDimension?.(\n          'uniprot_daphnia',\n          (row : ExpressionDataRow) => \n            row.uniprot_daphnia || '',\n          (filterValue) => {\n            if((filterValue as String) === '~') {\n              // Match non-empty values\n              return v => v != null && v !== '';\n            }\n            return v => v === filterValue;\n          }\n        );\n\n        // Load pathways\n        let pathways = await axios.get('./data/pathways_preprocessed.json');\n        updatePathways?.(pathways.data as DehydratedPathwayGraph);\n        // Load gene annotations\n        let gene_annotations = await axios.get('./data/gene_annotations.json');\n        updateGeneAnnotations?.(gene_annotations.data as GeneAnnotation[]);\n\n        const cellEmbeddingsContainer = await loadProto<CellEmbeddings>('Coords', './data/cell_embeddings.bin');\n        const cellEmbeddings = cellEmbeddingsContainer.values;\n        const embeddingPoints : Point[] = [];\n        const embeddingsScale = 4;\n        for(let i = 0; i < cellEmbeddings.length; i+=2) {\n          embeddingPoints.push({\n            __id: Math.trunc(i / 2),\n            x: cellEmbeddings[i] * embeddingsScale, \n            y: cellEmbeddings[i + 1] * embeddingsScale,\n            // z: cellEmbeddings[i + 2],\n          });\n        }\n        updateDataset?.('cellEmbeddings', embeddingPoints);\n\n        const cellsMetadata = await loadProto<CellsMetadata>('CellsMetadata', './data/cell_metadata.bin');\n        const cellsMetaMetadata : CellsMetaMetadata = {\n          sexVocab: cellsMetadata.sexVocab,\n          ageVocab: cellsMetadata.ageVocab,\n          tissueVocab: cellsMetadata.tissueVocab,\n          subtissueVocab: cellsMetadata.subtissueVocab,\n          cellOntologyClassVocab: cellsMetadata.cellOntologyClassVocab,\n          goActivities: cellsMetadata.goActivities,\n        };\n        updateDataset?.('cellMetadata', cellsMetadata.cells, cellsMetaMetadata);\n\n        // setFilterDimensions?.(\n        //   'cellMetadata',\n        //   [ 'age' ]\n        // );\n\n        setLoading(false);\n      };\n      loadData();\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  );\n\n  const canvases = useMemo(() => new Map<string, CanvasReference>(), []);\n  const canvasContainerRef = useRef<HTMLDivElement>(null);\n\n  const onCanvasCreated = (id : string, ctx : SharedCanvasContext, containerRef : React.RefObject<HTMLDivElement>) => {\n    canvases.set(id, {\n      ctx,\n      containerRef,\n    });\n  };\n\n  const displayNodes = useMemo(() => {\n    return (nodes?.filter(n => n.entityReference?.gene) || []) as GraphNode[];\n  }, [nodes]);\n\n  return (\n    <div className=\"App\">\n      <TooltipController {...{ \n        containerRef: canvasContainerRef\n      }} />\n      <FilterPanel\n        mode={mode}\n        setMode={mode => {\n          setMode(mode);\n          setTimeout(() => canvases.get('embeddings')?.ctx.invalidate(), 100);\n        }}\n      />\n      <div className=\"main-canvas\" ref={canvasContainerRef}>\n        <Canvas\n          // id=\"gl-canvas\"\n          camera={{\n            fov: 75,\n            near: 1.0,\n            far: 10000,\n            position: [0, 0, 1000],\n            rotation: new THREE.Euler(0, 0, 0)\n          }}\n          orthographic={true}\n          pixelRatio={dpi}\n          invalidateFrameloop={true}\n          gl2={true}\n          onCreated={(ctx) => onCanvasCreated('embeddings', ctx, canvasContainerRef)}\n          // {...bind()}\n        >\n          <SceneController {...{\n            canvasContainerRef: canvasContainerRef as React.RefObject<HTMLDivElement>,\n          }}>\n            {mode === 'embeddings' &&\n              <CellEmbedding \n                id='cellEmbeddings' \n                datasetId='cellEmbeddings' \n                metadataDatasetId='cellMetadata'\n                goActivityDatasetId='goActivity'\n              />\n            }\n            {mode === 'pathways' &&\n              <Graph {...{\n                nodes: displayNodes, \n                edges: [] as GraphEdge[], \n              }} />\n            }\n            {/* <Volcano /> */}\n          </SceneController>\n        </Canvas>\n      </div>\n      {loading && \n        <div className=\"loading\">\n          <div className=\"lds-ripple\"><div></div><div></div></div>\n        </div>\n      }\n    </div>\n  );\n}\n\nexport default connector(App);\n","import { PathwayGraphData } from '../../core/types'\r\nimport { \r\n  UpdatePathwaysAction, \r\n  UpdatePathwaysFilterAction, \r\n  UPDATE_PATHWAYS, \r\n  UPDATE_FILTER,\r\n  FilterValueType,\r\n  DehydratedPathwayGraph,\r\n  UPDATE_GENE_ANNOTATIONS,\r\n  UpdateGeneAnnotationsAction,\r\n  GeneAnnotation,\r\n} from './types'\r\n\r\nexport const updatePathways = (pathways : PathwayGraphData | DehydratedPathwayGraph) : UpdatePathwaysAction => {\r\n  return {\r\n    type: UPDATE_PATHWAYS,\r\n    pathways,\r\n  }\r\n};\r\n\r\nexport const updateGeneAnnotations = (geneAnnotations : GeneAnnotation[]) : UpdateGeneAnnotationsAction => {\r\n  return {\r\n    type: UPDATE_GENE_ANNOTATIONS,\r\n    geneAnnotations,\r\n  }\r\n};\r\n\r\nexport const updateFilter = (name : string, value : FilterValueType) : UpdatePathwaysFilterAction => {\r\n  return {\r\n    type: UPDATE_FILTER,\r\n    name,\r\n    value,\r\n  }\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport { store } from './store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}