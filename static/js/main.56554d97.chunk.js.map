{"version":3,"sources":["config.tsx","components/Tooltip.tsx","components/FilterPanel.tsx","store/expression-dataset/actions.tsx","store/expression-dataset/types.tsx","components/SceneController.tsx","store/expression-dataset/reducers.tsx","store/tooltip/reducers.tsx","store/index.tsx","store/tooltip/types.tsx","shaders/PointShader.tsx","components/Volcano.tsx","store/tooltip/actions.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["dpi","window","devicePixelRatio","connector","connect","state","tooltip","active","x","y","content","className","style","left","top","display","mapDispatchToProps","updateTextFilter","filter","type","textFilter","expressionDataset","placeholder","value","onChange","evt","target","SceneController","children","gestureData","useThree","size","height","width","camera","gl","useMemo","performance","now","fpsCount","lastTime","lastReportTime","sceneRef","useRef","mainLight","viewTransform","k","lastGestureData","dragging","dragX","dragY","scrolling","scrollX","scrollY","pinching","pinchD","pinchA","useFrame","curTime","position","zoom","updateProjectionMatrix","document","scrollingElement","scrollTop","ref","intensity","rotation","THREE","castShadow","initialState","lastUpdateTime","raw","filtered","onDatasetFilterChanged","crossfilter","textDimensions","filterAll","s","toLowerCase","includes","allFiltered","allReducers","combineReducers","action","Date","dataset","i","length","__id","dimension","r","gene","uniprot_mouse","uniprot_daphnia","sex","tissue","subtissue","cell_ontology_class","join","store","createStore","PointShader","options","vertexShader","fragmentShader","blending","depthTest","transparent","uniforms","pointTexture","Volcano","mouse","useState","getState","setExpressionDataset","updateExpressionDataset","useEffect","subscribe","xpos","row","fold_change_log2","ypos","Math","log","max","p_value","posAttr","sizeAttr","console","positions","push","sizes","colors","warmColor","coldColor","Float32Array","RBush","pointTree","current","array","needsUpdate","clear","load","map","minX","minY","maxX","maxY","loader","pointShader","lastTargetId","dashForNan","val","mx","my","nearest","knn","dispatch","href","rel","color","toFixed","toExponential","frustumCulled","material","attach","attachObject","count","itemSize","updateDataset","loading","setLoading","a","async","Promise","complete","error","Papa","delimiter","header","download","dynamicTyping","csvData","data","loadData","canvasRef","bind","useGesture","onDrag","event","last","down","movement","preventDefault","onWheel","xy","onPinch","da","d","domTarget","passive","React","fov","near","far","orthographic","pixelRatio","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.56554d97.chunk.js","sourcesContent":["export const dpi = window.devicePixelRatio || 1;\r\n","import React, { useEffect, useState, useMemo } from 'react';\r\nimport { connect, ConnectedProps  } from 'react-redux';\r\n\r\nimport { CombinedState } from '../store'\r\nimport './Tooltip.scss';\r\n\r\nconst mapStateToProps = (\r\n  state : CombinedState\r\n) => {\r\n  return {...state.tooltip};\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  //\r\n};\r\n\r\nconst connector = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n);\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>;\r\n\r\ntype Props = PropsFromRedux & {\r\n  //\r\n};\r\n\r\nexport const Tooltip = ({ active, x, y, content } : Props) => {\r\n  return (\r\n    <div className=\"tooltip\" style={{ left: x, top: y, display: active ? 'block' : 'none' }}>\r\n      {content}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connector(Tooltip);\r\n","import React, { useEffect, useState, useMemo } from 'react';\r\nimport { connect, ConnectedProps  } from 'react-redux';\r\n\r\nimport { ExpressionDatasetState } from '../store/expression-dataset/types'\r\nimport { updateTextFilter } from '../store/expression-dataset/actions'\r\nimport { CombinedState } from '../store';\r\n\r\nconst mapStateToProps = (\r\n  state : CombinedState\r\n) => {\r\n  return {\r\n    textFilter: state.expressionDataset.textFilter,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  updateTextFilter\r\n};\r\n\r\nconst connector = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n);\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>;\r\n\r\ntype Props = PropsFromRedux & {\r\n  //\r\n};\r\n\r\nexport const FilterPanel = ({ textFilter, updateTextFilter } : Props) => {\r\n  return (\r\n    <div className=\"filter-panel\">\r\n      <input className=\"text-filter\" type=\"text\" placeholder=\"filter by any text field\" value={textFilter} onChange={ evt => updateTextFilter(evt.target.value) } />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connector(FilterPanel);\r\n","import { ExpressionDataRow } from '../../core/types'\r\nimport { \r\n  UpdateExpressionDatasetAction, \r\n  UpdateExpressionDatasetTextFilterAction, \r\n  UPDATE_DATASET, \r\n  UPDATE_TEXT_FILTER \r\n} from './types'\r\n\r\nexport const updateDataset = (dataset : ExpressionDataRow[]) : UpdateExpressionDatasetAction => {\r\n  return {\r\n    type: UPDATE_DATASET,\r\n    dataset,\r\n  }\r\n};\r\n\r\nexport const updateTextFilter = (filter : string) : UpdateExpressionDatasetTextFilterAction => {\r\n  return {\r\n    type: UPDATE_TEXT_FILTER,\r\n    filter,\r\n  }\r\n};\r\n","import crossfilter from 'crossfilter2';\r\nimport { ExpressionDataRow } from '../../core/types'\r\n\r\nexport interface ExpressionDatasetState {\r\n  lastUpdateTime : number;\r\n  raw : ExpressionDataRow[];\r\n  textFilter : string;\r\n  crossfilter? : crossfilter.Crossfilter<ExpressionDataRow>;\r\n  textDimensions? : crossfilter.Dimension<ExpressionDataRow, string>;\r\n  filtered : ExpressionDataRow[];\r\n};\r\n\r\nexport const UPDATE_DATASET = \"UPDATE_DATASET\";\r\nexport const UPDATE_TEXT_FILTER = \"UPDATE_TEXT_FILTER\";\r\n\r\nexport interface UpdateExpressionDatasetAction {\r\n  type : string;\r\n  dataset : ExpressionDataRow[];\r\n};\r\nexport interface UpdateExpressionDatasetTextFilterAction {\r\n  type : string;\r\n  filter : string;\r\n};\r\n\r\nexport type ExpressionDatasetActionTypes = \r\n  UpdateExpressionDatasetAction \r\n  | UpdateExpressionDatasetTextFilterAction;\r\n","import * as THREE from 'three'\r\nimport React, { useMemo, useRef, PropsWithChildren } from 'react'\r\nimport { useFrame, useThree } from 'react-three-fiber'\r\nimport { TrackballControls } from 'three/examples/jsm/controls/TrackballControls'\r\n\r\nimport { dpi } from '../config'\r\nimport { GestureData } from '../core/types'\r\n\r\ninterface Props {\r\n  gestureData : GestureData;\r\n}\r\n\r\nexport default function SceneController({ children, gestureData } : PropsWithChildren<Props>) {\r\n  const {\r\n    size: { width, height },\r\n    camera,\r\n    gl,\r\n  } = useThree();\r\n\r\n  const [ fpsCount, lastTime, lastReportTime]  = useMemo(\r\n    () => {\r\n      return [ { value: 0 }, { value: performance.now() }, { value: performance.now() } ]\r\n    }, []\r\n  );\r\n  const sceneRef = useRef();\r\n  const mainLight = useRef();\r\n  const viewTransform = useMemo(() => {\r\n    return {\r\n      x: 0,\r\n      y: -80,\r\n      k: 1.0,\r\n    };\r\n  }, []);\r\n  const lastGestureData : GestureData = useMemo(() => {\r\n      return {\r\n      dragging: false,\r\n      dragX: 0,\r\n      dragY: 0,\r\n      scrolling: false,\r\n      scrollX: 0,\r\n      scrollY: 0,\r\n      pinching: false,\r\n      pinchD: 0,\r\n      pinchA: 0,\r\n    };\r\n  }, []);\r\n  useFrame(() => {\r\n    let curTime = performance.now();\r\n    lastTime.value = curTime;\r\n    fpsCount.value++;\r\n    if(curTime > lastReportTime.value + 1000.0) {\r\n        // console.log('fps', fpsCount.value);\r\n        lastReportTime.value = curTime;\r\n        fpsCount.value = 0;\r\n    }\r\n\r\n    // camera.position.x = width / 2;\r\n    if(gestureData.dragging) {\r\n      viewTransform.x -= (gestureData.dragX - lastGestureData.dragX) / viewTransform.k;\r\n      viewTransform.y += (gestureData.dragY - lastGestureData.dragY) / viewTransform.k;\r\n      lastGestureData.dragX = gestureData.dragX;\r\n      lastGestureData.dragY = gestureData.dragY;\r\n    } else {\r\n      lastGestureData.dragX = 0;\r\n      lastGestureData.dragY = 0;\r\n    }\r\n    lastGestureData.dragging = gestureData.dragging;\r\n\r\n    if(gestureData.scrolling) {\r\n      viewTransform.k *= 1.0 - 0.002 * (gestureData.scrollY - lastGestureData.scrollY);\r\n      lastGestureData.scrollX = gestureData.scrollX;\r\n      lastGestureData.scrollY = gestureData.scrollY;\r\n    } else {\r\n      lastGestureData.scrollX = 0;\r\n      lastGestureData.scrollY = 0;\r\n    }\r\n    lastGestureData.scrolling = gestureData.scrolling;\r\n\r\n    if(gestureData.pinching) {\r\n      if(lastGestureData.pinching) {\r\n        viewTransform.k *= gestureData.pinchD / lastGestureData.pinchD;\r\n      }\r\n      lastGestureData.pinchD = gestureData.pinchD;\r\n      lastGestureData.pinchA = gestureData.pinchA;\r\n    } else {\r\n      lastGestureData.pinching = false;\r\n    }\r\n    lastGestureData.pinching = gestureData.pinching;\r\n    // console.log('viewTransform.k', viewTransform.k)\r\n    // Object.assign(lastGestureData, gestureData);\r\n    camera.position.x = viewTransform.x;\r\n    camera.position.y = height / 2 + viewTransform.y;\r\n    camera.zoom = viewTransform.k;\r\n    camera.updateProjectionMatrix();\r\n\r\n    if(document.scrollingElement) {\r\n      let scrollTop = document.scrollingElement.scrollTop;\r\n\r\n      // mainLight.current.position.x = width / 2 + 200;\r\n      // mainLight.current.position.y = -height / 2 + 100;\r\n      // mainLight.current.position.y = -scrollTop;\r\n\r\n      // sceneRef.current.position.y = Math.round(scrollTop * dpi) / dpi;\r\n    }\r\n  });\r\n\r\n  return (\r\n      <scene ref={sceneRef}>\r\n        <ambientLight intensity={0.5} />\r\n        <directionalLight intensity={0.6} position={[0, 0, 1000]} rotation={new THREE.Euler(0, 0, 0)} castShadow ref={mainLight} />\r\n        {/* <spotLight intensity={0.7} position={[0, 0, 1000]} rotation={new THREE.Euler(0, 0, 0)} angle={Math.PI / 2} penumbra={1} castShadow ref={mainLight} /> */}\r\n        {children}\r\n      </scene>\r\n  );\r\n}\r\n","import crossfilter from 'crossfilter2';\r\nimport { \r\n  ExpressionDatasetState, \r\n  ExpressionDatasetActionTypes, \r\n  UpdateExpressionDatasetAction,\r\n  UpdateExpressionDatasetTextFilterAction,  \r\n  UPDATE_DATASET,\r\n  UPDATE_TEXT_FILTER,\r\n} from './types'\r\n\r\nconst initialState : ExpressionDatasetState = {\r\n  lastUpdateTime: 0,\r\n  raw: [],\r\n  textFilter: \"\",\r\n  filtered: [],\r\n}\r\n\r\nconst onDatasetFilterChanged = (state : ExpressionDatasetState) : ExpressionDatasetState => {\r\n  if(!state.crossfilter || !state.textDimensions)\r\n    return state;\r\n  state.textDimensions\r\n    .filterAll()\r\n    .filter((s) => {\r\n      if(!s)\r\n        return false;\r\n      return (s as string).toLowerCase().includes(state.textFilter.toLowerCase());\r\n    });\r\n  state.filtered = state.crossfilter.allFiltered();\r\n  return state;\r\n}\r\n\r\nexport const expressionDatasetReducer = (\r\n  state = initialState, \r\n  action : ExpressionDatasetActionTypes\r\n) : ExpressionDatasetState => {\r\n  switch(action.type) {\r\n    case UPDATE_DATASET:\r\n      state.lastUpdateTime = Date.now();\r\n      state.raw = (action as UpdateExpressionDatasetAction).dataset;\r\n      for(let i=0; i < state.raw.length; i++)\r\n        state.raw[i].__id = i;\r\n      state.crossfilter = crossfilter(state.raw);\r\n      state.textDimensions = state.crossfilter.dimension(r => [\r\n        r.gene,\r\n        r.uniprot_mouse,\r\n        r.uniprot_daphnia,\r\n        r.sex,\r\n        r.tissue,\r\n        r.subtissue,\r\n        r.cell_ontology_class,\r\n      ].join('|'));\r\n      state = onDatasetFilterChanged(state);\r\n      return {...state};\r\n    case UPDATE_TEXT_FILTER:\r\n      state.textFilter = (action as UpdateExpressionDatasetTextFilterAction).filter;\r\n      state = onDatasetFilterChanged(state);\r\n      return {...state};\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from 'react';\r\nimport { \r\n  TooltipState,\r\n  UpdateTooltipAction, \r\n  UPDATE_TOOLTIP, \r\n  HIDE_TOOLTIP,\r\n  TooltipActionTypes,\r\n} from './types'\r\n\r\nconst initialState : TooltipState = {\r\n  active: false,\r\n  x: 0,\r\n  y: 0,\r\n  content: <></>,\r\n}\r\n\r\nexport const tooltipReducer = (\r\n  state = initialState, \r\n  action : TooltipActionTypes\r\n) : TooltipState => {\r\n  switch(action.type) {\r\n    case UPDATE_TOOLTIP:\r\n      state.x = (action as UpdateTooltipAction).x;\r\n      state.y = (action as UpdateTooltipAction).y;\r\n      state.content = (action as UpdateTooltipAction).content;\r\n      state.active = true;\r\n      return {...state};\r\n    case HIDE_TOOLTIP:\r\n      state.active = false;\r\n      return {...state};\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers, createStore } from 'redux';\r\n\r\nimport { expressionDatasetReducer } from './expression-dataset/reducers'\r\nimport { tooltipReducer } from './tooltip/reducers'\r\nimport { TooltipState } from './tooltip/types';\r\nimport { ExpressionDatasetState } from './expression-dataset/types';\r\n\r\nexport interface CombinedState {\r\n    expressionDataset : ExpressionDatasetState;\r\n    tooltip : TooltipState;\r\n};\r\n\r\nexport const allReducers = combineReducers({\r\n    expressionDataset: expressionDatasetReducer,\r\n    tooltip: tooltipReducer,\r\n});\r\n\r\nexport const store = createStore(\r\n    allReducers\r\n);\r\n","import { ReactNode } from 'react';\r\n\r\nexport interface TooltipState {\r\n  active : boolean;\r\n  x : number;\r\n  y : number;\r\n  content : ReactNode;\r\n};\r\n\r\nexport const UPDATE_TOOLTIP = \"UPDATE_TOOLTIP\";\r\nexport const HIDE_TOOLTIP = \"HIDE_TOOLTIP\";\r\n\r\nexport interface UpdateTooltipAction {\r\n  type : string;\r\n  x : number;\r\n  y : number;\r\n  content : ReactNode;\r\n};\r\nexport interface HideTooltipAction {\r\n  type : string;\r\n};\r\n\r\nexport type TooltipActionTypes = \r\n  UpdateTooltipAction \r\n  | HideTooltipAction;\r\n","import * as THREE from 'three'\r\n\r\ninterface Props extends THREE.ShaderMaterialParameters {\r\n  pointTexture : THREE.Texture;\r\n}\r\n\r\nexport class PointShader extends THREE.ShaderMaterial {\r\n  constructor(options : Props) {\r\n    super({\r\n      vertexShader: `\r\n        attribute float size;\r\n        attribute vec4 color;\r\n        varying vec4 vColor;\r\n\r\n        void main() {\r\n            vec4 mvPosition = modelViewMatrix * vec4( position.xyz, 1.0 );\r\n            gl_PointSize = 10.0 * size;\r\n            gl_Position = projectionMatrix * mvPosition;\r\n            vColor = color;\r\n            // if(size == 0.0)\r\n            //   color.w = 0.0;\r\n        }\r\n      `,\r\n      fragmentShader: `\r\n        uniform sampler2D pointTexture;\r\n        varying vec4 vColor;\r\n        void main() {\r\n          gl_FragColor = vColor * texture2D(pointTexture, gl_PointCoord);\r\n          // gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\r\n          // gl_FragColor.w *= 0.4;\r\n        }\r\n      `,\r\n      // blendSrc: THREE.SrcAlphaFactor,\r\n      // blendDst: THREE.OneMinusSrcColorFactor,\r\n      // blending: THREE.CustomBlending,\r\n      // blendEquation: THREE.AddEquation,\r\n      // blending: THREE.AdditiveBlending,\r\n      blending: THREE.NormalBlending,\r\n      depthTest: false,\r\n      transparent: true,\r\n      // vertexColors: true,\r\n    });\r\n\r\n    this.uniforms = {\r\n      pointTexture: { value: options.pointTexture },\r\n    }\r\n  }\r\n}\r\n","import React, { useEffect, useState, useMemo, useRef } from 'react';\r\nimport * as THREE from 'three';\r\nimport { useThree, useFrame } from 'react-three-fiber';\r\nimport { connect, ConnectedProps  } from 'react-redux';\r\nimport RBush from 'rbush';\r\nimport knn from 'rbush-knn';\r\n\r\nimport { store } from '../store';\r\nimport { updateTooltip } from '../store/tooltip/actions'\r\nimport { PointShader } from '../shaders/PointShader';\r\nimport { ExpressionDataRow } from '../core/types';\r\n\r\n// const VolcanoTooltip = ({ active, payload } : TooltipProps) => {\r\n//   if(payload.length < 1) {\r\n//     return (<></>);\r\n//   }\r\n\r\n//   return (\r\n//     <div className=\"custom-tooltip\">\r\n//       <div className=\"gene-name\">{payload[0].payload.gene}</div>\r\n//       <div className=\"prop\">\r\n//         <div className=\"name\">Fold-change</div>\r\n//         <div className=\"value\">{payload[0].payload.fold_change_log2.toFixed(2)}</div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\nexport const Volcano = () => {\r\n  const {\r\n    mouse,\r\n    camera,\r\n    size: { width, height },\r\n  } = useThree();\r\n  \r\n  const [ expressionDataset, setExpressionDataset ] = useState({...store.getState().expressionDataset});\r\n  const updateExpressionDataset = () => {\r\n    // if(store.getState().expressionDataset.lastUpdateTime <= expressionDataset.lastUpdateTime)\r\n    //   return;\r\n    // console.log(store.getState().expressionDataset.lastUpdateTime, expressionDataset)\r\n    // console.log('updateExpressionDataset', store.getState().expressionDataset)\r\n    setExpressionDataset({...store.getState().expressionDataset});\r\n  };\r\n  useEffect(() => {\r\n    store.subscribe(() => {\r\n      updateExpressionDataset();\r\n    });\r\n    updateExpressionDataset();\r\n  }, []);\r\n\r\n  const xpos = (row : ExpressionDataRow) => \r\n    row.fold_change_log2 * 25.0;\r\n  const ypos = (row : ExpressionDataRow) => \r\n    (-Math.log(Math.max(row.p_value, 1e-300))) * 0.9;\r\n\r\n  const posAttr = useRef<THREE.BufferAttribute>();\r\n  const sizeAttr = useRef<THREE.BufferAttribute>();\r\n  // Setup point attribute buffers\r\n  const [ positions, sizes, colors, pointTree ] = useMemo(\r\n    () => {\r\n      console.log('expressionDataset.raw.length', expressionDataset.raw.length)\r\n      let positions = [];\r\n      for(let i = 0; i < expressionDataset.raw.length * 3; i+=3) {\r\n        let row = expressionDataset.raw[i / 3];\r\n        positions.push(\r\n          xpos(row),\r\n          ypos(row),\r\n          0\r\n        );\r\n      }\r\n      let sizes = [];\r\n      // Init sizes to zero\r\n      for(let i = 0; i < expressionDataset.raw.length; i+=1) {\r\n        sizes.push(1.0);\r\n      }\r\n      let colors = [];\r\n      const warmColor = [251.0 / 255, 101.0 / 255, 66.0 / 255];\r\n      const coldColor = [55.0 / 255, 94.0 / 255, 151.0 / 255];\r\n      for(let i = 0; i < expressionDataset.raw.length * 4; i+=4) {\r\n        let row = expressionDataset.raw[i / 4];\r\n        if(row.fold_change_log2 > 0)\r\n          colors.push(...warmColor, 1.0);\r\n        else\r\n          colors.push(...coldColor, 1.0);\r\n      }\r\n      return [ \r\n        new Float32Array(positions), \r\n        new Float32Array(sizes), \r\n        new Float32Array(colors), \r\n        new RBush() \r\n      ];\r\n    },\r\n    [expressionDataset.lastUpdateTime, expressionDataset.raw]\r\n  );\r\n  useEffect(\r\n    () => {\r\n      if(!sizeAttr.current)\r\n        return;\r\n      let sizes = [];\r\n      // Init sizes to zero\r\n      for(let i = 0; i < expressionDataset.raw.length; i+=1) {\r\n        sizes.push(0.2);\r\n      }\r\n      // console.log('filtered expressionDataset.raw.length', expressionDataset.raw.length)\r\n      // Set non-zeros sizes for the filtered points\r\n      for(let i = 0; i < expressionDataset.filtered.length; i+=1) {\r\n        let row = expressionDataset.filtered[i];\r\n        sizes[row.__id] = 1.0;\r\n      }\r\n      sizeAttr.current.array = new Float32Array(sizes);\r\n      sizeAttr.current.needsUpdate = true;\r\n\r\n      pointTree.clear();\r\n      pointTree.load(expressionDataset.filtered.map(r => { return { \r\n        minX: xpos(r)-1, \r\n        minY: ypos(r)-1, \r\n        maxX: xpos(r)+1, \r\n        maxY: ypos(r)+1,\r\n        ...r \r\n      }}));\r\n    },\r\n    [expressionDataset.filtered]\r\n  );\r\n\r\n  const [pointShader] = useMemo(() => {\r\n    const loader = new THREE.TextureLoader();\r\n    const pointShader = new PointShader({\r\n      pointTexture: loader.load('./textures/circle.png'),\r\n    });\r\n    return [pointShader]\r\n  }, []);\r\n\r\n  const lastTargetId = useMemo(() => {\r\n    return {\r\n      value: 0,\r\n    }\r\n  }, []);\r\n  const dashForNan = (val : string) => (val && val !== '' && val !== 'nan') ? val : '—';\r\n  useFrame(() => {\r\n    let mx = (mouse.x * 0.5) * width / camera.zoom + camera.position.x;\r\n    let my = (mouse.y * 0.5) * height / camera.zoom + camera.position.y;\r\n    let nearest = knn(\r\n      pointTree, \r\n      mx, \r\n      my, \r\n      1\r\n    );\r\n    if(nearest.length > 0) {\r\n      let row = nearest[0];\r\n      if(row.__id !== lastTargetId.value) {\r\n        // console.log('updateTooltip', row)\r\n        store.dispatch(updateTooltip(\r\n          ((row.maxX + row.minX) / 2 - camera.position.x) * camera.zoom + width / 2,\r\n          height / 2 - ((row.minY + row.maxY) / 2 - camera.position.y) * camera.zoom,\r\n          <>\r\n            <div className=\"prop\">\r\n              <div className=\"name\">Gene</div>\r\n              <div className=\"value\">\r\n                <div className=\"gene-name\">{row.gene}</div> (\r\n                <a href={\"https://www.uniprot.org/uniprot/\" + row.uniprot_mouse} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                  {row.uniprot_mouse}\r\n                </a>\r\n                )\r\n              </div>\r\n            </div>\r\n            <div className=\"prop\">\r\n              <div className=\"name\">Closest Daphnia homolog</div>\r\n              <div className=\"value\">\r\n                <a href={\"https://www.uniprot.org/uniprot/\" + row.uniprot_daphnia} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                  {row.uniprot_daphnia}\r\n                </a>\r\n              </div>\r\n            </div>\r\n            <div className=\"prop\">\r\n              <div className=\"name\">Fold-change</div>\r\n              <div className=\"value\" style={{ color: row.fold_change_log2 > 0 ? \"#fb6542\" : \"#375e97\" }}>\r\n                {row.fold_change_log2.toFixed(2)}\r\n              </div>\r\n            </div>\r\n            <div className=\"prop\">\r\n              <div className=\"name\">p-value</div>\r\n              <div className=\"value\">{row.p_value.toExponential(6)}</div>\r\n            </div>\r\n            <div className=\"prop\">\r\n              <div className=\"name\">Sex</div>\r\n              <div className=\"value\">{row.sex}</div>\r\n            </div>\r\n            <div className=\"prop\">\r\n              <div className=\"name\">Tissue</div>\r\n              <div className=\"value\">{dashForNan(row.tissue)}</div>\r\n            </div>\r\n            <div className=\"prop\">\r\n              <div className=\"name\">Subtissue</div>\r\n              <div className=\"value\">{dashForNan(row.subtissue)}</div>\r\n            </div>\r\n            <div className=\"prop\">\r\n              <div className=\"name\">Cell type</div>\r\n              <div className=\"value\">{dashForNan(row.cell_ontology_class)}</div>\r\n            </div>\r\n          </>\r\n        ));\r\n        lastTargetId.value = row.__id;\r\n      }\r\n      // console.log(nearest[0].gene, mx, my);\r\n    }\r\n  });\r\n\r\n  if(positions.length < 1) {\r\n    return (\r\n      <>\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <points \r\n        frustumCulled={false}\r\n        material={pointShader}>\r\n        <bufferGeometry attach=\"geometry\">\r\n          <bufferAttribute\r\n            attachObject={['attributes', 'position']}\r\n            count={positions.length / 3}\r\n            array={positions}\r\n            itemSize={3}\r\n            ref={posAttr}\r\n          />\r\n          <bufferAttribute\r\n            attachObject={['attributes', 'size']}\r\n            count={sizes.length}\r\n            array={sizes}\r\n            itemSize={1}\r\n            ref={sizeAttr}\r\n          />\r\n          <bufferAttribute\r\n            attachObject={['attributes', 'color']}\r\n            count={colors.length / 4}\r\n            array={colors}\r\n            itemSize={4}\r\n            // ref={colorAttr}\r\n          />\r\n        </bufferGeometry>\r\n      </points>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Volcano;\r\n","import { ReactNode } from 'react';\r\nimport { \r\n  UpdateTooltipAction, \r\n  HideTooltipAction, \r\n  UPDATE_TOOLTIP, \r\n  HIDE_TOOLTIP \r\n} from './types'\r\n\r\nexport const updateTooltip = (x : number, y : number, content : ReactNode) : UpdateTooltipAction => {\r\n  return {\r\n    type: UPDATE_TOOLTIP,\r\n    x,\r\n    y,\r\n    content,\r\n  }\r\n};\r\n\r\nexport const hideTooltip = () : HideTooltipAction => {\r\n  return {\r\n    type: HIDE_TOOLTIP,\r\n  }\r\n};\r\n","import React, { useEffect, useState, useMemo, useRef } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport * as THREE from 'three';\nimport * as Papa from 'papaparse';\nimport { Canvas } from 'react-three-fiber';\nimport { useGesture } from 'react-use-gesture'\n\nimport { dpi } from './config'\nimport { CsvParseResult, ExpressionDataRow } from './core/types'\nimport { updateDataset } from './store/expression-dataset/actions'\nimport Tooltip from './components/Tooltip'\nimport FilterPanel from './components/FilterPanel'\nimport SceneController from './components/SceneController'\nimport Volcano from './components/Volcano'\nimport './App.scss';\n\nconst mapDispatchToProps = {\n  updateDataset: updateDataset\n};\n\nconst connector = connect(\n  null,\n  mapDispatchToProps\n);\n\nfunction App({ updateDataset } : Partial<ConnectedProps<typeof connector>>) {\n  const [ loading, setLoading ] = useState(true);\n  useEffect(() => {\n    const loadData = async () => {\n      const csvData : CsvParseResult = await new Promise(\n        function(complete, error) {\n          Papa.parse(\n            // './data/facs-18m-24m-cell_ontology_class.csv', \n            './data/merged_augmented.csv', \n            {\n              delimiter: ',',\n              header: true,\n              download: true,\n              dynamicTyping: true,\n              complete, \n              error\n            }\n          );\n      });\n      if(updateDataset)\n        updateDataset(csvData.data as ExpressionDataRow[]);\n      setLoading(false);\n    };\n    loadData();\n  }, []);\n\n  const canvasRef = useRef(null);\n\n  const gestureData = {\n    dragging: false,\n    dragX: 0,\n    dragY: 0,\n    scrolling: false,\n    scrollX: 0,\n    scrollY: 0,\n    pinching: false,\n    pinchD: 0,\n    pinchA: 0,\n  };\n  const bind = useGesture({\n    onDrag: ({ event, last, down, movement: [mx, my] }) => {\n      gestureData.dragging = down;\n      gestureData.dragX = mx;\n      gestureData.dragY = my;\n      if(!last)\n        event?.preventDefault();\n    },\n    onWheel: ({ event, last, down, xy: [x, y] }) => {\n      // console.log('onWheel', down, x, y)\n      gestureData.scrolling = (x !== 0) || (y !== 0);\n      gestureData.scrollX = x;\n      gestureData.scrollY = y;\n      if(!last)\n        event?.preventDefault();\n    },\n    onPinch: ({ event, last, down, da: [d, a] }) => {\n      // console.log('onPinch', d, a)\n      gestureData.pinching = down;\n      gestureData.pinchD = d;\n      gestureData.pinchA = a;\n      if(!last)\n        event?.preventDefault();\n    },\n  }, {\n    domTarget: canvasRef,\n    event: { passive: false },\n  });\n  React.useEffect(() => { bind(); }, [bind]);\n\n  return (\n    <div className=\"App\">\n      <Tooltip />\n      <FilterPanel />\n      <div className=\"main-canvas\" ref={canvasRef}>\n        <Canvas\n          // id=\"gl-canvas\"\n          camera={{\n            fov: 75,\n            near: 1.0,\n            far: 10000,\n            position: [0, 0, 1000],\n            rotation: new THREE.Euler(0, 0, 0)\n          }}\n          orthographic={true}\n          pixelRatio={dpi}\n          // {...bind()}\n        >\n          <SceneController gestureData={gestureData}>\n            <Volcano />\n          </SceneController>\n        </Canvas>\n      </div>\n      {loading && \n        <div className=\"loading\">\n          <div className=\"lds-ripple\"><div></div><div></div></div>\n        </div>\n      }\n    </div>\n  );\n}\n\nexport default connector(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport { store } from './store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n  "],"sourceRoot":""}