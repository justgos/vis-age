{"version":3,"sources":["config.tsx","store/expression-dataset/actions.tsx","store/expression-dataset/types.tsx","components/FilterPanel.tsx","components/SceneController.tsx","store/expression-dataset/reducers.tsx","store/pathways/graphHelpers.tsx","store/pathways/reducers.tsx","store/tooltip/reducers.tsx","store/selection/reducers.tsx","store/index.tsx","store/pathways/types.tsx","store/tooltip/types.tsx","store/selection/types.tsx","shaders/GraphEdgeShader.tsx","components/GraphEdges.tsx","components/ObservesSelection.tsx","shaders/PointShader.tsx","components/GraphNodes.tsx","components/Graph.tsx","components/Tooltip.tsx","components/TooltipController.tsx","store/selection/actions.tsx","App.tsx","store/pathways/actions.tsx","serviceWorker.js","index.tsx"],"names":["dpi","window","devicePixelRatio","setFilterValue","name","value","type","mapDispatchToProps","connector","connect","state","filterValues","expressionDataset","filterValueVocabulary","dimensionLabels","className","Classes","MINIMAL","checked","get","onChange","evt","currentTarget","undefined","map","filter_param","key","selectedValue","entries","t","SceneController","children","canvasContainerRef","useThree","mouse","size","width","height","camera","invalidate","useMemo","performance","now","fpsCount","lastTime","lastReportTime","sceneRef","useRef","mainLight","viewTransform","x","y","k","bind","useGesture","onDrag","event","last","down","delta","dx","dy","preventDefault","onWheel","zoom","position","mx","my","dScale","onPinch","first","da","d","previous","pd","origin","memo","domTarget","passive","useEffect","useFrame","curTime","updateProjectionMatrix","ref","intensity","rotation","THREE","castShadow","initialState","raw","filteredGeneExpression","Map","filterDimensionNames","customFilterFunctions","filtered","raw2filtered","updateFilterVocabularies","forEach","dim","filterDimensions","vocab","group","reduceCount","all","slice","sort","a","b","localeCompare","numeric","set","onDatasetFilterChanged","crossfilter","dimName","filterAll","filterValue","filterFn","filterFunction","filter","allFiltered","clear","r","i","__id","length","row","gene","constructGraph","nodeData","edgeData","nodes","edges","edgeMap","n","data","node","location","Math","random","vx","vy","cellularLocation","some","l","includes","push","addNode","e","edge","sourceEdges","source","targetEdges","target","addEdge","sourcePos","targetPos","adjacentEdges","meanLocation","reduce","simulation","forceSimulation","flatEdges","JSON","parse","stringify","Array","from","entry","force","forceManyBody","strength","forceLink","distance","max","abs","structuringForce","stop","simNodes","cachedPositions","tick","minX","maxX","minY","maxY","rehydrateGraph","dehydrated","graph","relation","cx","cy","strengths","xz","yz","constant","_","alpha","sx","sy","initialize","arguments","geneAnnotations","genes","parsePathways","active","content","selectedNodes","selectedEdges","allReducers","combineReducers","action","dataset","setFilterDimensions","dimensions","dimension","next","addCustomFilterDimension","selector","console","error","pathways","updatePathways","updateGeneAnnotations","ga","tooltip","selection","store","createStore","GraphEdgeShader","vertexShader","fragmentShader","blendSrc","blendDst","blending","transparent","uniforms","GraphEdges","color","positions","uvs","colors","BufferAttribute","Float32Array","posBuf","uvBuf","colorBuf","graphEdgeShader","frustumCulled","material","attach","attributes","uv","observeSelection","Wrapped","stateSelector","props","subscription","_mounted","this","setState","getState","subscribe","handleStoreUpdate","React","Component","PointShader","options","pointTexture","GraphNodes","sizes","sizeBuf","loader","load","pointShader","Graph","neutralColor","warmColor","coldColor","useState","setFilteredGeneExpression","getNodeColorsAndSizes","emphasized","geneName","entityReference","expressionData","foldChange","fold_change_log2","sqrt","SelectionAwareGraphNodes","SelectionAwareGraphEdges","Tooltip","style","left","top","display","updateSelection","canvasCtx","refExpressionRows","pointTree","RBush","filteredNodes","shouldInclude","refExpressionRow","targetId","setTargetId","tooltipState","setTooltipState","onMouseMove","mouseX","current","offsetLeft","mouseY","offsetTop","nearest","knn","firstNeighbours","Set","firstNeighbour","geneAnnotation","Object","values","renderTruncatedList","list","itemCallback","limit","trunctationNoticeWrapper","res","truncationNotice","toFixed","xref","db","id","go_terms","gt","neighbour","warn","onMove","xy","onTouchStart","touches","pageX","pageY","updateDataset","loading","setLoading","async","Promise","complete","Papa","delimiter","header","download","dynamicTyping","skipEmptyLines","csvData","textColumns","join","toLowerCase","v","uniprot_daphnia","axios","gene_annotations","loadData","displayNodes","fov","near","far","orthographic","pixelRatio","invalidateFrameloop","gl2","onCreated","ctx","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qWAAaA,EAAMC,OAAOC,kBAAoB,EC4CjCC,EAAiB,SAACC,EAAeC,GAC5C,MAAO,CACLC,KCrB4B,mBDsB5BF,OACAC,U,uBE/BEE,G,OAAqB,CACzBJ,mBAGIK,EAAYC,aAbM,SACtBC,GAEA,MAAO,CACLC,aAAcD,EAAME,kBAAkBD,aACtCE,sBAAuBH,EAAME,kBAAkBC,yBAUjDN,GASIO,EAAsD,CAC1D,UAAa,YACb,QAAW,UACX,IAAO,MACP,OAAU,SACV,UAAa,YACb,oBAAuB,aA2CVN,SAxCf,YAAuF,IAAhEG,EAA+D,EAA/DA,aAAcE,EAAiD,EAAjDA,sBAAuBV,EAA0B,EAA1BA,eAC1D,OACE,yBAAKY,UAAU,gBAQb,kBAAC,IAAD,CACEA,UAAS,wCAAmCC,IAAQC,SACpDC,QAAgD,MAAvCP,EAAaQ,IAAI,mBAC1BC,SAAW,SAAAC,GAAG,OAAIlB,EAAe,kBAAmBkB,EAAIC,cAAcJ,QAAU,SAAMK,KAHxF,uBAOC,CAAE,YAAa,UAAW,MAAO,SAAU,YAAa,uBAAwBC,KAAI,SAAAC,GAAY,aAC/F,yBAAKC,IAAKD,EAAcV,UAAU,kBAChC,yBAAKA,UAAU,wBACZD,EAAgBW,IAEnB,kBAAC,IAAD,CACEV,UAAS,UAAKC,IAAQC,SACtBU,cAAehB,EAAaQ,IAAIM,GAChCL,SAAW,SAAAC,GAAG,OAAIlB,EAAesB,EAAcJ,EAAIC,cAAcjB,SAElE,aAAK,UAAAQ,EAAsBM,IAAIM,UAA1B,eAAyCG,YAAa,IAAKJ,KAAI,SAAAK,GAAC,OACpE,kBAAC,IAAD,CAAOH,IAAKG,EAAE,GAAIxB,MAAOwB,EAAE,IACf,KAATA,EAAE,GAAYA,EAAE,GAAK,SACtB,0BAAMd,UAAU,SAASc,EAAE,iB,QC9D1B,SAASC,EAAT,GAAuF,IAA5DC,EAA2D,EAA3DA,SAAUC,EAAiD,EAAjDA,mBAAiD,EAM/FC,cAJFC,EAFiG,EAEjGA,MAFiG,IAGjGC,KAAQC,EAHyF,EAGzFA,MAAOC,EAHkF,EAGlFA,OACfC,EAJiG,EAIjGA,OACAC,EALiG,EAKjGA,WALiG,EAQpDC,mBAC7C,WACE,MAAO,CAAE,CAAEnC,MAAO,GAAK,CAAEA,MAAOoC,YAAYC,OAAS,CAAErC,MAAOoC,YAAYC,UACzE,IAX8F,mBAQ3FC,EAR2F,KAQjFC,EARiF,KAQvEC,EARuE,KAa7FC,EAAWC,mBACXC,EAAYD,mBACZE,EAAgBT,mBAAQ,WAC5B,MAAO,CACLU,EAAG,EACHC,EAAG,EACHC,EAAG,OAEJ,IAcH,IAAMC,EAAOC,YAAW,CACtBC,OAAQ,YAA6C,IAA1CC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,KAA4B,gBAAtBC,MAAsB,GAAdC,EAAc,KAAVC,EAAU,KAC/CH,IACDT,EAAcC,GAAKU,EAAKX,EAAcG,EACtCH,EAAcE,GAAKU,EAAKZ,EAAcG,EACtCb,KAEEkB,GACG,OAALD,QAAK,IAALA,KAAOM,kBAEXC,QAAS,YAAuC,IAApCP,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,KAA4B,gBAAtBE,MAAsB,GAAdC,EAAc,KAAVC,EAAU,KAC7C,GAAU,IAAPD,GAAmB,IAAPC,EAAU,CAAC,IAAD,EApBpB,CAFa,GAAV3B,EAAMgB,EAAWd,EAAQE,EAAO0B,KAAO1B,EAAO2B,SAASf,EAC7C,GAAVhB,EAAMiB,EAAWd,EAASC,EAAO0B,KAAO1B,EAAO2B,SAASd,GAqBvC,mBACfe,EADe,KACXC,EADW,KAEjBC,EAAS,EAAM,KAAQP,EAC7BZ,EAAcC,IAAMgB,EAAKjB,EAAcC,KAAO,EAAMkB,GACpDnB,EAAcE,IAAMgB,EAAKlB,EAAcE,KAAO,EAAMiB,GAEpDnB,EAAcG,GAAKgB,EACnB7B,IAEEkB,GACG,OAALD,QAAK,IAALA,KAAOM,kBAEXO,QAAS,YAAiF,IA9BtEnB,EAAYC,EA8BpBK,EAA6E,EAA7EA,MAAOc,EAAsE,EAAtEA,MAAOb,EAA+D,EAA/DA,KAAMC,EAAyD,EAAzDA,KAAyD,gBAAnDa,GAAmD,GAA9CC,EAA8C,2BAAvCC,SAAuC,IAA5BC,EAA4B,KAAnBC,GAAmB,OAAnBA,QAAQC,EAAW,EAAXA,KAC5E,GAAGlB,IAASY,EAAO,CACjB,IAAIF,EAASI,EAAIE,EACjBzB,EAAcC,IAAM0B,EAAK,GAAK3B,EAAcC,KAAO,EAAMkB,GACzDnB,EAAcE,IAAMyB,EAAK,GAAK3B,EAAcE,KAAO,EAAMiB,GACzDnB,EAAcG,GAAKgB,EACnB7B,IAKF,OAHIkB,GACG,OAALD,QAAK,IAALA,KAAOM,iBAENQ,GAzCepB,GA0CU,OAANyB,QAAM,IAANA,OAAA,EAAAA,EAAS,KAAM,EA1CPxB,GA0CgB,OAANwB,QAAM,IAANA,OAAA,EAAAA,EAAS,KAAM,EAzClD,EACJzB,EAAY,GAARd,GAAeE,EAAO0B,KAAO1B,EAAO2B,SAASf,GACjDb,EAASc,EAAa,GAATd,GAAgBC,EAAO0B,KAAO1B,EAAO2B,SAASd,IAyCrDyB,IAER,CACDC,UAAW7C,EACXwB,MAAO,CAAEsB,SAAS,KAoBpB,OAlBAC,qBAAU,WAAQ1B,MAAW,CAACA,IAE9B2B,aAAS,WACP,IAAIC,EAAUxC,YAAYC,MAC1BE,EAASvC,MAAQ4E,EACjBtC,EAAStC,QACN4E,EAAUpC,EAAexC,MAAQ,MAEhCwC,EAAexC,MAAQ4E,EACvBtC,EAAStC,MAAQ,GAGrBiC,EAAO2B,SAASf,EAAID,EAAcC,EAClCZ,EAAO2B,SAASd,EAAIF,EAAcE,EAClCb,EAAO0B,KAAOf,EAAcG,EAC5Bd,EAAO4C,4BAIL,2BAAOC,IAAKrC,GACV,kCAAcsC,UAAW,KACzB,sCAAkBA,UAAW,GAAKnB,SAAU,CAAC,EAAG,EAAG,KAAOoB,SAAU,IAAIC,QAAY,EAAG,EAAG,GAAIC,YAAU,EAACJ,IAAKnC,IAE7GjB,G,kCC7FHyD,EAAwC,CAC5CC,IAAK,GACLC,uBAAwB,IAAIC,IAC5BhF,aAAc,IAAIgF,IAClB9E,sBAAuB,IAAI8E,IAC3BC,qBAAsB,GACtBC,sBAAuB,IAAIF,IAC3BG,SAAU,GACVC,aAAe,IAAIJ,KAGfK,EAA2B,SAACtF,GAiBhC,OAhBAA,EAAMkF,qBAAqBK,SAAQ,SAAAxE,GAAiB,IAAD,EAC3CyE,EAAG,UAAGxF,EAAMyF,wBAAT,aAAG,EAAwBhF,IAAIM,GACxC,GAAIyE,EAAJ,CAGA,IAAME,EAAQF,EACXG,QACAC,cACAC,MACAC,QACAC,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAEhF,IAAekF,cAAcD,EAAEjF,IAAe,KAAM,CAAEmF,SAAS,OACpFnG,EAAMG,sBAAsBiG,IAC1BrF,EACA,IAAIkE,IAAoBS,EAAM5E,KAAI,SAAAK,GAAC,MAAI,CAAEA,EAAEH,IAAeG,EAAExB,gBAGzDK,GAGHqG,EAAyB,SAACrG,GAC9B,IAAIA,EAAMsG,cAAgBtG,EAAMyF,iBAC9B,OAAOzF,EAFiF,2BAG1F,IAAI,IAAJ,IAA4BA,EAAMyF,iBAAiBvE,UAAnD,+CAA8D,CAAC,IAAD,6BAApDqF,EAAoD,KAA3Cf,EAA2C,KAG5DA,EAAIgB,YACJ,IAAIC,EAAczG,EAAMC,aAAaQ,IAAI8F,GACzC,GAAkB,MAAfE,EAAH,CAGA,IAAMC,EAAW1G,EAAMmF,sBAAsB1E,IAAI8F,GAE9CG,EACDlB,EAAImB,eAAeD,EAASD,IAE5BjB,EAAIoB,OAAOH,KAhB2E,kFAmB1FzG,EAAMoF,SAAWpF,EAAMsG,YAAYO,cACnC7G,EAAMqF,aAAayB,QACnB9G,EAAMoF,SAASG,SAAQ,SAACwB,EAAGC,GAAJ,OAAUhH,EAAMqF,aAAae,IAAIW,EAAEE,OAAS,EAAGD,MAEtEhH,EAAMgF,uBAAyB,IAAIC,IACnC,IAAI,IAAI+B,EAAE,EAAGA,EAAIhH,EAAMoF,SAAS8B,OAAQF,IAAK,CAC3C,IAAMG,EAAMnH,EAAMoF,SAAS4B,GACxBG,EAAIC,MACLpH,EAAMgF,uBAAuBoB,IAAIe,EAAIC,KAAMD,GAM/C,OAFAnH,EAAQsF,EAAyBtF,I,QCxEtBqH,EAAiB,SAACC,EAA0BC,GACvD,IAAMC,EAAsB,GACtBC,EAAsB,GACtBC,EAAU,IAAIzC,IA+EpBqC,EAAS/B,SAAQ,SAAAoC,GAAC,OA7EF,SAACC,GACf,IAAIC,EAAgB,eACfD,EADe,CAElBE,SAAU,EACVtF,EAA2B,KAAvBuF,KAAKC,SAAW,IACpBvF,EAA2B,KAAvBsF,KAAKC,SAAW,IACpBC,GAAI,EACJC,GAAI,IAEN,GAAiB,aAAdN,EAAKhI,MAAuBgI,EAAKO,iBAAkB,CACpD,IAAMA,EAAmBP,EAAKO,iBAC3B,CACD,uBACA,mCACA,iBACAC,MAAK,SAAAC,GAAC,cAAIF,QAAJ,IAAIA,OAAJ,EAAIA,EAAkBG,SAASD,MACrCR,EAAKC,SAAW,EACR,CACR,sBACA,YACA,gBACA,sCACA,mBACAM,MAAK,SAAAC,GAAC,cAAIF,QAAJ,IAAIA,OAAJ,EAAIA,EAAkBG,SAASD,MACrCR,EAAKC,SAAW,EACR,CACR,iBACAM,MAAK,SAAAC,GAAC,cAAIF,QAAJ,IAAIA,OAAJ,EAAIA,EAAkBG,SAASD,MACrCR,EAAKC,SAAW,EACR,CACR,UACA,qBACAM,MAAK,SAAAC,GAAC,cAAIF,QAAJ,IAAIA,OAAJ,EAAIA,EAAkBG,SAASD,MACrCR,EAAKC,SAAW,EACR,CACR,SACAM,MAAK,SAAAC,GAAC,cAAIF,QAAJ,IAAIA,OAAJ,EAAIA,EAAkBG,SAASD,MACrCR,EAAKC,UAAY,EACT,CACR,yBACAM,MAAK,SAAAC,GAAC,cAAIF,QAAJ,IAAIA,OAAJ,EAAIA,EAAkBG,SAASD,MACrCR,EAAKC,UAAY,EACT,CACR,mBACA,cACA,UACA,YACA,UACA,aACA,kCACAM,MAAK,SAAAC,GAAC,cAAIF,QAAJ,IAAIA,OAAJ,EAAIA,EAAkBG,SAASD,QACrCR,EAAKC,UAAY,GAGrBN,EAAMe,KAAKV,GAuBSW,CAAQb,MAC9BJ,EAAShC,SAAQ,SAAAkD,GAAC,OArBF,SAACb,GACf,IAAMc,EAAI,eACLd,GAEDe,EAAcjB,EAAQjH,IAAImH,EAAKgB,QAC/BD,IACFA,EAAc,GACdjB,EAAQtB,IAAIwB,EAAKgB,OAAQD,IAE3BA,EAAYJ,KAAKG,GACjB,IAAIG,EAAcnB,EAAQjH,IAAImH,EAAKkB,QAC/BD,IACFA,EAAc,GACdnB,EAAQtB,IAAIwB,EAAKkB,OAAQD,IAE3BA,EAAYN,KAAKG,GAEjBjB,EAAMc,KAAKG,GAISK,CAAQ,eACzBN,EADwB,CAE3BO,UAAW,CAAE,EAAG,GAChBC,UAAW,CAAE,EAAG,SAGlB,IAzFmG,eAyF3FjC,GACN,IAAMa,EAAOL,EAAMR,GACnB,GAAiB,aAAda,EAAKjI,MACW,YAAdiI,EAAKjI,MACS,sBAAdiI,EAAKjI,KACR,CACA,IAAMsJ,EAAgBxB,EAAQjH,IAAIoH,EAAKZ,MACvC,GAAGiC,GAAiBA,EAAchC,OAAS,EAAG,CAC5C,IAAIiC,EAAeD,EAAcpI,KAAI,SAAA2H,GAAC,OACpCjB,EAAMiB,EAAEG,SAAWf,EAAKZ,KAAOwB,EAAEK,OAASL,EAAEG,QAAQd,YACpDsB,QAAO,SAACpD,EAAGC,GAAJ,OAAUD,EAAIC,IAAG,GAAKiD,EAAchC,OAC7CW,EAAKC,SAAWqB,KAXdnC,EAAI,EAAGA,EAAIQ,EAAMN,OAAQF,IAAM,EAA/BA,GAgBR,IAAMqC,EAAaC,YAAgB9B,GAE/B+B,EAAYC,KAAKC,MAAMD,KAAKE,UAC9BC,MAAMC,KAAKlC,GAAS5G,KAAI,SAAA+I,GAAK,OAAIA,EAAM,QAEzCR,EACGS,MAAM,SAAUC,cAAgBC,UAAU,KAC1CF,MAAM,OAAQG,YACbV,EAAUH,QAAO,SAACpD,EAAGC,GAAJ,4BAAcD,GAAd,YAAoBC,MAAI,KACzCiE,UAAS,SAAA7B,GAAC,OACVN,KAAKoC,IArHc,IAsHjBpC,KAAKqC,IACD/B,EAAUS,OAAqBhB,SAAaO,EAAUO,OAAqBd,UAE/E,QAIHgC,MAAM,SAAUO,EAAiB,EAAG,GACnC,SAACvG,OAGD,SAACA,GACC,OAAqB,MAAdA,EAAEgE,SAlIQ,IAkIWhE,EAAEgE,cAA8BjH,MAGlEwI,EAAWiB,OAEX,IAAMC,EAAWlB,EAAW7B,QACxBgD,EAA0B,GA4B9B,OA1BGA,EAAgBtD,SAAWqD,EAASrD,OAErCmC,EAAW7B,QAAQjC,SAAQ,SAACoC,EAAGX,GAC7BW,EAAEnF,EAAIgI,EAAgBxD,GAAGxE,EACzBmF,EAAElF,EAAI+H,EAAgBxD,GAAGvE,MAG3B4G,EAAWoB,KAAK,IAChBD,EAAkBD,EAASzJ,KAAI,SAAA6G,GAAO,MAAO,CAAEnF,EAAGmF,EAAEnF,EAAGC,EAAGkF,EAAElF,OAI9D4G,EAAW7B,QAAQjC,SAAQ,SAACoC,EAAGX,GAC7BQ,EAAMR,GAAGxE,EAAImF,EAAEnF,EACfgF,EAAMR,GAAGvE,EAAIkF,EAAElF,EACf+E,EAAMR,GAAG0D,KAAO/C,EAAEnF,EAClBgF,EAAMR,GAAG2D,KAAOhD,EAAEnF,EAClBgF,EAAMR,GAAG4D,KAAOjD,EAAElF,EAClB+E,EAAMR,GAAG6D,KAAOlD,EAAElF,KAGpBgF,EAAMlC,SAAQ,SAAAkD,GACZA,EAAEO,UAAY,CAAExB,EAAMiB,EAAEG,QAAQpG,EAAGgF,EAAMiB,EAAEG,QAAQnG,GACnDgG,EAAEQ,UAAY,CAAEzB,EAAMiB,EAAEK,QAAQtG,EAAGgF,EAAMiB,EAAEK,QAAQrG,MAG9C,CACL+E,QACAC,QACAC,YA4BSoD,EAAiB,SAACC,GAC7B,IAAMC,EAAuB,CAC3BxD,MAAOgC,KAAKC,MAAMD,KAAKE,UAAUqB,EAAWvD,QAC5CC,MAAO,GACPC,QAAS,IAAIzC,KAkCf,OAhCA+F,EAAMxD,MAAMjC,SAAQ,SAAAoC,GAClBA,EAAEM,GAAK,EACPN,EAAEO,GAAK,EACPP,EAAE+C,KAAO/C,EAAEnF,EACXmF,EAAEgD,KAAOhD,EAAEnF,EACXmF,EAAEiD,KAAOjD,EAAElF,EACXkF,EAAEkD,KAAOlD,EAAElF,KAEbsI,EAAWtD,MAAMlC,SAAQ,SAAAqC,GACvB,IAAMc,EAAmB,CACvBE,OAAQhB,EAAK,GACbkB,OAAQlB,EAAK,GACbqD,SAAUrD,EAAK,GACfoB,UAAW,CAAC,EAAG,GACfC,UAAW,CAAC,EAAG,IAEjBP,EAAKM,UAAY,CAAEgC,EAAMxD,MAAMkB,EAAKE,QAAQpG,EAAGwI,EAAMxD,MAAMkB,EAAKE,QAAQnG,GACxEiG,EAAKO,UAAY,CAAE+B,EAAMxD,MAAMkB,EAAKI,QAAQtG,EAAGwI,EAAMxD,MAAMkB,EAAKI,QAAQrG,GAExE,IAAIkG,EAAcqC,EAAMtD,QAAQjH,IAAIiI,EAAKE,QACrCD,IACFA,EAAc,GACdqC,EAAMtD,QAAQtB,IAAIsC,EAAKE,OAAQD,IAEjCA,EAAYJ,KAAKG,GACjB,IAAIG,EAAcmC,EAAMtD,QAAQjH,IAAIiI,EAAKI,QACrCD,IACFA,EAAc,GACdmC,EAAMtD,QAAQtB,IAAIsC,EAAKI,OAAQD,IAEjCA,EAAYN,KAAKG,MAEZsC,GAMHX,EAAmB,SACvBa,EACAC,EACA3I,EACAC,GAEA,IAGI+E,EACA4D,EACAC,EACAC,EANAC,EAAW,SAACC,GAAgB,OAAO,kBAAOA,IAE1CxB,EAAyC,SAAClG,GAAD,OAAkC,IAAfA,EAAEgE,SAAiB,GAAM,GASzF,SAASgC,EAAM2B,GACb,IAAIzE,EAEAa,EADAF,EAAIH,EAAMN,OAEVwE,EAAK,EACLC,EAAK,EAET,IAAK3E,EAAI,EAAGA,EAAIW,IAAKX,EAEnB0E,IADA7D,EAAOL,EAAMR,IACFxE,EACXmJ,GAAM9D,EAAKpF,EAEb,IAAKiJ,EAAKA,EAAK/D,EAAIuD,EAAIS,EAAKA,EAAKhE,EAAIwD,EAAInE,EAAI,EAAGA,EAAIW,IAAKX,EACvDa,EAAOL,EAAMR,GAKf,IAAK,IAAIA,EAAI,EAAGW,EAAIH,EAAMN,OAAQF,EAAIW,IAAKX,EACzCa,EAAOL,EAAMR,GACD,MAATqE,EAAGrE,IAAca,EAAKI,KACvBJ,EAAKI,KAAQoD,EAAGrE,GAAgBa,EAAKrF,GAAK4I,EAAUpE,GAAKyE,GAC/C,MAATH,EAAGtE,IAAca,EAAKK,KACvBL,EAAKK,KAAQoD,EAAGtE,GAAgBa,EAAKpF,GAAK2I,EAAUpE,GAAKyE,GAI/D,SAASG,IACP,GAAKpE,EAAL,CACA,IAAIR,EAAGW,EAAIH,EAAMN,OAIjB,IAHAkE,EAAY,IAAIzB,MAAMhC,GACtB0D,EAAK,IAAI1B,MAAMhC,GACf2D,EAAK,IAAI3B,MAAMhC,GACVX,EAAI,EAAGA,EAAIW,IAAKX,EACnBqE,EAAGrE,GAAKxE,EAAEgF,EAAMR,GAAIA,EAAGQ,GACvB8D,EAAGtE,GAAKvE,EAAE+E,EAAMR,GAAIA,EAAGQ,GAEvB4D,EAAUpE,IAAMgD,EAASxC,EAAMR,KAqBnC,OAjBA8C,EAAM8B,WAAa,SAASJ,GAC1BhE,EAAQgE,EACRI,KAGF9B,EAAME,SAAW,SAASwB,GACxB,OAAOK,UAAU3E,QAAU8C,EAAyB,oBAANwB,EAAoBA,EAAID,GAAUC,GAAII,IAAc9B,GAASE,GAG7GF,EAAMtH,EAAI,SAASgJ,GACjB,OAAOK,UAAU3E,QAAU1E,EAAiB,oBAANgJ,EAAmBA,EAAID,GAAUC,GAAII,IAAc9B,GAAStH,GAGpGsH,EAAMrH,EAAI,SAAS+I,GACjB,OAAOK,UAAU3E,QAAUzE,EAAiB,oBAAN+I,EAAmBA,EAAID,GAAUC,GAAII,IAAc9B,GAASrH,GAG7FqH,GC7SHhF,EAA+B,CACnCC,IAAK,CAAEyC,MAAO,GAAIC,MAAO,IACzBuD,MAAO,CAAExD,MAAO,GAAIC,MAAO,GAAIC,QAAS,IAAIzC,KAC5C6G,gBAAiB,CAAEC,MAAO,IAAI9G,MAK1B+G,EAAgB,SAAChM,GAMrB,OALAA,EAAMgL,MAAQ3D,EACZrH,EAAM+E,IAAIyC,MAAM1G,KAAI,SAAA6G,GAAC,OAAIA,KACzB3H,EAAM+E,IAAI0C,MAAM3G,KAAI,SAAA2H,GAAO,MAAO,CAAEG,OAAQH,EAAE,GAAIK,OAAQL,EAAE,GAAIwC,SAAUxC,EAAE,QAGvEzI,GCvBH8E,EAA8B,CAClCmH,QAAQ,EACRzJ,EAAG,EACHC,EAAG,EACHyJ,QAAS,sCCNLpH,EAAgC,CACpCqH,cAAe,GACfC,cAAe,ICSJC,EAAcC,YAAgB,CACvCpM,kBLiEoC,WAGT,IAF7BF,EAE4B,uDAFpB8E,EACRyH,EAC4B,uCAC5B,OAAOA,EAAO3M,MACZ,IHnE0B,iBGoExBI,EAAM+E,IAAOwH,EAAyCC,QACtD,IAAI,IAAIxF,EAAE,EAAGA,EAAIhH,EAAM+E,IAAImC,OAAQF,IAAK,CACtC,IAAMG,EAAMnH,EAAM+E,IAAIiC,GACtBG,EAAIF,KAAOD,EAEb,OAAO,eAAIhH,GAEb,IH1EiC,wBG2E/B,IAAIyM,EAAuBF,EA0B3B,OAxBAvM,EAAMsG,YAAcA,YAAYtG,EAAM+E,KACtC/E,EAAMyF,iBAAmB,IAAIR,IAG7BjF,EAAMkF,qBAAuBuH,EAAoBC,WAEjD1M,EAAMkF,qBAAqBK,SAAQ,SAAAxE,GAC9Bf,EAAMsG,aAAetG,EAAMyF,kBAC5BzF,EAAMyF,iBAAiBW,IAAIrF,EAAcf,EAAMsG,YAAYqG,WAAU,SAAA5F,GAAC,OAAKA,EAAUhG,IAA2B,UAGpHf,EAAMC,aAAe,IAAIgF,KACzBjF,EAAQsF,EAAyBtF,IAE3BkF,qBAAqBK,SAAQ,SAAAxE,GAAiB,IAAD,EAE/Cf,EAAMC,aAAamG,IACjBrF,GACA,UAAAf,EAAMG,sBAAsBM,IAAIM,UAAhC,eAA+CG,UAAU0L,OAAOjN,MAAM,KAAM,OAKlFK,EAAQqG,EAAuBrG,GACxB,eAAIA,GAEb,IHtGuC,8BGuGrC,IAAI6M,EAA4BN,EAChC,OAAIvM,EAAMyF,kBAAqBzF,EAAMsG,aAIrCtG,EAAMyF,iBAAiBW,IACrByG,EAAyBnN,KACzBM,EAAMsG,YAAYqG,UAAUE,EAAyBC,WAEpDD,EAAyBnG,UAC1B1G,EAAMmF,sBAAsBiB,IAAIyG,EAAyBnN,KAAMmN,EAAyBnG,UAE1F1G,EAAQqG,EAAuBrG,GACxB,eAAIA,KAXT+M,QAAQC,MAAM,mFACPhN,GAYX,IHrH4B,mBGsH1B,IAAIP,EAAkB8M,EAItB,OAHAvM,EAAMC,aAAamG,IAAI3G,EAAeC,KAAMD,EAAeE,OAC3DK,EAAMC,aAAe,IAAIgF,IAAIjF,EAAMC,cACnCD,EAAQqG,EAAuBrG,GACxB,eAAIA,GACb,QACE,OAAOA,IKjITiN,SHe2B,WAGT,IAFpBjN,EAEmB,uDAFX8E,EACRyH,EACmB,uCACnB,OAAOA,EAAO3M,MACZ,IIzB2B,kBJ0BzB,IAAMsN,EAAiBX,EAOvB,OANIW,EAAeD,SAAoClC,WACrD/K,EAAMgL,MAAQF,EAAeoC,EAAeD,WAE5CjN,EAAM+E,IAAMmI,EAAeD,SAC3BjN,EAAQgM,EAAchM,IAEjB,eAAIA,GACb,IIjCmC,0BJkCjC,IAAMmN,EAAwBZ,EAI9B,OAHAvM,EAAM8L,gBAAkB,CAAEC,MAAO,IAAI9G,KACrCkI,EAAsBrB,gBAAgBvG,SAAQ,SAAA6H,GAAE,OAC9CpN,EAAM8L,gBAAgBC,MAAM3F,IAAIgH,EAAG1N,KAAM0N,MACpC,eAAIpN,GACb,IItCyB,gBJwCvB,OAAO,eAAIA,GACb,QACE,OAAOA,IGtCTqN,QFL0B,WAGT,IAFnBrN,EAEkB,uDAFV8E,EACRyH,EACkB,uCAClB,OAAOA,EAAO3M,MACZ,IIZ0B,iBJiBxB,OAJAI,EAAMwC,EAAK+J,EAA+B/J,EAC1CxC,EAAMyC,EAAK8J,EAA+B9J,EAC1CzC,EAAMkM,QAAWK,EAA+BL,QAChDlM,EAAMiM,QAAS,EACR,eAAIjM,GACb,IIjBwB,eJmBtB,OADAA,EAAMiM,QAAS,EACR,eAAIjM,GACb,QACE,OAAOA,IETTsN,UDV4B,WAGT,IAFrBtN,EAEoB,uDAFZ8E,EACRyH,EACoB,uCACpB,OAAOA,EAAO3M,MACZ,IIV4B,mBJa1B,OAFAI,EAAMmM,cAAiBI,EAAiCJ,cACxDnM,EAAMoM,cAAiBG,EAAiCH,cACjD,eAAIpM,GACb,QACE,OAAOA,MCGAuN,EAAQC,YACjBnB,G,gCIxBSoB,EAAb,YACE,aAAe,IAAD,8BACZ,4CAAM,CACJC,aAAa,0WAabC,eAAe,6OASfC,SAAUhJ,iBACViJ,SAAUjJ,yBACVkJ,SAAUlJ,iBAKVmJ,aAAa,MAIVC,SAAW,CACdlN,IAAK,CAAEnB,MAAO,OApCJ,EADhB,2BAAqCiF,kBCgEtBqJ,MAvDf,YAAyD,IAAnCxG,EAAkC,EAAlCA,MAAOyG,EAA2B,EAA3BA,MAA2B,EAClBpM,mBAClC,WAGE,IAAMqM,EAAuB,GACvBC,EAAiB,GACjBC,EAAoB,GAkB1B,OAFA5G,EAAMlC,SAAQ,SAAAkD,GAAC,OAdEC,EAcUD,EAbzB0F,EAAU5F,KACRG,EAAKM,UAAU,GACfN,EAAKM,UAAU,GACf,EACAN,EAAKO,UAAU,GACfP,EAAKO,UAAU,GACf,GAEFmF,EAAI7F,KAAK,EAAK,EAAK,EAAK,GACxB8F,EAAO9F,KAAP,MAAA8F,EAAM,YAASH,SACfG,EAAO9F,KAAP,MAAA8F,EAAM,YAASH,IAXD,IAACxF,KAgBV,CACL,IAAI4F,kBAAgB,IAAIC,aAAaJ,GAAY,GACjD,IAAIG,kBAAgB,IAAIC,aAAaH,GAAM,GAC3C,IAAIE,kBAAgB,IAAIC,aAAaF,GAAS,MAIlD,CAAC5G,IAhCmD,mBAC9C+G,EAD8C,KACtCC,EADsC,KAC/BC,EAD+B,OAmC1B5M,mBAAQ,WAElC,MAAO,CADiB,IAAI2L,KAE3B,IAHKkB,EAnC8C,oBAwCtD,OACE,kCACEC,eAAe,EACfC,SAAUF,GACV,oCAAgBG,OAAO,WACrBC,WAAY,CACVxL,SAAUiL,EACVQ,GAAIP,EACJP,MAAOQ,O,QCjDJO,EAAmB,SAC9BC,EACAC,GAmCA,OAlCG,YAKD,WAAYC,GAAY,IAAD,8BACrB,4CAAMA,KAJAC,aAA6B,aAGd,EAFfC,UAAqB,EAK3B,EAAKtP,MAAQ,CACXsN,UAAW,CAAEnB,cAAe,GAAIC,cAAe,KAJ5B,EALtB,iFAaKmD,KAAKD,UAETC,KAAKC,SAAS,CACZlC,UAAU,eAAKC,EAAMkC,WAAWnC,eAhBnC,0CAoBCiC,KAAKD,UAAW,EAChBC,KAAKF,aAAe9B,EAAMmC,UAAUH,KAAKI,kBAAkBhN,KAAK4M,OAChEA,KAAKI,sBAtBN,6CAyBCJ,KAAKD,UAAW,EAEhBC,KAAKF,iBA3BN,+BA8BC,IAAMD,EAAQD,EAAcI,KAAKvP,MAAMsN,UAAWiC,KAAKH,OACvD,OAAO,kBAACF,EAAYE,OA/BrB,GACmBQ,IAAMC,YCRjBC,EAAb,YACE,WAAYC,GAAkB,IAAD,8BAC3B,4CAAM,CACJrC,aAAa,uZAcbC,eAAe,2RAefG,SAAUlJ,iBAEVmJ,aAAa,MAIVC,SAAW,CACdgC,aAAc,CAAErQ,MAAOoQ,EAAQC,eAtCN,EAD/B,2BAAiCpL,kBCyElBqL,MAlEf,YAAiE,IAA3CzI,EAA0C,EAA1CA,MAAO0I,EAAmC,EAAnCA,MAAO7B,EAA4B,EAA5BA,OAA4B,EAC3CvM,mBACjB,WAGE,IAAMqM,EAAuB,GAW7B,OAFA3G,EAAMjC,SAAQ,SAAAoC,GAAC,OAREE,EAQUF,OAPzBwG,EAAU5F,KACRV,EAAKrF,EACLqF,EAAKpF,EACL,GAJY,IAACoF,KAUV,CACL,IAAIyG,kBAAgB,IAAIC,aAAaJ,GAAY,MAIrD,CAAC3G,IApBKgH,EADsD,sBAwBhC1M,mBAC5B,WACE,MAAO,CACL,IAAIwM,kBAAgB,IAAIC,aAAa2B,GAAQ,GAC7C,IAAI5B,kBAAgB,IAAIC,aAAaF,GAAS,MAIlD,CAAC6B,EAAO7B,IAhCoD,mBAwBtD8B,EAxBsD,KAwB7CzB,EAxB6C,OAmCtC5M,mBAAQ,WAC9B,IAAMsO,EAAS,IAAIxL,gBAInB,MAAO,CAHa,IAAIkL,EAAY,CAClCE,aAAcI,EAAOC,KAAK,8BAG3B,IANKC,EAnCsD,oBA2C9D,OAAG9I,EAAMN,OAAS,EAEd,qCAMF,4BACE0H,eAAe,EACfC,SAAUyB,GACV,oCAAgBxB,OAAO,WACrBC,WAAY,CACVxL,SAAUiL,EACV/M,KAAM0O,EACNjC,MAAOQ,OCwCF6B,EAjGD,SAAC,GAA8B,IAA5B/I,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,MAChB+I,EAAe,CAAC,EAAG,EAAG,EAAG,KACzBC,EAAY,CAAC,IAAQ,IAAK,IAAQ,IAAK,GAAO,IAAK,IACnDC,EAAY,CAAC,GAAO,IAAK,GAAO,IAAK,IAAQ,IAAK,IAHd,EAKoBC,mBAC5DpD,EAAMkC,WAAWvP,kBAAkB8E,wBANK,mBAKlCA,EALkC,KAKV4L,EALU,KAQpCjB,EAAoB,WACxBiB,EAA0BrD,EAAMkC,WAAWvP,kBAAkB8E,yBAU/D,SAAS6L,EAAsBrJ,GAI7B,IAJiF,IAA/BsJ,EAA8B,wDAC1EzC,EAAoB,GACpB6B,EAAmB,GAEjBlJ,EAAI,EAAGA,EAAIQ,EAAMN,OAAQF,IAAK,CACpC,IAAMa,EAAOL,EAAMR,GACfkH,EAAQsC,EACR/O,EAAO,EACX,GAAiB,aAAdoG,EAAKjI,KAAqB,CAAC,IAAD,IACrBmR,EAAQ,UAAGlJ,EAAKmJ,uBAAR,uBAAG,EAAsB5J,YAAzB,aAAG,EAA4B1H,KAE7C,GAAGqR,EAAU,CACX,IAAME,EAAiBjM,EAAuBvE,IAAIsQ,GAClD,GAAqB,MAAlBE,EAAwB,CACzB,IAAIC,EAAaD,EAAeE,kBAAoB,EACpD1P,EAAyC,EAAlCsG,KAAKqJ,KAAKrJ,KAAKqC,IAAI8G,IAExBhD,EADCgD,EAAa,EACNT,EAEAC,IAIbI,KACD5C,EAAQA,EAAMpI,SACR,GAAK,GAEbuI,EAAO9F,KAAP,MAAA8F,EAAM,YAASH,IACfgC,EAAM3H,KAAK9G,GAGb,MAAO,CACL4M,EACA6B,GAzCJ7L,qBAAU,WACR,IAAMgL,EAAe9B,EAAMmC,WAAU,WACnCC,OAGF,OADAA,IACON,IACN,IAjBuC,MAwDhBvN,mBACxB,WACE,OAAO+O,EAAsBrJ,KAG/B,CAACA,EAAOxC,IA7DgC,mBAwDlCqJ,EAxDkC,KAwD1B6B,EAxD0B,KAgEpCmB,EAA2BpC,EAC/BgB,GACA,SAACjQ,EAAwBoP,GAA6B,IAAD,EACzByB,EAAsB7Q,EAAMmM,eAAe,GADlB,mBAC3CkC,EAD2C,KACnC6B,EADmC,KAEnD,OAAO,eACFd,EADL,CAEE5H,MAAOxH,EAAMmM,cACbkC,SACA6B,aAKAoB,EAA2BrC,EAC/BhB,GACA,SAACjO,EAAwBoP,GACvB,OAAO,eACFA,EADL,CAEE3H,MAAOzH,EAAMoM,mBAKnB,OACE,oCACE,kBAAC,EAAD,CAAY3E,MAAOA,EAAOyG,MAAO,CAAC,EAAG,EAAG,EAAG,MAC3C,kBAACoD,EAAD,CAA0B7J,MAAO,GAAIyG,MAAO,CAAC,IAAM,IAAK,IAAM,IAAK,GAAK,IAAK,KAC7E,kBAAC,EAAD,CAAY1G,MAAOA,EAAO0I,MAAOA,EAAO7B,OAAQA,IAChD,kBAACgD,EAAD,CAA0B7J,MAAO,GAAI0I,MAAO,GAAI7B,OAAQ,O,OCvF/CkD,OARf,YAAqD,IAAlCtF,EAAiC,EAAjCA,OAAQzJ,EAAyB,EAAzBA,EAAGC,EAAsB,EAAtBA,EAAGyJ,EAAmB,EAAnBA,QAC/B,OACE,yBAAK7L,UAAU,UAAUmR,MAAO,CAAEC,KAAMjP,EAAGkP,IAAKjP,EAAGkP,QAAS1F,EAAS,QAAU,SAC5EC,I,wCCWDrM,GAAqB,CACzB+R,gBCpB6B,SAC7BzF,EACAC,GAEA,MAAO,CACLxM,KTJ4B,mBSK5BuM,gBACAC,mBDkPWtM,OAlOGC,aAjBM,SACtBC,GAEA,MAAO,CAELE,kBAAmBF,EAAME,kBACzB8E,uBAAwBhF,EAAME,kBAAkB8E,uBAChDgG,MAAOhL,EAAMiN,SAASjC,MACtBc,gBAAiB9L,EAAMiN,SAASnB,mBAWlCjM,GAgOaC,EArNf,YASY,IARV0H,EAQS,EARTA,MACAwD,EAOS,EAPTA,MACAc,EAMS,EANTA,gBACAxK,EAKS,EALTA,mBACAuQ,EAIS,EAJTA,UACA3R,EAGS,EAHTA,kBACA8E,EAES,EAFTA,uBACA4M,EACS,EADTA,gBACS,EACgC9P,mBACvC,WAME,IALA,IAAMgQ,EAAoB,IAAI7M,IACxB8M,EAAY,IAAIC,KAEhBC,EAA8B,GAE5BjL,EAAI,EAAGA,EAAIQ,EAAMN,OAAQF,IAAK,CACpC,IAAMa,EAAOL,EAAMR,GACfkL,GAAgB,EAChBC,GAAoB,EACxB,GAAiB,aAAdtK,EAAKjI,KAAqB,CAAC,IAAD,IACrBmR,EAAQ,UAAGlJ,EAAKmJ,uBAAR,uBAAG,EAAsB5J,YAAzB,aAAG,EAA4B1H,KAC7C,GAAGqR,EAAU,CACX,IAAME,EAAiBjM,EAAuBvE,IAAIsQ,GAC7B,MAAlBE,IACDiB,GAAgB,EAChBC,EAAmBlB,EAAehK,OAAS,IAK9CiL,GACDD,EAAc1J,KAAKf,EAAMR,IAC3B8K,EAAkB1L,IAAIyB,EAAKZ,KAAMkL,GAMnC,OAFAJ,EAAU1B,KAAK4B,GAER,CACLH,EACAC,KAIJ,CAAC/M,EAAwBwC,IArClB,mBACDsK,EADC,KACkBC,EADlB,OAwCyBpB,oBAAU,GAxCnC,mBAwCDyB,EAxCC,KAwCSC,EAxCT,OAyCiC1B,mBAAS,CACjD1E,QAAQ,EACRzJ,EAAG,EACHC,EAAG,EACHyJ,QAAS,uCA7CF,mBAyCDoG,EAzCC,KAyCaC,EAzCb,KAgDT,SAASC,EAAYhQ,EAAYC,GAAa,IAAD,IAC3C,GAAIoP,EAAJ,CAIA,IAAMY,EAASjQ,IAAK,UAAAlB,EAAmBoR,eAAnB,eAA4BC,aAAc,GACxDC,EAASnQ,IAAK,UAAAnB,EAAmBoR,eAAnB,eAA4BG,YAAa,GANlB,EAQjBhB,EAAUpQ,KAA5BC,EARmC,EAQnCA,MAAOC,EAR4B,EAQ5BA,OACTC,EAASiQ,EAAUjQ,OAErB4B,GAAMiP,EAAS/Q,EAAQ,GAAKE,EAAO0B,KAAO1B,EAAO2B,SAASf,EAC1DiB,GAAM9B,EAASiR,EAASjR,EAAS,GAAKC,EAAO0B,KAAO1B,EAAO2B,SAASd,EAGpEqQ,EAAUC,KACZhB,EACAvO,EACAC,EACA,GAEF,GAAGqP,EAAQ5L,OAAS,EAAG,CACrB,IAAMW,EAAOiL,EAAQ,GACrB,GAAGjL,EAAKZ,OAASmL,EAAU,CAAC,IAAD,gBACzBC,EAAYxK,EAAKZ,MACjB,IAAMkL,EAAmBL,EAAkBrR,IAAIoH,EAAKZ,MAC9CE,EAAOgL,GAAoBA,GAAoB,EAAKjS,EAAkB6E,IAAIoN,QAAoBtR,EAI9FmS,EAAkBrJ,MAAMC,KAAK,IAAIqJ,KACpCjI,EAAMtD,QAAQjH,IAAIoH,EAAKZ,OAAS,IAC9BnG,KAAI,SAAA2H,GACH,MAAO,CACLZ,KAAMmD,EAAMxD,MAAMiB,EAAEG,SAAWf,EAAKZ,KAAOwB,EAAEK,OAASL,EAAEG,QACxDqC,SAAUxC,EAAEwC,eAIdmB,EAAgB4G,EACnBlS,KAAI,SAAAoS,GAAc,OAAIlI,EAAMtD,QAAQjH,IAAIyS,EAAerL,KAAKZ,OAAS,MACrEmC,QAAO,SAACpD,EAAGC,GAAJ,4BAAeD,GAAf,YAAqBC,MAAK,IAC9BkG,EAAiD,GACvDC,EAAc7G,SAAQ,SAAAkD,GACpB0D,EAAc1D,EAAEG,QAAUoC,EAAMxD,MAAMiB,EAAEG,QACxCuD,EAAc1D,EAAEK,QAAUkC,EAAMxD,MAAMiB,EAAEK,WAG1C,IAAMiI,EAAQ,UAAGlJ,EAAKmJ,uBAAR,uBAAG,EAAsB5J,YAAzB,aAAG,EAA4B1H,KACzCyT,OAA8CtS,EAC/CkQ,IACDoC,EAAiBrH,EAAgBC,MAAMtL,IAAIsQ,IAE7Ca,EAAgBwB,OAAOC,OAAOlH,GAAgBC,GAE9C,IAAMkH,EAAsB,SAC1BC,EACAC,EACAC,EACAC,GAEA,IAAI1M,EAAI,EACF2M,EAAM,GACZ,GAAW,MAARJ,EAED,OADAI,EAAIpL,KAAK,yBAAKvH,IAAK,GAAV,WACF2S,EAET,KAAM3M,EAAIuM,EAAKrM,QAAUF,EAAIyM,GAC3BE,EAAIpL,KAAKiL,EAAaD,EAAKvM,GAAIA,IAC/BA,IAEF,GAAGA,EAAIuM,EAAKrM,OAAQ,CAClB,IAAI0M,EACF,yBAAKvT,UAAU,yBAAyBW,IAAKgG,EAAE,GAC5CuM,EAAKrM,OAASF,EADjB,WAIC0M,IACDE,EAAmBF,EAAyBE,EAAkB5M,EAAE,IAClE2M,EAAIpL,KAAKqL,GAEX,OAAOD,GAITpB,EAAgB,CACdtG,QAAQ,EACRzJ,IAAKqF,EAAKrF,GAAK,GAAKZ,EAAO2B,SAASf,GAAKZ,EAAO0B,KAAO5B,EAAQ,EAC/De,EAAGd,EAAS,IAAMkG,EAAKpF,GAAK,GAAKb,EAAO2B,SAASd,GAAKb,EAAO0B,KAC7D4I,QAAS,oCACP,yBAAK7L,UAAU,QACb,yBAAKA,UAAU,QAAf,QACA,yBAAKA,UAAU,SAAS0Q,GAAYlJ,EAAKnI,OAE3C,yBAAKW,UAAU,QACb,yBAAKA,UAAU,QAAf,YACA,yBAAKA,UAAU,SAASwH,EAAKM,mBAE/B,yBAAK9H,UAAU,QACb,yBAAKA,UAAU,QAAf,MAAyB,kCAAzB,iBACA,yBAAKA,UAAU,QAAQmR,MAAO,CAAEtD,QAAW,OAAH/G,QAAG,IAAHA,OAAA,EAAAA,EAAKgK,mBAAoB,GAAK,EAAI,UAAY,YAAtF,OACGhK,QADH,IACGA,OADH,YACGA,EAAKgK,wBADR,aACG,EAAuB0C,QAAQ,KAGpC,yBAAKxT,UAAU,QACb,yBAAKA,UAAU,QAAf,QACA,yBAAKA,UAAU,SAAf,UAAwBwH,EAAKmJ,uBAA7B,uBAAwB,EAAsB8C,YAA9C,aAAwB,EAA4BC,GAApD,cAAyDlM,EAAKmJ,uBAA9D,uBAAyD,EAAsB8C,YAA/E,aAAyD,EAA4BE,KAEvF,yBAAK3T,UAAU,QACb,yBAAKA,UAAU,QAAf,YACA,yBAAKA,UAAU,SACZiT,EAAmB,UAACH,SAAD,aAAC,EAAgBc,UAAU,SAACC,EAAIlN,GAAL,OAC7C,yBAAK3G,UAAU,UAAUW,IAAKgG,GAAIkN,KAClC,KAGLZ,EAAoBN,GAAiB,SAACmB,EAAWnN,GAAZ,OACpC,yBAAK3G,UAAU,OAAOW,IAAKgG,GACzB,yBAAK3G,UAAU,QACb,0BAAMA,UAAU,UAAU8T,EAAUlJ,UADtC,OAGA,yBAAK5K,UAAU,SAAS8T,EAAUtM,KAAKnI,SAEzC,GAAG,SAACkU,EAAkB5M,GAAnB,OACH,yBAAK3G,UAAU,OAAOW,IAAKgG,GACzB,yBAAK3G,UAAU,SACf,yBAAKA,UAAU,SAASuT,iBA5HlC7G,QAAQqH,KAAK,8CAqIjB,IAAMzR,EAAOC,YAAW,CACtByR,OAAQ,YAAqB,IAAD,gBAAjBC,GAAiB,GAC1B9B,EAD0B,YAG5B+B,aAAc,YAAkB,IAAfC,EAAc,EAAdA,QACfhC,EAAYgC,EAAQ,GAAGC,MAAOD,EAAQ,GAAGE,SAK1C,CACDvQ,UAAW7C,EACXwB,MAAO,CAAEsB,SAAS,KAIpB,OAFAC,qBAAU,WAAQ1B,MAAW,CAACA,EAAMkP,IAGlC,kBAAC,GAAYS,MEzNXzS,GAAqB,CACzB8U,ctBpB2B,SAACnI,GAC5B,MAAO,CACL5M,KCK0B,iBDJ1B4M,YsBkBFC,oBtBdiC,SACjCC,GAEA,MAAO,CACL9M,KCHiC,wBDIjC8M,esBUFG,yBtBNsC,SACtCnN,EACAoN,EACApG,GAEA,MAAO,CACL9G,KCbuC,8BDcvCF,OACAoN,WACApG,asBFFjH,iBACAyN,eC1B4B,SAACD,GAC7B,MAAO,CACLrN,KbA2B,kBaC3BqN,aDwBFE,sBCpBmC,SAACrB,GACpC,MAAO,CACLlM,KbNmC,0BaOnCkM,qBD+JWhM,OA3IGC,aAlBM,SACtBC,GAEA,MAAO,CACLwH,MAAOxH,EAAMiN,SAASjC,MAAMxD,MAC5BC,MAAOzH,EAAMiN,SAASjC,MAAMvD,SAe9B5H,GAyIaC,EAtIf,YASgD,IAR9C6U,EAQ6C,EAR7CA,cACAlI,EAO6C,EAP7CA,oBACAI,EAM6C,EAN7CA,yBACApN,EAK6C,EAL7CA,eACAyN,EAI6C,EAJ7CA,eACAC,EAG6C,EAH7CA,sBACA3F,EAE6C,EAF7CA,MAE6C,KAD7CC,MAEgCkJ,oBAAS,IADI,mBACrCiE,EADqC,KAC5BC,EAD4B,KAE7CxQ,qBACE,YACmB,yBAAA2B,EAAA8O,OAAA,kEAAA9O,EAAA,MAEwB,IAAI+O,SACzC,SAASC,EAAUhI,GACjBiI,QAEE,8BACA,CACEC,UAAW,IACXC,QAAQ,EACRC,UAAU,EACVC,eAAe,EACfC,gBAAgB,EAChBN,WACAhI,cAdO,cAETuI,EAFS,OAkBF,OAAbZ,QAAa,IAAbA,KAAgBY,EAAQ3N,MACL,OAAnB6E,QAAmB,IAAnBA,KACE,CAAE,YAAa,UAAW,MAAO,SAAU,YAAa,wBAE5C,OAAdhN,QAAc,IAAdA,KAAiB,MAAO,QACxB,CAAE,SAAU,YAAa,uBAAwBqB,KAAI,SAAAgD,GAAC,cAAIrE,QAAJ,IAAIA,OAAJ,EAAIA,EAAiBqE,EAAG,OAExE0R,EAAc,CAClB,SAAU,YAAa,sBAAuB,OAAQ,gBAAiB,mBAEjD,OAAxB3I,QAAwB,IAAxBA,KACE,QACA,SAAC1F,GAAD,OACEqO,EAAY1U,KAAI,SAAAgD,GAAC,OAAKqD,EAAYrD,MAAI2R,KAAK,KAAKC,iBAClD,SAACjP,GACC,OAAO,SAAAkP,GAAC,OAAKA,EAAarN,SAAU7B,EAAuBiP,mBAIvC,OAAxB7I,QAAwB,IAAxBA,KACE,mBACA,SAAC1F,GAAD,OACEA,EAAIyO,iBAAmB,MACzB,SAACnP,GACC,MAA+B,MAA3BA,EAEK,SAAAkP,GAAC,OAAS,MAALA,GAAmB,KAANA,GAEpB,SAAAA,GAAC,OAAIA,IAAMlP,MA9CP,YAAAT,EAAA,MAmDM6P,IAAMpV,IAAI,sCAnDhB,eAmDXwM,EAnDW,OAoDD,OAAdC,QAAc,IAAdA,KAAiBD,EAASrF,MApDX,YAAA5B,EAAA,MAsDc6P,IAAMpV,IAAI,iCAtDxB,QAsDXqV,EAtDW,OAuDM,OAArB3I,QAAqB,IAArBA,KAAwB2I,EAAiBlO,MAEzCiN,GAAW,GAzDI,sCA2DjBkB,KAGF,IAGF,IAAMzU,EAAqBe,iBAAuB,MAC5CwP,EAAYxP,mBAMZ2T,EAAelU,mBAAQ,WAC3B,OAAa,OAAL0F,QAAK,IAALA,OAAA,EAAAA,EAAOZ,QAAO,SAAAe,GAAC,uBAAIA,EAAEqJ,uBAAN,aAAI,EAAmB5J,UAAS,KACtD,CAACI,IAEJ,OACE,yBAAKnH,UAAU,OACb,kBAAC,GAAsB,CACrBmH,MAAOwO,EACP1U,mBAAoBA,EACpBuQ,UAAWA,EAAUa,UAEvB,kBAAC,EAAD,MACA,yBAAKrS,UAAU,cAAcoE,IAAKnD,GAChC,kBAAC,IAAD,CAEEM,OAAQ,CACNqU,IAAK,GACLC,KAAM,EACNC,IAAK,IACL5S,SAAU,CAAC,EAAG,EAAG,KACjBoB,SAAU,IAAIC,QAAY,EAAG,EAAG,IAElCwR,cAAc,EACdC,WAAY/W,EACZgX,qBAAqB,EACrBC,KAAK,EACLC,UA9BgB,SAACC,GACvB5E,EAAUa,QAAU+D,IAgCd,kBAACrV,EAAoB,CACnBE,mBAAoBA,GAEpB,kBAAC,EAAU,CACTkG,MAAOwO,EACPvO,MAAO,QAMdmN,GACC,yBAAKvU,UAAU,WACb,yBAAKA,UAAU,cAAa,8BAAW,oCEnK7BqW,QACW,cAA7BnX,OAAOuI,SAAS6O,UAEe,UAA7BpX,OAAOuI,SAAS6O,UAEhBpX,OAAOuI,SAAS6O,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAD,CAAUvJ,MAAOA,GACf,kBAAC,GAAD,OAEFwJ,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.aeb02075.chunk.js","sourcesContent":["export const dpi = window.devicePixelRatio || 1;\r\n","import { ExpressionDataRow } from '../../core/types'\r\nimport { \r\n  UpdateExpressionDatasetAction, \r\n  SetExpressionDatasetFilterDimensionsAction,\r\n  SetExpressionDatasetFilterValueAction, \r\n  UPDATE_DATASET, \r\n  SET_FILTER_VALUE,\r\n  FilterValueType,\r\n  SET_FILTER_DIMENSIONS,\r\n  AddCustomExpressionDatasetFilterDimensionAction,\r\n  ADD_CUSTOM_FILTER_DIMENSION,\r\n  CustomFilterFn,\r\n} from './types'\r\nimport { NaturallyOrderedValue } from 'crossfilter2';\r\n\r\nexport const updateDataset = (dataset : ExpressionDataRow[]) : UpdateExpressionDatasetAction => {\r\n  return {\r\n    type: UPDATE_DATASET,\r\n    dataset,\r\n  }\r\n};\r\n\r\nexport const setFilterDimensions = (\r\n  dimensions : string[]\r\n) : SetExpressionDatasetFilterDimensionsAction => {\r\n  return {\r\n    type: SET_FILTER_DIMENSIONS,\r\n    dimensions,\r\n  }\r\n};\r\n\r\nexport const addCustomFilterDimension = (\r\n  name : string,\r\n  selector : (row : ExpressionDataRow) => NaturallyOrderedValue,\r\n  filterFn? : CustomFilterFn\r\n) : AddCustomExpressionDatasetFilterDimensionAction => {\r\n  return {\r\n    type: ADD_CUSTOM_FILTER_DIMENSION,\r\n    name,\r\n    selector,\r\n    filterFn,\r\n  }\r\n};\r\n\r\nexport const setFilterValue = (name : string, value : FilterValueType) : SetExpressionDatasetFilterValueAction => {\r\n  return {\r\n    type: SET_FILTER_VALUE,\r\n    name,\r\n    value,\r\n  }\r\n};\r\n","import crossfilter, { NaturallyOrderedValue } from 'crossfilter2';\r\nimport { ExpressionDataRow } from '../../core/types'\r\n\r\nexport type FilterValueType = string | number | boolean | undefined;\r\n\r\nexport type CustomFilterFn = \r\n  (filterValue : NaturallyOrderedValue) => \r\n    ((v : NaturallyOrderedValue) => boolean);\r\n\r\nexport interface ExpressionDatasetState {\r\n  raw : ExpressionDataRow[];\r\n  filteredGeneExpression : Map<string, ExpressionDataRow>;\r\n  filterValues : Map<string, FilterValueType>;\r\n  filterValueVocabulary : Map<string, Map<string, number>>;\r\n  crossfilter? : crossfilter.Crossfilter<ExpressionDataRow>;\r\n  filterDimensions? : Map<string, crossfilter.Dimension<ExpressionDataRow, NaturallyOrderedValue>>;\r\n  filterDimensionNames : string[];\r\n  customFilterFunctions : Map<string, CustomFilterFn>;\r\n  filtered : ExpressionDataRow[];\r\n  raw2filtered : Map<number, number>;\r\n};\r\n\r\nexport const UPDATE_DATASET = 'UPDATE_DATASET';\r\nexport const SET_FILTER_DIMENSIONS = 'SET_FILTER_DIMENSIONS';\r\nexport const ADD_CUSTOM_FILTER_DIMENSION = 'ADD_CUSTOM_FILTER_DIMENSION';\r\nexport const SET_FILTER_VALUE = 'SET_FILTER_VALUE';\r\n\r\nexport interface UpdateExpressionDatasetAction {\r\n  type : string;\r\n  dataset : ExpressionDataRow[];\r\n};\r\nexport interface SetExpressionDatasetFilterDimensionsAction {\r\n  type : string;\r\n  dimensions : string[];\r\n};\r\nexport interface AddCustomExpressionDatasetFilterDimensionAction {\r\n  type : string;\r\n  name : string;\r\n  selector : (row : ExpressionDataRow) => NaturallyOrderedValue;\r\n  filterFn? : CustomFilterFn;\r\n};\r\nexport interface SetExpressionDatasetFilterValueAction {\r\n  type : string;\r\n  name : string;\r\n  value : FilterValueType;\r\n};\r\n\r\nexport type ExpressionDatasetActionTypes = \r\n  UpdateExpressionDatasetAction \r\n  | SetExpressionDatasetFilterDimensionsAction\r\n  | AddCustomExpressionDatasetFilterDimensionAction\r\n  | SetExpressionDatasetFilterValueAction;\r\n","import React from 'react';\r\nimport { connect, ConnectedProps  } from 'react-redux';\r\nimport { Classes, Checkbox, RadioGroup, Radio } from \"@blueprintjs/core\";\r\n\r\nimport { setFilterValue } from '../store/expression-dataset/actions'\r\nimport { CombinedState } from '../store';\r\nimport './FilterPanel.scss';\r\n\r\nconst mapStateToProps = (\r\n  state : CombinedState\r\n) => {\r\n  return {\r\n    filterValues: state.expressionDataset.filterValues,\r\n    filterValueVocabulary: state.expressionDataset.filterValueVocabulary,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  setFilterValue\r\n};\r\n\r\nconst connector = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n);\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>;\r\n\r\ntype Props = PropsFromRedux & {\r\n  //\r\n};\r\n\r\nconst dimensionLabels : { [dimension : string] : string } = {\r\n  'start_age': 'Start age',\r\n  'end_age': 'End age',\r\n  'sex': 'Sex',\r\n  'tissue': 'Tissue',\r\n  'subtissue': 'Subtissue',\r\n  'cell_ontology_class': 'Cell type',\r\n};\r\n\r\nfunction FilterPanel({ filterValues, filterValueVocabulary, setFilterValue } : Props) {\r\n  return (\r\n    <div className=\"filter-panel\">\r\n      {/* <input \r\n        className={`filter-element text-filter ${Classes.INPUT} ${Classes.MINIMAL}`} \r\n        type=\"text\" \r\n        placeholder=\"filter by any text field\" \r\n        value={filterValues.get(\"text\") as string || ''} \r\n        onChange={ evt => setFilterValue(\"text\", evt.currentTarget.value) } \r\n      /> */}\r\n      <Checkbox \r\n        className={`filter-element homolog-filter ${Classes.MINIMAL}`} \r\n        checked={filterValues.get(\"uniprot_daphnia\") != null} \r\n        onChange={ evt => setFilterValue(\"uniprot_daphnia\", evt.currentTarget.checked ? \"~\" : undefined) }\r\n      >\r\n        has Daphnia homolog\r\n      </Checkbox>\r\n      {[ 'start_age', 'end_age', 'sex', 'tissue', 'subtissue', 'cell_ontology_class' ].map(filter_param => \r\n        <div key={filter_param} className=\"filter-element\">\r\n          <div className=\"filter-element-label\">\r\n            {dimensionLabels[filter_param]}\r\n          </div>\r\n          <RadioGroup \r\n            className={`${Classes.MINIMAL}`}\r\n            selectedValue={filterValues.get(filter_param) as string} \r\n            onChange={ evt => setFilterValue(filter_param, evt.currentTarget.value) } \r\n          >\r\n          {[...(filterValueVocabulary.get(filter_param)?.entries() || [])].map(t => \r\n            <Radio key={t[0]} value={t[0]}>\r\n              {t[0] !== '' ? t[0] : '<none>'}\r\n              <span className=\"count\">{t[1]}</span>\r\n            </Radio>\r\n          )}\r\n          </RadioGroup>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connector(FilterPanel);\r\n","import * as THREE from 'three'\r\nimport React, { useMemo, useRef, useEffect, PropsWithChildren } from 'react'\r\nimport { useFrame, useThree } from 'react-three-fiber'\r\nimport { useGesture } from 'react-use-gesture'\r\n\r\ninterface Props {\r\n  canvasContainerRef : React.RefObject<HTMLDivElement>;\r\n}\r\n\r\nexport default function SceneController({ children, canvasContainerRef } : PropsWithChildren<Props>) {\r\n  const {\r\n    mouse,\r\n    size: { width, height },\r\n    camera,\r\n    invalidate,\r\n  } = useThree();\r\n\r\n  const [ fpsCount, lastTime, lastReportTime]  = useMemo(\r\n    () => {\r\n      return [ { value: 0 }, { value: performance.now() }, { value: performance.now() } ]\r\n    }, []\r\n  );\r\n  const sceneRef = useRef();\r\n  const mainLight = useRef();\r\n  const viewTransform = useMemo(() => {\r\n    return {\r\n      x: 0,\r\n      y: 0,  // -80 + height / 2\r\n      k: 0.25,\r\n    };\r\n  }, []);\r\n  \r\n  function mousePos() {\r\n    let mx = (mouse.x * 0.5) * width / camera.zoom + camera.position.x;\r\n    let my = (mouse.y * 0.5) * height / camera.zoom + camera.position.y;\r\n    return [ mx, my ];\r\n  }\r\n  function screen2world(x : number, y : number) {\r\n    return [\r\n      (x - width * 0.5) / camera.zoom + camera.position.x,\r\n      (height - y - height * 0.5) / camera.zoom + camera.position.y,\r\n    ];\r\n  }\r\n\r\n  const bind = useGesture({\r\n    onDrag: ({ event, last, down, delta: [dx, dy] }) => {\r\n      if(down) {\r\n        viewTransform.x -= dx / viewTransform.k;\r\n        viewTransform.y += dy / viewTransform.k;\r\n        invalidate();\r\n      }\r\n      if(!last)\r\n        event?.preventDefault();\r\n    },\r\n    onWheel: ({ event, last, delta: [dx, dy] }) => {\r\n      if(dx !== 0 || dy !== 0) {\r\n        const [ mx, my ] = mousePos();\r\n        const dScale = 1.0 - 0.002 * dy;\r\n        viewTransform.x += (mx - viewTransform.x) * -(1.0 - dScale);\r\n        viewTransform.y += (my - viewTransform.y) * -(1.0 - dScale);\r\n\r\n        viewTransform.k *= dScale;\r\n        invalidate();\r\n      }\r\n      if(!last)\r\n        event?.preventDefault();\r\n    },\r\n    onPinch: ({ event, first, last, down, da: [d, a], previous: [pd, pa], origin, memo }) => {\r\n      if(down && !first) {\r\n        let dScale = d / pd;\r\n        viewTransform.x += (memo[0] - viewTransform.x) * -(1.0 - dScale);\r\n        viewTransform.y += (memo[1] - viewTransform.y) * -(1.0 - dScale);\r\n        viewTransform.k *= dScale;\r\n        invalidate();\r\n      }\r\n      if(!last)\r\n        event?.preventDefault();\r\n\r\n      if(first) {\r\n        return screen2world(origin?.[0] || 0, origin?.[1] || 0);\r\n      }\r\n      return memo;\r\n    },\r\n  }, {\r\n    domTarget: canvasContainerRef,\r\n    event: { passive: false },\r\n  });\r\n  useEffect(() => { bind(); }, [bind]);\r\n\r\n  useFrame(() => {\r\n    let curTime = performance.now();\r\n    lastTime.value = curTime;\r\n    fpsCount.value++;\r\n    if(curTime > lastReportTime.value + 1000.0) {\r\n        // console.log('fps', fpsCount.value);\r\n        lastReportTime.value = curTime;\r\n        fpsCount.value = 0;\r\n    }\r\n\r\n    camera.position.x = viewTransform.x;\r\n    camera.position.y = viewTransform.y;\r\n    camera.zoom = viewTransform.k;\r\n    camera.updateProjectionMatrix();\r\n  });\r\n\r\n  return (\r\n      <scene ref={sceneRef}>\r\n        <ambientLight intensity={0.5} />\r\n        <directionalLight intensity={0.6} position={[0, 0, 1000]} rotation={new THREE.Euler(0, 0, 0)} castShadow ref={mainLight} />\r\n        {/* <spotLight intensity={0.7} position={[0, 0, 1000]} rotation={new THREE.Euler(0, 0, 0)} angle={Math.PI / 2} penumbra={1} castShadow ref={mainLight} /> */}\r\n        {children}\r\n      </scene>\r\n  );\r\n}\r\n","import crossfilter, { NaturallyOrderedValue } from 'crossfilter2';\r\nimport { ExpressionDataRow } from '../../core/types'\r\nimport { \r\n  ExpressionDatasetState, \r\n  ExpressionDatasetActionTypes, \r\n  UpdateExpressionDatasetAction,\r\n  SetExpressionDatasetFilterDimensionsAction,\r\n  SetExpressionDatasetFilterValueAction,  \r\n  UPDATE_DATASET,\r\n  SET_FILTER_DIMENSIONS,\r\n  SET_FILTER_VALUE,\r\n  FilterValueType,\r\n  AddCustomExpressionDatasetFilterDimensionAction,\r\n  ADD_CUSTOM_FILTER_DIMENSION,\r\n  CustomFilterFn,\r\n} from './types'\r\n\r\nconst initialState : ExpressionDatasetState = {\r\n  raw: [],\r\n  filteredGeneExpression: new Map<string, ExpressionDataRow>(),\r\n  filterValues: new Map<string, FilterValueType>(),\r\n  filterValueVocabulary: new Map<string, Map<string, number>>(),\r\n  filterDimensionNames: [],\r\n  customFilterFunctions: new Map<string, CustomFilterFn>(),\r\n  filtered: [],\r\n  raw2filtered : new Map<number, number>(),\r\n}\r\n\r\nconst updateFilterVocabularies = (state : ExpressionDatasetState) : ExpressionDatasetState => {\r\n  state.filterDimensionNames.forEach(filter_param => {\r\n    const dim = state.filterDimensions?.get(filter_param);\r\n    if(!dim)\r\n      return;\r\n    // Get all the unique terms and sort 'em alphanumerically\r\n    const vocab = dim\r\n      .group()\r\n      .reduceCount()\r\n      .all()\r\n      .slice()\r\n      .sort((a, b) => (a.key as string).localeCompare(b.key as string, 'en', { numeric: true }));\r\n    state.filterValueVocabulary.set(\r\n      filter_param, \r\n      new Map<string, number>(vocab.map(t => [ t.key as string, t.value as number ]))\r\n    );\r\n  });\r\n  return state;\r\n}\r\n\r\nconst onDatasetFilterChanged = (state : ExpressionDatasetState) : ExpressionDatasetState => {\r\n  if(!state.crossfilter || !state.filterDimensions)\r\n    return state;\r\n  for(let [ dimName, dim ] of state.filterDimensions.entries()) {\r\n    // TODO: re-apply filter only when the `filterValue` changes\r\n    // Clear the applied filters\r\n    dim.filterAll()\r\n    let filterValue = state.filterValues.get(dimName);\r\n    if(filterValue == null)\r\n      continue;\r\n\r\n    const filterFn = state.customFilterFunctions.get(dimName);\r\n    // Apply either a custom filter function, or a default one - strict equality\r\n    if(filterFn) {\r\n      dim.filterFunction(filterFn(filterValue));\r\n    } else {\r\n      dim.filter(filterValue);\r\n    }\r\n  }\r\n  state.filtered = state.crossfilter.allFiltered();\r\n  state.raw2filtered.clear();\r\n  state.filtered.forEach((r, i) => state.raw2filtered.set(r.__id || -1, i));\r\n\r\n  state.filteredGeneExpression = new Map<string, ExpressionDataRow>();\r\n  for(let i=0; i < state.filtered.length; i++) {\r\n    const row = state.filtered[i];\r\n    if(row.gene) {\r\n      state.filteredGeneExpression.set(row.gene, row);\r\n    }\r\n  }\r\n\r\n  state = updateFilterVocabularies(state);\r\n\r\n  return state;\r\n}\r\n\r\nexport const expressionDatasetReducer = (\r\n  state = initialState, \r\n  action : ExpressionDatasetActionTypes\r\n) : ExpressionDatasetState => {\r\n  switch(action.type) {\r\n    case UPDATE_DATASET:\r\n      state.raw = (action as UpdateExpressionDatasetAction).dataset;\r\n      for(let i=0; i < state.raw.length; i++) {\r\n        const row = state.raw[i];\r\n        row.__id = i;\r\n      }\r\n      return {...state};\r\n\r\n    case SET_FILTER_DIMENSIONS:\r\n      let setFilterDimensions = (action as SetExpressionDatasetFilterDimensionsAction);\r\n      \r\n      state.crossfilter = crossfilter(state.raw);\r\n      state.filterDimensions = new Map<string, crossfilter.Dimension<ExpressionDataRow, NaturallyOrderedValue>>();\r\n\r\n      // Save dimension names\r\n      state.filterDimensionNames = setFilterDimensions.dimensions;\r\n      // Construct requested dimensions\r\n      state.filterDimensionNames.forEach(filter_param => {\r\n        if(state.crossfilter && state.filterDimensions)\r\n          state.filterDimensions.set(filter_param, state.crossfilter.dimension(r => (r as any)[filter_param] as string || ''));\r\n      });\r\n      // Reset the filter values\r\n      state.filterValues = new Map<string, FilterValueType>();\r\n      state = updateFilterVocabularies(state);\r\n      // Set the initial filter values <strike>where there's none</strike>\r\n      state.filterDimensionNames.forEach(filter_param => {\r\n        // if(!state.filterValues.has(filter_param)) {\r\n          state.filterValues.set(\r\n            filter_param, \r\n            state.filterValueVocabulary.get(filter_param)?.entries().next().value[0] || ''\r\n          );\r\n        // }\r\n      });\r\n\r\n      state = onDatasetFilterChanged(state);\r\n      return {...state};\r\n\r\n    case ADD_CUSTOM_FILTER_DIMENSION:\r\n      let addCustomFilterDimension = (action as AddCustomExpressionDatasetFilterDimensionAction);\r\n      if(!state.filterDimensions || !state.crossfilter) {\r\n        console.error('Trying to add a custom filter dimension before SET_FILTER_DIMENSIONS was called');\r\n        return state;\r\n      }\r\n      state.filterDimensions.set(\r\n        addCustomFilterDimension.name, \r\n        state.crossfilter.dimension(addCustomFilterDimension.selector)\r\n      );\r\n      if(addCustomFilterDimension.filterFn)\r\n        state.customFilterFunctions.set(addCustomFilterDimension.name, addCustomFilterDimension.filterFn);\r\n      // state.filterValues.set(addCustomFilterDimension.name, addCustomFilterDimension.defaultValue);\r\n      state = onDatasetFilterChanged(state);\r\n      return {...state};\r\n\r\n    case SET_FILTER_VALUE:\r\n      let setFilterValue = (action as SetExpressionDatasetFilterValueAction);\r\n      state.filterValues.set(setFilterValue.name, setFilterValue.value);\r\n      state.filterValues = new Map(state.filterValues);\r\n      state = onDatasetFilterChanged(state);\r\n      return {...state};\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { forceSimulation, forceManyBody, forceLink } from 'd3-force';\r\n\r\nimport { PathwayNode, PathwayEdge } from '../../core/types';\r\nimport { GraphNode, GraphEdge, PathwayGraph, DehydratedPathwayGraph } from './types'\r\n\r\nconst locationDistance = 250;\r\n\r\nexport const constructGraph = (nodeData : PathwayNode[], edgeData : PathwayEdge[]) : PathwayGraph => {\r\n  const nodes : GraphNode[] = [];\r\n  const edges : GraphEdge[] = [];\r\n  const edgeMap = new Map<number, GraphEdge[]>();\r\n\r\n  const addNode = (data : PathwayNode) => {\r\n    let node : GraphNode = {\r\n      ...data,\r\n      location: 0,\r\n      x: (Math.random() - 0.5) * 1000,\r\n      y: (Math.random() - 0.5) * 1000,\r\n      vx: 0,\r\n      vy: 0,\r\n    };\r\n    if(data.type === 'molecule' && data.cellularLocation) {\r\n      const cellularLocation = data.cellularLocation;\r\n      if([\r\n        'extracellular region',\r\n        'external side of plasma membrane',\r\n        'cell junction',\r\n      ].some(l => cellularLocation?.includes(l))) {\r\n        node.location = 5;\r\n      } else if([ \r\n        'cell outer membrane',\r\n        'cell wall',\r\n        'cell membrane',\r\n        'cytoplasmic side of plasma membrane',\r\n        'plasma membrane',\r\n      ].some(l => cellularLocation?.includes(l))) {\r\n        node.location = 4;\r\n      } else if([ \r\n        'mitochondrial',\r\n      ].some(l => cellularLocation?.includes(l))) {\r\n        node.location = 3;\r\n      } else if([ \r\n        'cytosol',\r\n        'host cell cytosol',\r\n      ].some(l => cellularLocation?.includes(l))) {\r\n        node.location = 0;\r\n      } else if([ \r\n        'golgi',\r\n      ].some(l => cellularLocation?.includes(l))) {\r\n        node.location = -3;\r\n      } else if([ \r\n        'endoplasmic reticulum',\r\n      ].some(l => cellularLocation?.includes(l))) {\r\n        node.location = -4;\r\n      } else if([ \r\n        'nuclear envelope',\r\n        'nucleoplasm',\r\n        'nucleus',\r\n        'nucleolus',\r\n        'nuclear',\r\n        'chromosome',\r\n        'chromosome, centromeric region',\r\n      ].some(l => cellularLocation?.includes(l))) {\r\n        node.location = -5;\r\n      }\r\n    }\r\n    nodes.push(node);\r\n  };\r\n\r\n  const addEdge = (data : GraphEdge) => {\r\n    const edge = {\r\n      ...data,\r\n    }\r\n    let sourceEdges = edgeMap.get(data.source);\r\n    if(!sourceEdges) {\r\n      sourceEdges = [];\r\n      edgeMap.set(data.source, sourceEdges);\r\n    }\r\n    sourceEdges.push(edge);\r\n    let targetEdges = edgeMap.get(data.target);\r\n    if(!targetEdges) {\r\n      targetEdges = [];\r\n      edgeMap.set(data.target, targetEdges);\r\n    }\r\n    targetEdges.push(edge);\r\n    \r\n    edges.push(edge);\r\n  }\r\n\r\n  nodeData.forEach(n => addNode(n));\r\n  edgeData.forEach(e => addEdge({\r\n    ...e,\r\n    sourcePos: [ 0, 0 ],\r\n    targetPos: [ 0, 0 ],\r\n  }));\r\n\r\n  for(let i = 0; i < nodes.length; i++) {\r\n    const node = nodes[i];\r\n    if(node.type === 'reaction' \r\n      || node.type === 'control'\r\n      || node.type === 'template_reaction'\r\n    ) {\r\n      const adjacentEdges = edgeMap.get(node.__id);\r\n      if(adjacentEdges && adjacentEdges.length > 0) {\r\n        let meanLocation = adjacentEdges.map(e => \r\n          nodes[e.source === node.__id ? e.target : e.source].location\r\n        ).reduce((a, b) => a + b, 0) / adjacentEdges.length;\r\n        node.location = meanLocation;\r\n      }\r\n    }\r\n  }\r\n\r\n  const simulation = forceSimulation(nodes);\r\n  \r\n  let flatEdges = JSON.parse(JSON.stringify(\r\n    Array.from(edgeMap).map(entry => entry[1])\r\n  )) as GraphEdge[][];\r\n  simulation\r\n    .force('charge', forceManyBody().strength(-30))\r\n    .force('link', forceLink(\r\n      flatEdges.reduce((a, b) => [...a, ...b], [])\r\n    ).distance(l => \r\n      Math.max(\r\n        Math.abs(\r\n          ((l as any).target as GraphNode).location - ((l as any).source as GraphNode).location\r\n        ) * locationDistance,\r\n        10\r\n      )\r\n    ))\r\n    // .force('center', forceCenter());\r\n    .force('center', structuringForce(0, 0, \r\n      (d) => {\r\n        return undefined;\r\n      }, \r\n      (d) => {\r\n        return d.location != null ? d.location * locationDistance : undefined;\r\n      })\r\n    );\r\n  simulation.stop();\r\n\r\n  const simNodes = simulation.nodes();\r\n  let cachedPositions : any[] = []; //JSON.parse(window.localStorage.getItem('graph/cachedPositions') || '[]');\r\n  // console.log('cachedPositions', cachedPositions)\r\n  if(cachedPositions.length === simNodes.length) {\r\n    // console.log('loading from cache')\r\n    simulation.nodes().forEach((n, i) => {\r\n      n.x = cachedPositions[i].x;\r\n      n.y = cachedPositions[i].y;\r\n    })\r\n  } else {\r\n    simulation.tick(50);\r\n    cachedPositions = simNodes.map(n => { return { x: n.x, y: n.y }; })\r\n    // window.localStorage.setItem('graph/cachedPositions', JSON.stringify(cachedPositions));\r\n  }\r\n\r\n  simulation.nodes().forEach((n, i) => {\r\n    nodes[i].x = n.x;\r\n    nodes[i].y = n.y;\r\n    nodes[i].minX = n.x;\r\n    nodes[i].maxX = n.x;\r\n    nodes[i].minY = n.y;\r\n    nodes[i].maxY = n.y;\r\n  });\r\n\r\n  edges.forEach(e => {\r\n    e.sourcePos = [ nodes[e.source].x, nodes[e.source].y ];\r\n    e.targetPos = [ nodes[e.target].x, nodes[e.target].y ];\r\n  });\r\n\r\n  return {\r\n    nodes,\r\n    edges,\r\n    edgeMap,\r\n  }\r\n}\r\n\r\nexport const dehydrateGraph = (graph : PathwayGraph) : DehydratedPathwayGraph => {\r\n  const dehydrated : DehydratedPathwayGraph = {\r\n    nodes: JSON.parse(JSON.stringify(graph.nodes)),\r\n    edges: [],\r\n    dehydrated: true,\r\n  };\r\n  dehydrated.nodes.forEach(n => {\r\n    n.x = Math.round(n.x);\r\n    n.y = Math.round(n.y);\r\n    n.location = Math.round(n.location * 100) / 100;\r\n    n.vx = undefined;\r\n    n.vy = undefined;\r\n    n.minX = undefined\r\n    n.maxX = undefined;\r\n    n.minY = undefined;\r\n    n.maxY = undefined;\r\n    (n as any).index = undefined;\r\n  })\r\n  graph.edges.forEach(edge => {\r\n    dehydrated.edges.push([ edge.source, edge.target, edge.relation ]);\r\n  })\r\n  return dehydrated;\r\n}\r\n\r\nexport const rehydrateGraph = (dehydrated : DehydratedPathwayGraph) : PathwayGraph => {\r\n  const graph : PathwayGraph = {\r\n    nodes: JSON.parse(JSON.stringify(dehydrated.nodes)),\r\n    edges: [],\r\n    edgeMap: new Map<number, GraphEdge[]>(),\r\n  }\r\n  graph.nodes.forEach(n => {\r\n    n.vx = 0;\r\n    n.vy = 0;\r\n    n.minX = n.x\r\n    n.maxX = n.x;\r\n    n.minY = n.y;\r\n    n.maxY = n.y;\r\n  })\r\n  dehydrated.edges.forEach(data => {\r\n    const edge : GraphEdge = {\r\n      source: data[0],\r\n      target: data[1],\r\n      relation: data[2],\r\n      sourcePos: [0, 0],\r\n      targetPos: [0, 0],\r\n    };\r\n    edge.sourcePos = [ graph.nodes[edge.source].x, graph.nodes[edge.source].y ];\r\n    edge.targetPos = [ graph.nodes[edge.target].x, graph.nodes[edge.target].y ];\r\n\r\n    let sourceEdges = graph.edgeMap.get(edge.source);\r\n    if(!sourceEdges) {\r\n      sourceEdges = [];\r\n      graph.edgeMap.set(edge.source, sourceEdges);\r\n    }\r\n    sourceEdges.push(edge);\r\n    let targetEdges = graph.edgeMap.get(edge.target);\r\n    if(!targetEdges) {\r\n      targetEdges = [];\r\n      graph.edgeMap.set(edge.target, targetEdges);\r\n    }\r\n    targetEdges.push(edge);\r\n  })\r\n  return graph;\r\n}\r\n\r\n/*\r\n * Centers the graph and aligns nodes by their intended localities\r\n */\r\nconst structuringForce = (\r\n  cx : number, \r\n  cy : number, \r\n  x : ((node : GraphNode, i? : number, nodes? : GraphNode[]) => number | undefined), \r\n  y : ((node : GraphNode, i? : number, nodes? : GraphNode[]) => number | undefined),\r\n) => {\r\n  let constant = (_ : number) => {return () => (_)}\r\n  // var strength = constant(2.0),\r\n  var strength : ((d : GraphNode) => number) = (d : GraphNode) => d.location === 0 ? 0.2 : 5.0,\r\n      nodes : GraphNode[],\r\n      strengths : number[],\r\n      xz : (number | undefined)[],\r\n      yz : (number | undefined)[];\r\n\r\n  // if (x == null) x = 0;\r\n  // if (y == null) y = 0;\r\n\r\n  function force(alpha : number) {\r\n    var i,\r\n        n = nodes.length,\r\n        node : GraphNode,\r\n        sx = 0,\r\n        sy = 0;\r\n\r\n    for (i = 0; i < n; ++i) {\r\n      node = nodes[i];\r\n      sx += node.x;\r\n      sy += node.y;\r\n    }\r\n    for (sx = sx / n - cx, sy = sy / n - cy, i = 0; i < n; ++i) {\r\n      node = nodes[i]\r\n      //node.x -= sx, node.y -= sy;\r\n      // node.vx += (-sx) * strengths[i] * alpha\r\n      // node.vy += (-sy) * strengths[i] * alpha\r\n    }\r\n    for (let i = 0, n = nodes.length; i < n; ++i) {\r\n      node = nodes[i]\r\n      if(xz[i] != null && node.vx)\r\n        node.vx += ((xz[i] as number) - node.x) * strengths[i] * alpha;\r\n      if(yz[i] != null && node.vy)\r\n        node.vy += ((yz[i] as number) - node.y) * strengths[i] * alpha;\r\n    }\r\n  }\r\n\r\n  function initialize() {\r\n    if (!nodes) return;\r\n    var i, n = nodes.length;\r\n    strengths = new Array(n);\r\n    xz = new Array(n);\r\n    yz = new Array(n);\r\n    for (i = 0; i < n; ++i) {\r\n      xz[i] = x(nodes[i], i, nodes);\r\n      yz[i] = y(nodes[i], i, nodes);\r\n      // strengths[i] = +strength(nodes[i], i, nodes)\r\n      strengths[i] = +strength(nodes[i]);\r\n    }\r\n  }\r\n\r\n  force.initialize = function(_ : GraphNode[]) {\r\n    nodes = _\r\n    initialize()\r\n  }\r\n\r\n  force.strength = function(_ : ((d : GraphNode) => number)) {\r\n    return arguments.length ? (strength = (typeof _ === \"function\") ? _ : constant(+_), initialize(), force) : strength\r\n  }\r\n\r\n  force.x = function(_ : number) {\r\n    return arguments.length ? (x = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : x\r\n  }\r\n\r\n  force.y = function(_ : number) {\r\n    return arguments.length ? (y = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : y\r\n  }\r\n\r\n  return force;\r\n}\r\n","// import crossfilter from 'crossfilter2';\r\nimport { \r\n  PathwaysState, \r\n  PathwaysActionTypes, \r\n  UpdatePathwaysAction,\r\n  // UpdatePathwaysFilterAction,  \r\n  UPDATE_PATHWAYS,\r\n  UPDATE_FILTER,\r\n  GraphEdge,\r\n  // FilterValueType,\r\n  DehydratedPathwayGraph,\r\n  GeneAnnotation,\r\n  UPDATE_GENE_ANNOTATIONS,\r\n  UpdateGeneAnnotationsAction,\r\n} from './types'\r\nimport { PathwayGraphData } from '../../core/types'\r\nimport { constructGraph, rehydrateGraph } from './graphHelpers';\r\n\r\nconst initialState : PathwaysState = {\r\n  raw: { nodes: [], edges: [] },\r\n  graph: { nodes: [], edges: [], edgeMap: new Map<number, GraphEdge[]>() },\r\n  geneAnnotations: { genes: new Map<string, GeneAnnotation>() },\r\n  // filterValues: new Map<string, FilterValueType>(),\r\n  // filtered: [],\r\n}\r\n\r\nconst parsePathways = (state : PathwaysState) : PathwaysState => {\r\n  state.graph = constructGraph(\r\n    state.raw.nodes.map(n => n),\r\n    state.raw.edges.map(e => { return { source: e[0], target: e[1], relation: e[2] } })\r\n  );\r\n\r\n  return state;\r\n}\r\n\r\nexport const pathwaysReducer = (\r\n  state = initialState, \r\n  action : PathwaysActionTypes\r\n) : PathwaysState => {\r\n  switch(action.type) {\r\n    case UPDATE_PATHWAYS:\r\n      const updatePathways = action as UpdatePathwaysAction;\r\n      if((updatePathways.pathways as DehydratedPathwayGraph).dehydrated) {\r\n        state.graph = rehydrateGraph(updatePathways.pathways as DehydratedPathwayGraph);\r\n      } else {\r\n        state.raw = updatePathways.pathways as PathwayGraphData;\r\n        state = parsePathways(state);\r\n      }\r\n      return {...state};\r\n    case UPDATE_GENE_ANNOTATIONS:\r\n      const updateGeneAnnotations = action as UpdateGeneAnnotationsAction;\r\n      state.geneAnnotations = { genes: new Map<string, GeneAnnotation>() };\r\n      updateGeneAnnotations.geneAnnotations.forEach(ga =>\r\n        state.geneAnnotations.genes.set(ga.name, ga));\r\n      return {...state};\r\n    case UPDATE_FILTER:\r\n      //\r\n      return {...state};\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from 'react';\r\nimport { \r\n  TooltipState,\r\n  UpdateTooltipAction, \r\n  UPDATE_TOOLTIP, \r\n  HIDE_TOOLTIP,\r\n  TooltipActionTypes,\r\n} from './types'\r\n\r\nconst initialState : TooltipState = {\r\n  active: false,\r\n  x: 0,\r\n  y: 0,\r\n  content: <></>,\r\n}\r\n\r\nexport const tooltipReducer = (\r\n  state = initialState, \r\n  action : TooltipActionTypes\r\n) : TooltipState => {\r\n  switch(action.type) {\r\n    case UPDATE_TOOLTIP:\r\n      state.x = (action as UpdateTooltipAction).x;\r\n      state.y = (action as UpdateTooltipAction).y;\r\n      state.content = (action as UpdateTooltipAction).content;\r\n      state.active = true;\r\n      return {...state};\r\n    case HIDE_TOOLTIP:\r\n      state.active = false;\r\n      return {...state};\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { \r\n  UpdateSelectionAction,\r\n  UPDATE_SELECTION,\r\n  SelectionActionTypes,\r\n  SelectionState,\r\n} from './types'\r\n\r\nconst initialState : SelectionState = {\r\n  selectedNodes: [],\r\n  selectedEdges: [],\r\n}\r\n\r\nexport const selectionReducer = (\r\n  state = initialState, \r\n  action : SelectionActionTypes\r\n) : SelectionState => {\r\n  switch(action.type) {\r\n    case UPDATE_SELECTION:\r\n      state.selectedNodes = (action as UpdateSelectionAction).selectedNodes;\r\n      state.selectedEdges = (action as UpdateSelectionAction).selectedEdges;\r\n      return {...state};\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers, createStore } from 'redux';\r\n\r\nimport { expressionDatasetReducer } from './expression-dataset/reducers'\r\nimport { pathwaysReducer } from './pathways/reducers'\r\nimport { tooltipReducer } from './tooltip/reducers'\r\nimport { selectionReducer } from './selection/reducers'\r\nimport { TooltipState } from './tooltip/types';\r\nimport { ExpressionDatasetState } from './expression-dataset/types';\r\nimport { PathwaysState } from './pathways/types';\r\nimport { SelectionState } from './selection/types';\r\n\r\nexport interface CombinedState {\r\n    expressionDataset : ExpressionDatasetState;\r\n    pathways : PathwaysState;\r\n    tooltip : TooltipState;\r\n    selection : SelectionState;\r\n};\r\n\r\nexport const allReducers = combineReducers({\r\n    expressionDataset: expressionDatasetReducer,\r\n    pathways: pathwaysReducer,\r\n    tooltip: tooltipReducer,\r\n    selection: selectionReducer,\r\n});\r\n\r\nexport const store = createStore(\r\n    allReducers\r\n);\r\n","// import crossfilter from 'crossfilter2';\r\nimport { Point, PathwayNode, PathwayEdge, PathwayGraphData } from '../../core/types'\r\n\r\nexport type FilterValueType = string | number | boolean | undefined;\r\n\r\nexport interface PathwaysState {\r\n  raw : PathwayGraphData;\r\n  graph : PathwayGraph;\r\n  geneAnnotations : GeneAnnotations;\r\n  // filterValues : Map<string, FilterValueType>;\r\n  // crossfilter? : crossfilter.Crossfilter<ExpressionDataRow>;\r\n  // filterDimensions? : Map<string, crossfilter.Dimension<ExpressionDataRow, string>>;\r\n  // filtered : ExpressionDataRow[];\r\n};\r\n\r\nexport const UPDATE_PATHWAYS = 'UPDATE_PATHWAYS';\r\nexport const UPDATE_GENE_ANNOTATIONS = 'UPDATE_GENE_ANNOTATIONS';\r\nexport const UPDATE_FILTER = 'UPDATE_FILTER';\r\n\r\nexport interface UpdatePathwaysAction {\r\n  type : string;\r\n  pathways : PathwayGraphData | DehydratedPathwayGraph;\r\n};\r\nexport interface UpdateGeneAnnotationsAction {\r\n  type : string;\r\n  geneAnnotations : GeneAnnotation[];\r\n};\r\nexport interface UpdatePathwaysFilterAction {\r\n  type : string;\r\n  name : string;\r\n  value : FilterValueType;\r\n};\r\n\r\nexport type PathwaysActionTypes = \r\n  UpdatePathwaysAction \r\n  | UpdateGeneAnnotationsAction\r\n  | UpdatePathwaysFilterAction;\r\n\r\n\r\nexport interface GraphNode extends PathwayNode, Point {\r\n  location : number;\r\n  vx? : number;\r\n  vy? : number;\r\n  minX? : number;\r\n  maxX? : number;\r\n  minY? : number;\r\n  maxY? : number;\r\n}\r\n\r\nexport interface GraphEdge extends PathwayEdge {\r\n  sourcePos : [number, number];\r\n  targetPos : [number, number];\r\n}\r\n\r\nexport interface PathwayGraph {\r\n  nodes : GraphNode[];\r\n  edges : GraphEdge[];\r\n  edgeMap : Map<number, GraphEdge[]>;\r\n}\r\n\r\nexport interface PathwayGraph {\r\n  nodes : GraphNode[];\r\n  edges : GraphEdge[];\r\n  edgeMap : Map<number, GraphEdge[]>;\r\n}\r\n\r\nexport interface DehydratedPathwayGraph {\r\n  nodes : GraphNode[];\r\n  edges : [ number, number, string ][];\r\n  dehydrated : boolean;\r\n}\r\n\r\nexport interface GeneAnnotation {\r\n  name : string;\r\n  uniprot_id : string;\r\n  go_terms : string[];\r\n}\r\n\r\nexport interface GeneAnnotations {\r\n  genes : Map<string, GeneAnnotation>;\r\n}\r\n","import { ReactNode } from 'react';\r\n\r\nexport interface TooltipState {\r\n  active : boolean;\r\n  x : number;\r\n  y : number;\r\n  content : ReactNode;\r\n};\r\n\r\nexport const UPDATE_TOOLTIP = 'UPDATE_TOOLTIP';\r\nexport const HIDE_TOOLTIP = 'HIDE_TOOLTIP';\r\n\r\nexport interface UpdateTooltipAction {\r\n  type : string;\r\n  x : number;\r\n  y : number;\r\n  content : ReactNode;\r\n};\r\nexport interface HideTooltipAction {\r\n  type : string;\r\n};\r\n\r\nexport type TooltipActionTypes = \r\n  UpdateTooltipAction \r\n  | HideTooltipAction;\r\n","import { GraphEdge, GraphNode } from '../pathways/types';\r\n\r\nexport interface SelectionState {\r\n  selectedNodes : GraphNode[];\r\n  selectedEdges : GraphEdge[];\r\n};\r\n\r\nexport const UPDATE_SELECTION = 'UPDATE_SELECTION';\r\n\r\nexport interface UpdateSelectionAction {\r\n  type : string;\r\n  selectedNodes : GraphNode[];\r\n  selectedEdges : GraphEdge[];\r\n};\r\n\r\nexport type SelectionActionTypes = \r\n  UpdateSelectionAction;\r\n","import * as THREE from 'three'\r\n\r\nexport class GraphEdgeShader extends THREE.ShaderMaterial {\r\n  constructor() {\r\n    super({\r\n      vertexShader: `\r\n        // attribute vec2 uv;\r\n        varying vec2 texcoord;\r\n        attribute vec4 color;\r\n        varying vec4 vColor;\r\n\r\n        void main() {\r\n            vec4 mvPosition = modelViewMatrix * vec4( position.xyz, 1.0 );\r\n            gl_Position = projectionMatrix * mvPosition;\r\n            texcoord = uv;\r\n            vColor = color;\r\n        }\r\n      `,\r\n      fragmentShader: `\r\n        varying vec2 texcoord;\r\n        varying vec4 vColor;\r\n        void main() {\r\n          gl_FragColor = vColor;\r\n          gl_FragColor.w *= (1.0 - pow(texcoord.x, 4.0));\r\n          // gl_FragColor.w *= 0.2;\r\n        }\r\n      `,\r\n      blendSrc: THREE.SrcAlphaFactor,\r\n      blendDst: THREE.OneMinusSrcAlphaFactor,\r\n      blending: THREE.CustomBlending,\r\n      // blendEquation: THREE.AddEquation,\r\n      // blending: THREE.AdditiveBlending,\r\n      // blending: THREE.NormalBlending,\r\n      // depthTest: false,\r\n      transparent: true,\r\n      // vertexColors: true,\r\n    });\r\n\r\n    this.uniforms = {\r\n      map: { value: null },  // Required by three.js for uv parameter setup\r\n      // pointTexture: { value: options.pointTexture },\r\n    }\r\n  }\r\n}\r\n","import React, { useMemo } from 'react';\r\n\r\nimport { GraphEdgeShader } from '../shaders/GraphEdgeShader';\r\nimport { BufferAttribute } from 'three';\r\nimport { GraphEdge } from '../store/pathways/types';\r\n\r\nexport interface GraphEdgesProps {\r\n  edges : GraphEdge[];\r\n  color : number[];\r\n}\r\n\r\nfunction GraphEdges({ edges, color } : GraphEdgesProps) {\r\n  const [ posBuf, uvBuf, colorBuf ] = useMemo(\r\n    () => {\r\n      // console.log('edges.length', edges.length);\r\n      \r\n      const positions : number[] = [];\r\n      const uvs : number[] = [];\r\n      const colors : number[] = [];\r\n\r\n      const addEdge = (edge : GraphEdge) => {\r\n        positions.push(\r\n          edge.sourcePos[0],\r\n          edge.sourcePos[1],\r\n          0,\r\n          edge.targetPos[0],\r\n          edge.targetPos[1],\r\n          0,\r\n        );\r\n        uvs.push(0.0, 0.0, 1.0, 1.0);\r\n        colors.push(...color);\r\n        colors.push(...color);\r\n      }\r\n\r\n      edges.forEach(e => addEdge(e));\r\n\r\n      return [ \r\n        new BufferAttribute(new Float32Array(positions), 3),\r\n        new BufferAttribute(new Float32Array(uvs), 2),\r\n        new BufferAttribute(new Float32Array(colors), 4),\r\n      ];\r\n    },\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [edges]\r\n  );\r\n\r\n  const [ graphEdgeShader ] = useMemo(() => {\r\n    const graphEdgeShader = new GraphEdgeShader();\r\n    return [ graphEdgeShader ];\r\n  }, []);\r\n\r\n  return (\r\n    <lineSegments\r\n      frustumCulled={false}\r\n      material={graphEdgeShader}>\r\n      <bufferGeometry attach=\"geometry\"\r\n        attributes={{\r\n          position: posBuf,\r\n          uv: uvBuf,\r\n          color: colorBuf,\r\n        }}\r\n      />\r\n      {/* <lineBasicMaterial attach=\"material\" color={new THREE.Color(0,0,0)}/> */}\r\n    </lineSegments>\r\n  );\r\n}\r\nexport default GraphEdges;\r\n","import React from 'react';\r\n\r\nimport { store } from '../store';\r\nimport { SelectionState } from '../store/selection/types';\r\nimport { Unsubscribe } from 'redux';\r\n\r\ninterface State {\r\n  selection : SelectionState;\r\n};\r\n\r\nexport const observeSelection = <P extends object>(\r\n  Wrapped : React.ComponentType<P>,\r\n  stateSelector : (state : SelectionState, props : P) => P,\r\n) => {\r\n  class Wrapper extends React.Component<P, State> {\r\n    private subscription : Unsubscribe = () => {};\r\n    private _mounted : boolean = false;\r\n\r\n    constructor(props : P) {\r\n      super(props);\r\n\r\n      this.state = {\r\n        selection: { selectedNodes: [], selectedEdges: [] },\r\n      };\r\n    }\r\n    handleStoreUpdate() {\r\n      if(!this._mounted)\r\n        return\r\n      this.setState({\r\n        selection: {...store.getState().selection},\r\n      })\r\n    }\r\n    componentDidMount() {\r\n      this._mounted = true;\r\n      this.subscription = store.subscribe(this.handleStoreUpdate.bind(this));\r\n      this.handleStoreUpdate();\r\n    }\r\n    componentWillUnmount() {\r\n      this._mounted = false;\r\n      // Unsubscribe from the store\r\n      this.subscription();\r\n    }\r\n    render() {\r\n      const props = stateSelector(this.state.selection, this.props);\r\n      return <Wrapped {...props} />;\r\n    }\r\n  };\r\n  return Wrapper\r\n}\r\n\r\nexport default observeSelection;\r\n","import * as THREE from 'three'\r\n\r\ninterface Props extends THREE.ShaderMaterialParameters {\r\n  pointTexture : THREE.Texture;\r\n}\r\n\r\nexport class PointShader extends THREE.ShaderMaterial {\r\n  constructor(options : Props) {\r\n    super({\r\n      vertexShader: `\r\n        attribute float size;\r\n        attribute vec4 color;\r\n        varying vec4 vColor;\r\n\r\n        void main() {\r\n            vec4 mvPosition = modelViewMatrix * vec4( position.xyz, 1.0 );\r\n            gl_PointSize = 5.0 * size;\r\n            gl_Position = projectionMatrix * mvPosition;\r\n            vColor = color;\r\n            // if(size == 0.0)\r\n            //   color.w = 0.0;\r\n        }\r\n      `,\r\n      fragmentShader: `\r\n        uniform sampler2D pointTexture;\r\n        varying vec4 vColor;\r\n        void main() {\r\n          gl_FragColor = vColor * texture2D(pointTexture, gl_PointCoord);\r\n          // gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\r\n          // gl_FragColor.w *= 0.4;\r\n        }\r\n      `,\r\n      // blendSrc: THREE.SrcAlphaFactor,\r\n      // blendDst: THREE.OneMinusSrcAlphaFactor,\r\n      // blending: THREE.CustomBlending,\r\n      // blendEquation: THREE.AddEquation,\r\n      // blending: THREE.AdditiveBlending,\r\n      // blending: THREE.NoBlending,\r\n      blending: THREE.NormalBlending,\r\n      // depthTest: false,\r\n      transparent: true,\r\n      // vertexColors: true,\r\n    });\r\n\r\n    this.uniforms = {\r\n      pointTexture: { value: options.pointTexture },\r\n    }\r\n  }\r\n}\r\n","import React, { useMemo } from 'react';\r\nimport * as THREE from 'three';\r\n\r\nimport { PointShader } from '../shaders/PointShader';\r\nimport { BufferAttribute } from 'three';\r\nimport { Point } from '../core/types';\r\n\r\nexport interface GraphNodesProps {\r\n  nodes : Point[];\r\n  sizes : number[];\r\n  colors : number[];\r\n}\r\n\r\nfunction GraphNodes({ nodes, sizes, colors } : GraphNodesProps) {\r\n  const [ posBuf ] = useMemo(\r\n    () => {\r\n      // console.log('nodes.length', nodes.length);\r\n\r\n      const positions : number[] = [];\r\n      const addNode = (node : Point) => {\r\n        positions.push(\r\n          node.x,\r\n          node.y,\r\n          0\r\n        );\r\n      };\r\n\r\n      nodes.forEach(n => addNode(n));\r\n\r\n      return [ \r\n        new BufferAttribute(new Float32Array(positions), 3),\r\n      ];\r\n    },\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [nodes]\r\n  );\r\n\r\n  const [ sizeBuf, colorBuf ] = useMemo(\r\n    () => {\r\n      return [ \r\n        new BufferAttribute(new Float32Array(sizes), 1),\r\n        new BufferAttribute(new Float32Array(colors), 4),\r\n      ];\r\n    },\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [sizes, colors]\r\n  );\r\n\r\n  const [ pointShader ] = useMemo(() => {\r\n    const loader = new THREE.TextureLoader();\r\n    const pointShader = new PointShader({\r\n      pointTexture: loader.load('./textures/circle.png'),\r\n    });\r\n    return [ pointShader ];\r\n  }, []);\r\n\r\n  if(nodes.length < 1) {\r\n    return (\r\n      <>\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <points\r\n      frustumCulled={false}\r\n      material={pointShader}>\r\n      <bufferGeometry attach=\"geometry\"\r\n        attributes={{\r\n          position: posBuf,\r\n          size: sizeBuf,\r\n          color: colorBuf,\r\n        }}\r\n      />\r\n      {/* <lineBasicMaterial attach=\"material\" color={new THREE.Color(0,0,0)}/> */}\r\n    </points>\r\n  );\r\n};\r\n\r\nexport default GraphNodes;\r\n","import React, { useMemo, useState, useEffect } from 'react';\r\n\r\nimport { store } from '../store';\r\nimport { GraphNode, GraphEdge } from '../store/pathways/types';\r\nimport GraphEdges, { GraphEdgesProps } from './GraphEdges';\r\nimport { observeSelection } from './ObservesSelection';\r\nimport { SelectionState } from '../store/selection/types';\r\nimport GraphNodes, { GraphNodesProps } from './GraphNodes';\r\n\r\ninterface Props {\r\n  nodes : GraphNode[];\r\n  edges : GraphEdge[];\r\n}\r\n\r\nconst Graph = ({ nodes, edges } : Props) => {\r\n  const neutralColor = [0, 0, 0, 0.05];\r\n  const warmColor = [251.0 / 255, 101.0 / 255, 66.0 / 255, 0.4];\r\n  const coldColor = [55.0 / 255, 94.0 / 255, 151.0 / 255, 0.4];\r\n\r\n  const [ filteredGeneExpression, setFilteredGeneExpression ] = useState(\r\n    store.getState().expressionDataset.filteredGeneExpression\r\n  );\r\n  const handleStoreUpdate = () => {\r\n    setFilteredGeneExpression(store.getState().expressionDataset.filteredGeneExpression);\r\n  };\r\n  useEffect(() => {\r\n    const subscription = store.subscribe(() => {\r\n      handleStoreUpdate();\r\n    });\r\n    handleStoreUpdate();\r\n    return subscription;\r\n  }, []);\r\n\r\n  function getNodeColorsAndSizes(nodes : GraphNode[], emphasized : boolean = false) {\r\n    const colors : number[] = [];\r\n    const sizes : number[] = [];\r\n\r\n    for(let i = 0; i < nodes.length; i++) {\r\n      const node = nodes[i];\r\n      let color = neutralColor;\r\n      let size = 1.0;\r\n      if(node.type === 'molecule') {\r\n        const geneName = node.entityReference?.gene?.name;\r\n        // console.log('geneName', geneName);\r\n        if(geneName) {\r\n          const expressionData = filteredGeneExpression.get(geneName);\r\n          if(expressionData != null) {\r\n            let foldChange = expressionData.fold_change_log2 || 0;\r\n            size = Math.sqrt(Math.abs(foldChange)) * 2.0;\r\n            if(foldChange > 0)\r\n              color = warmColor;\r\n            else\r\n              color = coldColor;\r\n          }\r\n        }\r\n      }\r\n      if(emphasized) {\r\n        color = color.slice();\r\n        color[3] = 1.0;\r\n      }\r\n      colors.push(...color);\r\n      sizes.push(size);\r\n    }\r\n\r\n    return [ \r\n      colors,\r\n      sizes,\r\n    ];\r\n  }\r\n\r\n  const [ colors, sizes ] = useMemo(\r\n    () => {\r\n      return getNodeColorsAndSizes(nodes);\r\n    },\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [nodes, filteredGeneExpression]\r\n  );\r\n\r\n  const SelectionAwareGraphNodes = observeSelection(\r\n    GraphNodes,\r\n    (state : SelectionState, props : GraphNodesProps) => {\r\n      const [ colors, sizes ] = getNodeColorsAndSizes(state.selectedNodes, true);\r\n      return {\r\n        ...props,\r\n        nodes: state.selectedNodes,\r\n        colors,\r\n        sizes,\r\n      };\r\n    }\r\n  );\r\n\r\n  const SelectionAwareGraphEdges = observeSelection(\r\n    GraphEdges,\r\n    (state : SelectionState, props : GraphEdgesProps) => {\r\n      return {\r\n        ...props,\r\n        edges: state.selectedEdges,\r\n      };\r\n    }\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <GraphEdges edges={edges} color={[0, 0, 0, 0.2]} />\r\n      <SelectionAwareGraphEdges edges={[]} color={[130 / 255, 179 / 255, 54 / 255, 1.0]} />\r\n      <GraphNodes nodes={nodes} sizes={sizes} colors={colors} />\r\n      <SelectionAwareGraphNodes nodes={[]} sizes={[]} colors={[]} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Graph;\r\n","import React from 'react';\r\n\r\nimport './Tooltip.scss';\r\n\r\ntype Props = {\r\n  active : boolean;\r\n  x : number;\r\n  y : number;\r\n  content : JSX.Element;\r\n};\r\n\r\nfunction Tooltip({ active, x, y, content } : Props) {\r\n  return (\r\n    <div className=\"tooltip\" style={{ left: x, top: y, display: active ? 'block' : 'none' }}>\r\n      {content}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tooltip;\r\n","import React, { useEffect, useState, useMemo } from 'react';\r\nimport { connect, ConnectedProps  } from 'react-redux';\r\nimport { useGesture } from 'react-use-gesture'\r\nimport { CanvasContext } from 'react-three-fiber';\r\n\r\nimport { CombinedState } from '../store';\r\nimport Tooltip from \"./Tooltip\";\r\nimport RBush from 'rbush';\r\nimport knn from 'rbush-knn';\r\nimport { GraphNode, GeneAnnotation } from '../store/pathways/types';\r\nimport { updateSelection } from '../store/selection/actions';\r\n\r\nconst mapStateToProps = (\r\n  state : CombinedState\r\n) => {\r\n  return {\r\n    // pathwayGraph: state.pathways.graph,\r\n    expressionDataset: state.expressionDataset,\r\n    filteredGeneExpression: state.expressionDataset.filteredGeneExpression,\r\n    graph: state.pathways.graph,\r\n    geneAnnotations: state.pathways.geneAnnotations,\r\n    // filterExpressionData: state.expressionDataset.filtered,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  updateSelection,\r\n};\r\n\r\nconst connector = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n);\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>;\r\n\r\ntype Props = PropsFromRedux & {\r\n  nodes : GraphNode[];\r\n  canvasContainerRef : React.RefObject<HTMLDivElement>;\r\n  canvasCtx : CanvasContext;\r\n};\r\n\r\nfunction TooltipController({\r\n  nodes, \r\n  graph,\r\n  geneAnnotations,\r\n  canvasContainerRef, \r\n  canvasCtx, \r\n  expressionDataset,\r\n  filteredGeneExpression,\r\n  updateSelection,\r\n} : Props) {\r\n  const [ refExpressionRows, pointTree ] = useMemo(\r\n    () => {\r\n      const refExpressionRows = new Map<number, number>();\r\n      const pointTree = new RBush();\r\n      \r\n      const filteredNodes : GraphNode[] = [];\r\n\r\n      for(let i = 0; i < nodes.length; i++) {\r\n        const node = nodes[i];\r\n        let shouldInclude = false;\r\n        let refExpressionRow = -1;\r\n        if(node.type === 'molecule') {\r\n          const geneName = node.entityReference?.gene?.name;\r\n          if(geneName) {\r\n            const expressionData = filteredGeneExpression.get(geneName);\r\n            if(expressionData != null) {\r\n              shouldInclude = true;\r\n              refExpressionRow = expressionData.__id || -1;\r\n              // let foldChange = expressionData.fold_change_log2 || 0;\r\n            }\r\n          }\r\n        }\r\n        if(shouldInclude)\r\n          filteredNodes.push(nodes[i] as GraphNode);\r\n        refExpressionRows.set(node.__id, refExpressionRow);\r\n      }\r\n\r\n      // pointTree.clear();\r\n      pointTree.load(filteredNodes);\r\n\r\n      return [\r\n        refExpressionRows,\r\n        pointTree,\r\n      ];\r\n    },\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [filteredGeneExpression, nodes]\r\n  );\r\n\r\n  const [ targetId, setTargetId ] = useState(-1);\r\n  const [ tooltipState, setTooltipState ] = useState({\r\n    active: false,\r\n    x: 0,\r\n    y: 0,\r\n    content: <></>,\r\n  });\r\n\r\n  function onMouseMove(x : number, y : number) {\r\n    if(!canvasCtx) {\r\n      console.warn('canvasCtx not set, ignoring tooltip events');\r\n      return;\r\n    }\r\n    const mouseX = x - (canvasContainerRef.current?.offsetLeft || 0);\r\n    const mouseY = y - (canvasContainerRef.current?.offsetTop || 0);\r\n    \r\n    const { width, height } = canvasCtx.size;\r\n    const camera = canvasCtx.camera;\r\n\r\n    let mx = (mouseX - width / 2) / camera.zoom + camera.position.x;\r\n    let my = (height - mouseY - height / 2) / camera.zoom + camera.position.y;\r\n\r\n    // Tooltip targeting\r\n    let nearest = knn(\r\n      pointTree, \r\n      mx, \r\n      my, \r\n      1\r\n    );\r\n    if(nearest.length > 0) {\r\n      const node = nearest[0] as GraphNode;\r\n      if(node.__id !== targetId) {\r\n        setTargetId(node.__id)\r\n        const refExpressionRow = refExpressionRows.get(node.__id);\r\n        const row = (refExpressionRow && refExpressionRow >= 0) ? expressionDataset.raw[refExpressionRow] : undefined;\r\n        // console.log('updateTooltip', row)\r\n\r\n        // Get depth-2 adjacent nodes\r\n        const firstNeighbours = Array.from(new Set(\r\n          (graph.edgeMap.get(node.__id) || [])\r\n            .map(e => {\r\n              return {\r\n                node: graph.nodes[e.source === node.__id ? e.target : e.source],\r\n                relation: e.relation,\r\n              };\r\n            })\r\n          ));\r\n        const selectedEdges = firstNeighbours\r\n          .map(firstNeighbour => graph.edgeMap.get(firstNeighbour.node.__id) || [])\r\n          .reduce((a, b) => [ ...a, ...b ], []);\r\n        const selectedNodes : { [key : number] : GraphNode } = {};\r\n        selectedEdges.forEach(e => {\r\n          selectedNodes[e.source] = graph.nodes[e.source];\r\n          selectedNodes[e.target] = graph.nodes[e.target];\r\n        });\r\n\r\n        const geneName = node.entityReference?.gene?.name;\r\n        let geneAnnotation : GeneAnnotation | undefined = undefined;\r\n        if(geneName)\r\n          geneAnnotation = geneAnnotations.genes.get(geneName);\r\n        \r\n        updateSelection(Object.values(selectedNodes), selectedEdges);\r\n\r\n        const renderTruncatedList = <T extends any>(\r\n          list : T[] | undefined, \r\n          itemCallback : (item : T, i : number) => JSX.Element,\r\n          limit : number,\r\n          trunctationNoticeWrapper? : (truncationNotice : JSX.Element, i : number) => JSX.Element,\r\n        ) => {\r\n          let i = 0;\r\n          const res = [];\r\n          if(list == null) {\r\n            res.push(<div key={0}>—</div>);\r\n            return res\r\n          }\r\n          while(i < list.length && i < limit) {\r\n            res.push(itemCallback(list[i], i));\r\n            i++;\r\n          }\r\n          if(i < list.length) {\r\n            let truncationNotice = (\r\n              <div className=\"list-truncation-notice\" key={i+1}>\r\n                {list.length - i} more..\r\n              </div>\r\n            );\r\n            if(trunctationNoticeWrapper)\r\n              truncationNotice = trunctationNoticeWrapper(truncationNotice, i+1);\r\n            res.push(truncationNotice);\r\n          }\r\n          return res;\r\n        };\r\n\r\n        // const dashForNan = (val : string) => (val && val !== '' && val !== 'nan') ? val : '—';\r\n        setTooltipState({\r\n          active: true,\r\n          x: ((node.x || 0) - camera.position.x) * camera.zoom + width / 2,\r\n          y: height / 2 - ((node.y || 0) - camera.position.y) * camera.zoom,\r\n          content: <>\r\n            <div className=\"prop\">\r\n              <div className=\"name\">Name</div>\r\n              <div className=\"value\">{geneName || node.name}</div>\r\n            </div>\r\n            <div className=\"prop\">\r\n              <div className=\"name\">Location</div>\r\n              <div className=\"value\">{node.cellularLocation}</div>\r\n            </div>\r\n            <div className=\"prop\">\r\n              <div className=\"name\">log<sub>2</sub>(Fold-change)</div>\r\n              <div className=\"value\" style={{ color: (row?.fold_change_log2 || 0) > 0 ? \"#fb6542\" : \"#375e97\" }}>\r\n                {row?.fold_change_log2?.toFixed(2)}\r\n              </div>\r\n            </div>\r\n            <div className=\"prop\">\r\n              <div className=\"name\">xref</div>\r\n              <div className=\"value\">{node.entityReference?.xref?.db}:{node.entityReference?.xref?.id}</div>\r\n            </div>\r\n            <div className=\"prop\">\r\n              <div className=\"name\">GO terms</div>\r\n              <div className=\"value\">\r\n                {renderTruncatedList(geneAnnotation?.go_terms, (gt, i) => \r\n                  <div className=\"go-term\" key={i}>{gt}</div>\r\n                , 2)}\r\n              </div>\r\n            </div>\r\n            {renderTruncatedList(firstNeighbours, (neighbour, i) => \r\n              <div className=\"prop\" key={i}>\r\n                <div className=\"name\">\r\n                  <span className=\"accent\">{neighbour.relation}</span> in\r\n                </div>\r\n                <div className=\"value\">{neighbour.node.name}</div>\r\n              </div>\r\n            , 2, (truncationNotice, i) =>\r\n              <div className=\"prop\" key={i}>\r\n                <div className=\"name\"></div>\r\n                <div className=\"value\">{truncationNotice}</div>\r\n              </div>\r\n            )}\r\n          </>\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  const bind = useGesture({\r\n    onMove: ({ xy: [x, y] }) => {\r\n      onMouseMove(x, y);\r\n    },\r\n    onTouchStart: ({ touches }) => {\r\n      onMouseMove(touches[0].pageX, touches[0].pageY);\r\n    },\r\n    // onClick: ({ clientX: x, clientY: y }) => {\r\n    //   onMouseMove(x, y);\r\n    // },\r\n  }, {\r\n    domTarget: canvasContainerRef,\r\n    event: { passive: false },\r\n  });\r\n  useEffect(() => { bind(); }, [bind, canvasCtx]);\r\n\r\n  return (\r\n    <Tooltip {...tooltipState} />\r\n  );\r\n}\r\n\r\nexport default connector(TooltipController);\r\n","import { \r\n  UpdateSelectionAction,\r\n  UPDATE_SELECTION\r\n} from './types'\r\nimport { GraphEdge, GraphNode } from '../pathways/types';\r\n\r\nexport const updateSelection = (\r\n  selectedNodes : GraphNode[], \r\n  selectedEdges : GraphEdge[]\r\n) : UpdateSelectionAction => {\r\n  return {\r\n    type: UPDATE_SELECTION,\r\n    selectedNodes,\r\n    selectedEdges,\r\n  }\r\n};\r\n","import React, { useEffect, useState, useMemo, useRef } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport axios from 'axios';\nimport * as THREE from 'three';\nimport * as Papa from 'papaparse';\nimport { Canvas, CanvasContext } from 'react-three-fiber';\n\nimport { dpi } from './config'\nimport { CsvParseResult, ExpressionDataRow } from './core/types'\nimport {\n  updateDataset, \n  setFilterDimensions, \n  addCustomFilterDimension,\n  setFilterValue,\n} from './store/expression-dataset/actions'\nimport { updatePathways, updateGeneAnnotations } from './store/pathways/actions'\nimport FilterPanel from './components/FilterPanel'\nimport SceneController from './components/SceneController'\n// import Volcano from './components/Volcano'\nimport './App.scss';\nimport Graph from './components/Graph';\nimport TooltipController from './components/TooltipController';\nimport { CombinedState } from './store';\nimport { GraphEdge, GraphNode, DehydratedPathwayGraph, GeneAnnotation } from './store/pathways/types';\n\nconst mapStateToProps = (\n  state : CombinedState\n) => {\n  return {\n    nodes: state.pathways.graph.nodes,\n    edges: state.pathways.graph.edges,\n  };\n};\n\nconst mapDispatchToProps = {\n  updateDataset,\n  setFilterDimensions,\n  addCustomFilterDimension,\n  setFilterValue,\n  updatePathways,\n  updateGeneAnnotations,\n};\n\nconst connector = connect(\n  mapStateToProps,\n  mapDispatchToProps\n);\n\nfunction App({\n  updateDataset, \n  setFilterDimensions, \n  addCustomFilterDimension,\n  setFilterValue,\n  updatePathways,\n  updateGeneAnnotations,\n  nodes,\n  edges,\n} : Partial<ConnectedProps<typeof connector>>) {\n  const [ loading, setLoading ] = useState(true);\n  useEffect(\n    () => {\n      const loadData = async () => {\n        // Load the expression data\n        const csvData : CsvParseResult = await new Promise(\n          function(complete, error) {\n            Papa.parse(\n              // './data/facs-18m-24m-cell_ontology_class.csv', \n              './data/merged_augmented.csv', \n              {\n                delimiter: ',',\n                header: true,\n                download: true,\n                dynamicTyping: true,\n                skipEmptyLines: true,\n                complete, \n                error\n              }\n            );\n        });\n        updateDataset?.(csvData.data as ExpressionDataRow[]);\n        setFilterDimensions?.(\n          [ 'start_age', 'end_age', 'sex', 'tissue', 'subtissue', 'cell_ontology_class' ]\n        );\n        setFilterValue?.('sex', 'male');\n        [ 'tissue', 'subtissue', 'cell_ontology_class' ].map(d => setFilterValue?.(d, ''));\n        // Text column filter\n        const textColumns = [\n          'tissue', 'subtissue', 'cell_ontology_class', 'gene', 'uniprot_mouse', 'uniprot_daphnia'\n        ];\n        addCustomFilterDimension?.(\n          'text',\n          (row : ExpressionDataRow) => \n            textColumns.map(d => (row as any)[d]).join('|').toLowerCase(),\n          (filterValue) => {\n            return v => (v as string).includes((filterValue as string).toLowerCase());\n          }\n        );\n        // Daphnia homolog presence filter\n        addCustomFilterDimension?.(\n          'uniprot_daphnia',\n          (row : ExpressionDataRow) => \n            row.uniprot_daphnia || '',\n          (filterValue) => {\n            if((filterValue as String) === '~') {\n              // Match non-empty values\n              return v => v != null && v !== '';\n            }\n            return v => v === filterValue;\n          }\n        );\n\n        // Load pathways\n        let pathways = await axios.get('./data/pathways_preprocessed.json');\n        updatePathways?.(pathways.data as DehydratedPathwayGraph);\n        // Load gene annotations\n        let gene_annotations = await axios.get('./data/gene_annotations.json');\n        updateGeneAnnotations?.(gene_annotations.data as GeneAnnotation[]);\n\n        setLoading(false);\n      };\n      loadData();\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  );\n\n  const canvasContainerRef = useRef<HTMLDivElement>(null);\n  const canvasCtx = useRef<CanvasContext>();\n\n  const onCanvasCreated = (ctx : CanvasContext) => {\n    canvasCtx.current = ctx;\n  };\n\n  const displayNodes = useMemo(() => {\n    return (nodes?.filter(n => n.entityReference?.gene) || []) as GraphNode[];\n  }, [nodes]);\n\n  return (\n    <div className=\"App\">\n      <TooltipController {...{ \n        nodes: displayNodes, \n        canvasContainerRef: canvasContainerRef as React.RefObject<HTMLDivElement>, \n        canvasCtx: canvasCtx.current as CanvasContext,\n      }} />\n      <FilterPanel />\n      <div className=\"main-canvas\" ref={canvasContainerRef}>\n        <Canvas\n          // id=\"gl-canvas\"\n          camera={{\n            fov: 75,\n            near: 1.0,\n            far: 10000,\n            position: [0, 0, 1000],\n            rotation: new THREE.Euler(0, 0, 0)\n          }}\n          orthographic={true}\n          pixelRatio={dpi}\n          invalidateFrameloop={true}\n          gl2={true}\n          onCreated={onCanvasCreated}\n          // {...bind()}\n        >\n          <SceneController {...{\n            canvasContainerRef: canvasContainerRef as React.RefObject<HTMLDivElement>,\n          }}>\n            <Graph {...{\n              nodes: displayNodes, \n              edges: [] as GraphEdge[], \n            }} />\n            {/* <Volcano /> */}\n          </SceneController>\n        </Canvas>\n      </div>\n      {loading && \n        <div className=\"loading\">\n          <div className=\"lds-ripple\"><div></div><div></div></div>\n        </div>\n      }\n    </div>\n  );\n}\n\nexport default connector(App);\n","import { PathwayGraphData } from '../../core/types'\r\nimport { \r\n  UpdatePathwaysAction, \r\n  UpdatePathwaysFilterAction, \r\n  UPDATE_PATHWAYS, \r\n  UPDATE_FILTER,\r\n  FilterValueType,\r\n  DehydratedPathwayGraph,\r\n  UPDATE_GENE_ANNOTATIONS,\r\n  UpdateGeneAnnotationsAction,\r\n  GeneAnnotation,\r\n} from './types'\r\n\r\nexport const updatePathways = (pathways : PathwayGraphData | DehydratedPathwayGraph) : UpdatePathwaysAction => {\r\n  return {\r\n    type: UPDATE_PATHWAYS,\r\n    pathways,\r\n  }\r\n};\r\n\r\nexport const updateGeneAnnotations = (geneAnnotations : GeneAnnotation[]) : UpdateGeneAnnotationsAction => {\r\n  return {\r\n    type: UPDATE_GENE_ANNOTATIONS,\r\n    geneAnnotations,\r\n  }\r\n};\r\n\r\nexport const updateFilter = (name : string, value : FilterValueType) : UpdatePathwaysFilterAction => {\r\n  return {\r\n    type: UPDATE_FILTER,\r\n    name,\r\n    value,\r\n  }\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport { store } from './store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}